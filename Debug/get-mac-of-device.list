
get-mac-of-device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033a0  0800703c  0800703c  0001703c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3dc  0800a3dc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3dc  0800a3dc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3dc  0800a3dc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3dc  0800a3dc  0001a3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3e0  0800a3e0  0001a3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a3e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000153c  20000078  0800a45c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015b4  0800a45c  000215b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000391e7  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003308  00000000  00000000  0005928f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  0005c598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  0005d2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001012b  00000000  00000000  0005dde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfa1  00000000  00000000  0006df13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004bff8  00000000  00000000  0007aeb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  000c6eac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003350  00000000  00000000  000c6f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000078 	.word	0x20000078
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007024 	.word	0x08007024

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000007c 	.word	0x2000007c
 80001d0:	08007024 	.word	0x08007024

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <buttonInit>:
/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

void buttonInit(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b086      	sub	sp, #24
 80001fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioInitStruct;
	EXTI_InitTypeDef extiInitStruct;
	NVIC_InitTypeDef nvicInitStruct;
	//---------------------------------------------------------------------------B3
	//1. Bat xung clock
	RCC_AHB1PeriphClockCmd(BUTTON_B3_GPIO_RCC, ENABLE);
 80001fe:	2101      	movs	r1, #1
 8000200:	2001      	movs	r0, #1
 8000202:	f004 f8ab 	bl	800435c <RCC_AHB1PeriphClockCmd>

	//2. Config GPIO
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN;
 8000206:	2300      	movs	r3, #0
 8000208:	753b      	strb	r3, [r7, #20]
	gpioInitStruct.GPIO_Pin = BUTTON_B3_PIN;
 800020a:	2310      	movs	r3, #16
 800020c:	613b      	str	r3, [r7, #16]
	gpioInitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 800020e:	2301      	movs	r3, #1
 8000210:	75fb      	strb	r3, [r7, #23]
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000212:	2302      	movs	r3, #2
 8000214:	757b      	strb	r3, [r7, #21]

	GPIO_Init(BUTTON_B3_PORT, &gpioInitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	4848      	ldr	r0, [pc, #288]	; (8000340 <buttonInit+0x148>)
 800021e:	f003 feeb 	bl	8003ff8 <GPIO_Init>
	//3. Config ngat
		//3.1 Bat xung cap cho ngat
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000222:	2101      	movs	r1, #1
 8000224:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000228:	f004 f8b8 	bl	800439c <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(BUTTON_B3_EXTI_PORTSOURCE, BUTTON_B3_EXTI_PinSource);
 800022c:	2104      	movs	r1, #4
 800022e:	2000      	movs	r0, #0
 8000230:	f004 f8d4 	bl	80043dc <SYSCFG_EXTILineConfig>

		//3.2 Cau hinh EXTI
	extiInitStruct.EXTI_Line = BUTTON_B3_EXTI_LINE;
 8000234:	2310      	movs	r3, #16
 8000236:	60bb      	str	r3, [r7, #8]
	extiInitStruct.EXTI_LineCmd = ENABLE;
 8000238:	2301      	movs	r3, #1
 800023a:	73bb      	strb	r3, [r7, #14]
	extiInitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 800023c:	2300      	movs	r3, #0
 800023e:	733b      	strb	r3, [r7, #12]
	extiInitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000240:	2310      	movs	r3, #16
 8000242:	737b      	strb	r3, [r7, #13]

	EXTI_Init(&extiInitStruct);
 8000244:	f107 0308 	add.w	r3, r7, #8
 8000248:	4618      	mov	r0, r3
 800024a:	f003 fe53 	bl	8003ef4 <EXTI_Init>

		//3.3 Cau hinh trinh phuc vu ngat
	nvicInitStruct.NVIC_IRQChannel = BUTTON_B3_NVIC_IRQCHANNEL;
 800024e:	230a      	movs	r3, #10
 8000250:	713b      	strb	r3, [r7, #4]
	nvicInitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000252:	2301      	movs	r3, #1
 8000254:	71fb      	strb	r3, [r7, #7]
	nvicInitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8000256:	2300      	movs	r3, #0
 8000258:	717b      	strb	r3, [r7, #5]
	nvicInitStruct.NVIC_IRQChannelSubPriority = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	71bb      	strb	r3, [r7, #6]

	NVIC_Init(&nvicInitStruct);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f003 fde5 	bl	8003e30 <NVIC_Init>
	//---------------------------------------------------------------------------B2
	//1. Bat xung clock
	RCC_AHB1PeriphClockCmd(BUTTON_B2_GPIO_RCC, ENABLE);
 8000266:	2101      	movs	r1, #1
 8000268:	2002      	movs	r0, #2
 800026a:	f004 f877 	bl	800435c <RCC_AHB1PeriphClockCmd>

	//2. Config GPIO
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN;
 800026e:	2300      	movs	r3, #0
 8000270:	753b      	strb	r3, [r7, #20]
	gpioInitStruct.GPIO_Pin = BUTTON_B2_PIN;
 8000272:	2308      	movs	r3, #8
 8000274:	613b      	str	r3, [r7, #16]
	gpioInitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000276:	2301      	movs	r3, #1
 8000278:	75fb      	strb	r3, [r7, #23]
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800027a:	2302      	movs	r3, #2
 800027c:	757b      	strb	r3, [r7, #21]

	GPIO_Init(BUTTON_B2_PORT, &gpioInitStruct);
 800027e:	f107 0310 	add.w	r3, r7, #16
 8000282:	4619      	mov	r1, r3
 8000284:	482f      	ldr	r0, [pc, #188]	; (8000344 <buttonInit+0x14c>)
 8000286:	f003 feb7 	bl	8003ff8 <GPIO_Init>
	//3. Config ngat
		//3.1 Bat xung cap cho ngat
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800028a:	2101      	movs	r1, #1
 800028c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000290:	f004 f884 	bl	800439c <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(BUTTON_B2_EXTI_PORTSOURCE, BUTTON_B2_EXTI_PinSource);
 8000294:	2103      	movs	r1, #3
 8000296:	2001      	movs	r0, #1
 8000298:	f004 f8a0 	bl	80043dc <SYSCFG_EXTILineConfig>

		//3.2 Cau hinh EXTI
	extiInitStruct.EXTI_Line = BUTTON_B2_EXTI_LINE;
 800029c:	2308      	movs	r3, #8
 800029e:	60bb      	str	r3, [r7, #8]
	extiInitStruct.EXTI_LineCmd = ENABLE;
 80002a0:	2301      	movs	r3, #1
 80002a2:	73bb      	strb	r3, [r7, #14]
	extiInitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 80002a4:	2300      	movs	r3, #0
 80002a6:	733b      	strb	r3, [r7, #12]
	extiInitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 80002a8:	2310      	movs	r3, #16
 80002aa:	737b      	strb	r3, [r7, #13]

	EXTI_Init(&extiInitStruct);
 80002ac:	f107 0308 	add.w	r3, r7, #8
 80002b0:	4618      	mov	r0, r3
 80002b2:	f003 fe1f 	bl	8003ef4 <EXTI_Init>

		//3.3 Cau hinh trinh phuc vu ngat
	nvicInitStruct.NVIC_IRQChannel = BUTTON_B2_NVIC_IRQCHANNEL;
 80002b6:	2309      	movs	r3, #9
 80002b8:	713b      	strb	r3, [r7, #4]
	nvicInitStruct.NVIC_IRQChannelCmd = ENABLE;
 80002ba:	2301      	movs	r3, #1
 80002bc:	71fb      	strb	r3, [r7, #7]
	nvicInitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	717b      	strb	r3, [r7, #5]
	nvicInitStruct.NVIC_IRQChannelSubPriority = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	71bb      	strb	r3, [r7, #6]

	NVIC_Init(&nvicInitStruct);
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4618      	mov	r0, r3
 80002ca:	f003 fdb1 	bl	8003e30 <NVIC_Init>
	//---------------------------------------------------------------------------B4
	//1. Bat xung clock
	RCC_AHB1PeriphClockCmd(BUTTON_B4_GPIO_RCC, ENABLE);
 80002ce:	2101      	movs	r1, #1
 80002d0:	2002      	movs	r0, #2
 80002d2:	f004 f843 	bl	800435c <RCC_AHB1PeriphClockCmd>

	//2. Config GPIO
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN;
 80002d6:	2300      	movs	r3, #0
 80002d8:	753b      	strb	r3, [r7, #20]
	gpioInitStruct.GPIO_Pin = BUTTON_B4_PIN;
 80002da:	2301      	movs	r3, #1
 80002dc:	613b      	str	r3, [r7, #16]
	gpioInitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80002de:	2301      	movs	r3, #1
 80002e0:	75fb      	strb	r3, [r7, #23]
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80002e2:	2302      	movs	r3, #2
 80002e4:	757b      	strb	r3, [r7, #21]

	GPIO_Init(BUTTON_B4_PORT, &gpioInitStruct);
 80002e6:	f107 0310 	add.w	r3, r7, #16
 80002ea:	4619      	mov	r1, r3
 80002ec:	4815      	ldr	r0, [pc, #84]	; (8000344 <buttonInit+0x14c>)
 80002ee:	f003 fe83 	bl	8003ff8 <GPIO_Init>
	//3. Config ngat
		//3.1 Bat xung cap cho ngat
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80002f2:	2101      	movs	r1, #1
 80002f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80002f8:	f004 f850 	bl	800439c <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(BUTTON_B4_EXTI_PORTSOURCE, BUTTON_B4_EXTI_PinSource);
 80002fc:	2100      	movs	r1, #0
 80002fe:	2001      	movs	r0, #1
 8000300:	f004 f86c 	bl	80043dc <SYSCFG_EXTILineConfig>

		//3.2 Cau hinh EXTI
	extiInitStruct.EXTI_Line = BUTTON_B4_EXTI_LINE;
 8000304:	2301      	movs	r3, #1
 8000306:	60bb      	str	r3, [r7, #8]
	extiInitStruct.EXTI_LineCmd = ENABLE;
 8000308:	2301      	movs	r3, #1
 800030a:	73bb      	strb	r3, [r7, #14]
	extiInitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 800030c:	2300      	movs	r3, #0
 800030e:	733b      	strb	r3, [r7, #12]
	extiInitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000310:	2310      	movs	r3, #16
 8000312:	737b      	strb	r3, [r7, #13]

	EXTI_Init(&extiInitStruct);
 8000314:	f107 0308 	add.w	r3, r7, #8
 8000318:	4618      	mov	r0, r3
 800031a:	f003 fdeb 	bl	8003ef4 <EXTI_Init>

		//3.3 Cau hinh trinh phuc vu ngat
	nvicInitStruct.NVIC_IRQChannel = BUTTON_B4_NVIC_IRQCHANNEL;
 800031e:	2306      	movs	r3, #6
 8000320:	713b      	strb	r3, [r7, #4]
	nvicInitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000322:	2301      	movs	r3, #1
 8000324:	71fb      	strb	r3, [r7, #7]
	nvicInitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	717b      	strb	r3, [r7, #5]
	nvicInitStruct.NVIC_IRQChannelSubPriority = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	71bb      	strb	r3, [r7, #6]

	NVIC_Init(&nvicInitStruct);
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4618      	mov	r0, r3
 8000332:	f003 fd7d 	bl	8003e30 <NVIC_Init>
}
 8000336:	bf00      	nop
 8000338:	3718      	adds	r7, #24
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40020000 	.word	0x40020000
 8000344:	40020400 	.word	0x40020400

08000348 <dwCalculatorTime>:
static uint32_t dwCalculatorTime(uint32_t dwTimeInit,uint32_t dwTimeCurrent)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]
	if(dwTimeCurrent >= dwTimeInit)
 8000352:	683a      	ldr	r2, [r7, #0]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	429a      	cmp	r2, r3
 8000358:	d303      	bcc.n	8000362 <dwCalculatorTime+0x1a>
	{
		return (dwTimeCurrent - dwTimeInit);
 800035a:	683a      	ldr	r2, [r7, #0]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	1ad3      	subs	r3, r2, r3
 8000360:	e003      	b.n	800036a <dwCalculatorTime+0x22>
	}else
	{
		return (0xFFFFFFFF + dwTimeCurrent - dwTimeInit);
 8000362:	683a      	ldr	r2, [r7, #0]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	1ad3      	subs	r3, r2, r3
 8000368:	3b01      	subs	r3, #1
	}
}
 800036a:	4618      	mov	r0, r3
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
	...

08000378 <processEventButton>:
ValueKey_e processEventButton(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
	ValueKey_e valueKeyTemp = NOKEY;
 800037e:	2300      	movs	r3, #0
 8000380:	71fb      	strb	r3, [r7, #7]

	GetEventButton(&buttonB3);
 8000382:	4841      	ldr	r0, [pc, #260]	; (8000488 <processEventButton+0x110>)
 8000384:	f000 f886 	bl	8000494 <GetEventButton>
	GetEventButton(&buttonB2);
 8000388:	4840      	ldr	r0, [pc, #256]	; (800048c <processEventButton+0x114>)
 800038a:	f000 f883 	bl	8000494 <GetEventButton>
	GetEventButton(&buttonB4);
 800038e:	4840      	ldr	r0, [pc, #256]	; (8000490 <processEventButton+0x118>)
 8000390:	f000 f880 	bl	8000494 <GetEventButton>
	switch(buttonB3.buttonEven)
 8000394:	4b3c      	ldr	r3, [pc, #240]	; (8000488 <processEventButton+0x110>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	3b01      	subs	r3, #1
 800039a:	2b03      	cmp	r3, #3
 800039c:	d81c      	bhi.n	80003d8 <processEventButton+0x60>
 800039e:	a201      	add	r2, pc, #4	; (adr r2, 80003a4 <processEventButton+0x2c>)
 80003a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a4:	080003bd 	.word	0x080003bd
 80003a8:	080003c9 	.word	0x080003c9
 80003ac:	080003d1 	.word	0x080003d1
 80003b0:	080003b5 	.word	0x080003b5
	{
	case EVENT_OF_BUTTON_HOLD_500MS:

		buttonB3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80003b4:	4b34      	ldr	r3, [pc, #208]	; (8000488 <processEventButton+0x110>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
		break;
 80003ba:	e011      	b.n	80003e0 <processEventButton+0x68>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = UP;
 80003bc:	2302      	movs	r3, #2
 80003be:	71fb      	strb	r3, [r7, #7]
		buttonB3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80003c0:	4b31      	ldr	r3, [pc, #196]	; (8000488 <processEventButton+0x110>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
		break;
 80003c6:	e00b      	b.n	80003e0 <processEventButton+0x68>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:
		buttonB3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80003c8:	4b2f      	ldr	r3, [pc, #188]	; (8000488 <processEventButton+0x110>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
		break;
 80003ce:	e007      	b.n	80003e0 <processEventButton+0x68>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:
		buttonB3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80003d0:	4b2d      	ldr	r3, [pc, #180]	; (8000488 <processEventButton+0x110>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
		break;
 80003d6:	e003      	b.n	80003e0 <processEventButton+0x68>
	default:
		buttonB3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80003d8:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <processEventButton+0x110>)
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
		break;
 80003de:	bf00      	nop
	}
	switch(buttonB2.buttonEven)
 80003e0:	4b2a      	ldr	r3, [pc, #168]	; (800048c <processEventButton+0x114>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	2b03      	cmp	r3, #3
 80003e8:	d81e      	bhi.n	8000428 <processEventButton+0xb0>
 80003ea:	a201      	add	r2, pc, #4	; (adr r2, 80003f0 <processEventButton+0x78>)
 80003ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f0:	0800040d 	.word	0x0800040d
 80003f4:	08000419 	.word	0x08000419
 80003f8:	08000421 	.word	0x08000421
 80003fc:	08000401 	.word	0x08000401
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		valueKeyTemp = RETURN;
 8000400:	2304      	movs	r3, #4
 8000402:	71fb      	strb	r3, [r7, #7]
		buttonB2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000404:	4b21      	ldr	r3, [pc, #132]	; (800048c <processEventButton+0x114>)
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
		break;
 800040a:	e011      	b.n	8000430 <processEventButton+0xb8>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = SELECT;
 800040c:	2301      	movs	r3, #1
 800040e:	71fb      	strb	r3, [r7, #7]
		buttonB2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <processEventButton+0x114>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
		break;
 8000416:	e00b      	b.n	8000430 <processEventButton+0xb8>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:

		buttonB2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000418:	4b1c      	ldr	r3, [pc, #112]	; (800048c <processEventButton+0x114>)
 800041a:	2200      	movs	r2, #0
 800041c:	701a      	strb	r2, [r3, #0]
		break;
 800041e:	e007      	b.n	8000430 <processEventButton+0xb8>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:

		buttonB2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000420:	4b1a      	ldr	r3, [pc, #104]	; (800048c <processEventButton+0x114>)
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
		break;
 8000426:	e003      	b.n	8000430 <processEventButton+0xb8>
	default:
		buttonB2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000428:	4b18      	ldr	r3, [pc, #96]	; (800048c <processEventButton+0x114>)
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
		break;
 800042e:	bf00      	nop
	}
	switch(buttonB4.buttonEven)
 8000430:	4b17      	ldr	r3, [pc, #92]	; (8000490 <processEventButton+0x118>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	3b01      	subs	r3, #1
 8000436:	2b03      	cmp	r3, #3
 8000438:	d81c      	bhi.n	8000474 <processEventButton+0xfc>
 800043a:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <processEventButton+0xc8>)
 800043c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000440:	08000459 	.word	0x08000459
 8000444:	08000465 	.word	0x08000465
 8000448:	0800046d 	.word	0x0800046d
 800044c:	08000451 	.word	0x08000451
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		buttonB4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <processEventButton+0x118>)
 8000452:	2200      	movs	r2, #0
 8000454:	701a      	strb	r2, [r3, #0]
		break;
 8000456:	e011      	b.n	800047c <processEventButton+0x104>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = DOWN;
 8000458:	2303      	movs	r3, #3
 800045a:	71fb      	strb	r3, [r7, #7]
		buttonB4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <processEventButton+0x118>)
 800045e:	2200      	movs	r2, #0
 8000460:	701a      	strb	r2, [r3, #0]
		break;
 8000462:	e00b      	b.n	800047c <processEventButton+0x104>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:
		buttonB4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <processEventButton+0x118>)
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]
		break;
 800046a:	e007      	b.n	800047c <processEventButton+0x104>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:
		buttonB4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <processEventButton+0x118>)
 800046e:	2200      	movs	r2, #0
 8000470:	701a      	strb	r2, [r3, #0]
		break;
 8000472:	e003      	b.n	800047c <processEventButton+0x104>
	default:
		buttonB4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <processEventButton+0x118>)
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]
		break;
 800047a:	bf00      	nop
	}
	return valueKeyTemp;
 800047c:	79fb      	ldrb	r3, [r7, #7]
}
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000094 	.word	0x20000094
 800048c:	200000ac 	.word	0x200000ac
 8000490:	200000c4 	.word	0x200000c4

08000494 <GetEventButton>:

static void GetEventButton(BUTTON_t *button)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]

static uint8_t byTemp;
uint32_t dwTimeNow,dwTimeTemp;
dwTimeNow = GetMilSecTick();
 800049c:	f004 fa48 	bl	8004930 <GetMilSecTick>
 80004a0:	60f8      	str	r0, [r7, #12]
if(button->byState == BUTTON_EDGE_RISING)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	7d1b      	ldrb	r3, [r3, #20]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d110      	bne.n	80004cc <GetEventButton+0x38>
	{
		//Neu nut nhan o trang thai dang nhan
		dwTimeTemp = dwCalculatorTime(button->dwTimeInit, dwTimeNow);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	68f9      	ldr	r1, [r7, #12]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff ff49 	bl	8000348 <dwCalculatorTime>
 80004b6:	60b8      	str	r0, [r7, #8]
		if(dwTimeTemp >= BUTTON_LONG_PRESS_TIME)
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80004be:	d305      	bcc.n	80004cc <GetEventButton+0x38>
		{
			//Nhan giu qua 500ms thi update event cua nut nhan la nhan giu
			button->buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2204      	movs	r2, #4
 80004c4:	701a      	strb	r2, [r3, #0]
			byTemp = 1;
 80004c6:	4b35      	ldr	r3, [pc, #212]	; (800059c <GetEventButton+0x108>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	701a      	strb	r2, [r3, #0]

		}
	}
if(button->byState == BUTTON_EDGE_FALLING)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	7d1b      	ldrb	r3, [r3, #20]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d15e      	bne.n	8000592 <GetEventButton+0xfe>
{
	//Neu nut nhan duoc nha ra
	if((byTemp == 0))
 80004d4:	4b31      	ldr	r3, [pc, #196]	; (800059c <GetEventButton+0x108>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d14b      	bne.n	8000574 <GetEventButton+0xe0>
	{
		dwTimeTemp = dwCalculatorTime(button->dwTimeCurrent, dwTimeNow);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	68f9      	ldr	r1, [r7, #12]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff ff30 	bl	8000348 <dwCalculatorTime>
 80004e8:	60b8      	str	r0, [r7, #8]
		if(dwTimeTemp >= BW2PRESS_TIME)
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80004f0:	d34f      	bcc.n	8000592 <GetEventButton+0xfe>
		{
			button->byPressCntEnd = button->byPressCnt;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	785a      	ldrb	r2, [r3, #1]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	709a      	strb	r2, [r3, #2]
			button->dwTimeInit = 0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	605a      	str	r2, [r3, #4]
			button->dwTimeCurrent = 0;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
			button->byPressCnt = 0;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2200      	movs	r2, #0
 800050a:	705a      	strb	r2, [r3, #1]
			switch(button->byPressCntEnd)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	789b      	ldrb	r3, [r3, #2]
 8000510:	2b03      	cmp	r3, #3
 8000512:	d01a      	beq.n	800054a <GetEventButton+0xb6>
 8000514:	2b03      	cmp	r3, #3
 8000516:	dc22      	bgt.n	800055e <GetEventButton+0xca>
 8000518:	2b01      	cmp	r3, #1
 800051a:	d002      	beq.n	8000522 <GetEventButton+0x8e>
 800051c:	2b02      	cmp	r3, #2
 800051e:	d00a      	beq.n	8000536 <GetEventButton+0xa2>
 8000520:	e01d      	b.n	800055e <GetEventButton+0xca>
			{
			case 1:
			{
				button->buttonEven = EVENT_OF_BUTTON_PRESS_1_TIMES;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
				button->byPressCntEnd = 0;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2200      	movs	r2, #0
 800052c:	709a      	strb	r2, [r3, #2]
				button->byPressCnt = 0;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2200      	movs	r2, #0
 8000532:	705a      	strb	r2, [r3, #1]
				break;
 8000534:	e01a      	b.n	800056c <GetEventButton+0xd8>
			}
			case 2:
			{
				button->buttonEven = EVENT_OF_BUTTON_PRESS_2_TIMES;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2202      	movs	r2, #2
 800053a:	701a      	strb	r2, [r3, #0]
				button->byPressCntEnd = 0;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	709a      	strb	r2, [r3, #2]
				button->byPressCnt = 0;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	705a      	strb	r2, [r3, #1]
				break;
 8000548:	e010      	b.n	800056c <GetEventButton+0xd8>
			}
			case 3:
			{
				button->buttonEven = EVENT_OF_BUTTON_PRESS_3_TIMES;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2203      	movs	r2, #3
 800054e:	701a      	strb	r2, [r3, #0]
				button->byPressCntEnd = 0;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2200      	movs	r2, #0
 8000554:	709a      	strb	r2, [r3, #2]
				button->byPressCnt = 0;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2200      	movs	r2, #0
 800055a:	705a      	strb	r2, [r3, #1]
				break;
 800055c:	e006      	b.n	800056c <GetEventButton+0xd8>
			}
			default:
				button->byPressCntEnd = 0;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2200      	movs	r2, #0
 8000562:	709a      	strb	r2, [r3, #2]
				button->byPressCnt = 0;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2200      	movs	r2, #0
 8000568:	705a      	strb	r2, [r3, #1]
				break;
 800056a:	bf00      	nop
			}
			button->byState = Null;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2200      	movs	r2, #0
 8000570:	751a      	strb	r2, [r3, #20]
		button->byPressCnt = 0;
		byTemp = 0;
		button->byState = Null;
	}
}
}
 8000572:	e00e      	b.n	8000592 <GetEventButton+0xfe>
	{	button->buttonEven = EVENT_OF_BUTTON_RELEASED;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2205      	movs	r2, #5
 8000578:	701a      	strb	r2, [r3, #0]
		button->byPressCntEnd = 0;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2200      	movs	r2, #0
 800057e:	709a      	strb	r2, [r3, #2]
		button->byPressCnt = 0;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2200      	movs	r2, #0
 8000584:	705a      	strb	r2, [r3, #1]
		byTemp = 0;
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <GetEventButton+0x108>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
		button->byState = Null;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2200      	movs	r2, #0
 8000590:	751a      	strb	r2, [r3, #20]
}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200000dc 	.word	0x200000dc

080005a0 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	//BUTTON_B3
	static uint8_t byFlagPress = 0,byFlagOut = 0;
	//Khi nut nhan duoc nhan
	if(GPIO_ReadInputDataBit(BUTTON_B3_PORT, BUTTON_B3_PIN)==0)
 80005a4:	2110      	movs	r1, #16
 80005a6:	483c      	ldr	r0, [pc, #240]	; (8000698 <EXTI4_IRQHandler+0xf8>)
 80005a8:	f003 fdb4 	bl	8004114 <GPIO_ReadInputDataBit>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d10d      	bne.n	80005ce <EXTI4_IRQHandler+0x2e>
		{
			buttonB3.dwTimeInit = GetMilSecTick();
 80005b2:	f004 f9bd 	bl	8004930 <GetMilSecTick>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a38      	ldr	r2, [pc, #224]	; (800069c <EXTI4_IRQHandler+0xfc>)
 80005ba:	6053      	str	r3, [r2, #4]
			buttonB3.byState = BUTTON_EDGE_RISING;
 80005bc:	4b37      	ldr	r3, [pc, #220]	; (800069c <EXTI4_IRQHandler+0xfc>)
 80005be:	2201      	movs	r2, #1
 80005c0:	751a      	strb	r2, [r3, #20]
			byFlagOut++;
 80005c2:	4b37      	ldr	r3, [pc, #220]	; (80006a0 <EXTI4_IRQHandler+0x100>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <EXTI4_IRQHandler+0x100>)
 80005cc:	701a      	strb	r2, [r3, #0]
		}
	//khi nut nhan duoc nha ra
	if(GPIO_ReadInputDataBit(BUTTON_B3_PORT, BUTTON_B3_PIN)!=0)
 80005ce:	2110      	movs	r1, #16
 80005d0:	4831      	ldr	r0, [pc, #196]	; (8000698 <EXTI4_IRQHandler+0xf8>)
 80005d2:	f003 fd9f 	bl	8004114 <GPIO_ReadInputDataBit>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d015      	beq.n	8000608 <EXTI4_IRQHandler+0x68>
		{
			buttonB3.dwTimeCurrent = GetMilSecTick();
 80005dc:	f004 f9a8 	bl	8004930 <GetMilSecTick>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a2e      	ldr	r2, [pc, #184]	; (800069c <EXTI4_IRQHandler+0xfc>)
 80005e4:	6093      	str	r3, [r2, #8]
			buttonB3.byState = BUTTON_EDGE_FALLING;
 80005e6:	4b2d      	ldr	r3, [pc, #180]	; (800069c <EXTI4_IRQHandler+0xfc>)
 80005e8:	2202      	movs	r2, #2
 80005ea:	751a      	strb	r2, [r3, #20]
			buttonB3.dwTimePress = dwCalculatorTime(buttonB3.dwTimeInit, buttonB3.dwTimeCurrent);
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <EXTI4_IRQHandler+0xfc>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	4a2a      	ldr	r2, [pc, #168]	; (800069c <EXTI4_IRQHandler+0xfc>)
 80005f2:	6892      	ldr	r2, [r2, #8]
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fea6 	bl	8000348 <dwCalculatorTime>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a27      	ldr	r2, [pc, #156]	; (800069c <EXTI4_IRQHandler+0xfc>)
 8000600:	60d3      	str	r3, [r2, #12]
			byFlagPress = 1;
 8000602:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <EXTI4_IRQHandler+0x104>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
		}
	//Thuc hien du 1 chu trinh nhan xong nha cua nut bam
	if(byFlagPress == 1)
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <EXTI4_IRQHandler+0x104>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d11f      	bne.n	8000650 <EXTI4_IRQHandler+0xb0>
		{
			buttonB3.dwTimePress = dwCalculatorTime(buttonB3.dwTimeInit, buttonB3.dwTimeCurrent);
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <EXTI4_IRQHandler+0xfc>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <EXTI4_IRQHandler+0xfc>)
 8000616:	6892      	ldr	r2, [r2, #8]
 8000618:	4611      	mov	r1, r2
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff fe94 	bl	8000348 <dwCalculatorTime>
 8000620:	4603      	mov	r3, r0
 8000622:	4a1e      	ldr	r2, [pc, #120]	; (800069c <EXTI4_IRQHandler+0xfc>)
 8000624:	60d3      	str	r3, [r2, #12]
			if((buttonB3.dwTimePress >=BUTTON_NORMAL_PRESS_TIME)&&(buttonB3.dwTimePress < BUTTON_LONG_PRESS_TIME))
 8000626:	4b1d      	ldr	r3, [pc, #116]	; (800069c <EXTI4_IRQHandler+0xfc>)
 8000628:	68db      	ldr	r3, [r3, #12]
 800062a:	2b63      	cmp	r3, #99	; 0x63
 800062c:	d90a      	bls.n	8000644 <EXTI4_IRQHandler+0xa4>
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <EXTI4_IRQHandler+0xfc>)
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000636:	d205      	bcs.n	8000644 <EXTI4_IRQHandler+0xa4>
				{
					buttonB3.byPressCnt ++;
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <EXTI4_IRQHandler+0xfc>)
 800063a:	785b      	ldrb	r3, [r3, #1]
 800063c:	3301      	adds	r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <EXTI4_IRQHandler+0xfc>)
 8000642:	705a      	strb	r2, [r3, #1]
				}
			byFlagPress = 0;
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <EXTI4_IRQHandler+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
			buttonB3.byStatus = BUTTON_STATE_WAITPRESS;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <EXTI4_IRQHandler+0xfc>)
 800064c:	2203      	movs	r2, #3
 800064e:	755a      	strb	r2, [r3, #21]
		}
	//Khi nut nhan duoc nhan lien tiep nhau
	if(byFlagOut == 3)
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <EXTI4_IRQHandler+0x100>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d119      	bne.n	800068c <EXTI4_IRQHandler+0xec>
	{
		buttonB3.dwTimeOut = dwCalculatorTime(buttonB3.dwTimeCurrent, buttonB3.dwTimeInit);
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <EXTI4_IRQHandler+0xfc>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	4a0f      	ldr	r2, [pc, #60]	; (800069c <EXTI4_IRQHandler+0xfc>)
 800065e:	6852      	ldr	r2, [r2, #4]
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fe70 	bl	8000348 <dwCalculatorTime>
 8000668:	4603      	mov	r3, r0
 800066a:	4a0c      	ldr	r2, [pc, #48]	; (800069c <EXTI4_IRQHandler+0xfc>)
 800066c:	6113      	str	r3, [r2, #16]
			if(buttonB3.dwTimeOut >= BW2PRESS_TIME)
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <EXTI4_IRQHandler+0xfc>)
 8000670:	691b      	ldr	r3, [r3, #16]
 8000672:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000676:	d306      	bcc.n	8000686 <EXTI4_IRQHandler+0xe6>
				{
					buttonB3.byPressCntEnd = buttonB3.byPressCnt;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <EXTI4_IRQHandler+0xfc>)
 800067a:	785a      	ldrb	r2, [r3, #1]
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <EXTI4_IRQHandler+0xfc>)
 800067e:	709a      	strb	r2, [r3, #2]
					buttonB3.byPressCnt = 0;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <EXTI4_IRQHandler+0xfc>)
 8000682:	2200      	movs	r2, #0
 8000684:	705a      	strb	r2, [r3, #1]
				}
			byFlagOut = 0;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <EXTI4_IRQHandler+0x100>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
		}
	EXTI_ClearITPendingBit(BUTTON_B3_EXTI_LINE);
 800068c:	2010      	movs	r0, #16
 800068e:	f003 fca3 	bl	8003fd8 <EXTI_ClearITPendingBit>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40020000 	.word	0x40020000
 800069c:	20000094 	.word	0x20000094
 80006a0:	200000dd 	.word	0x200000dd
 80006a4:	200000de 	.word	0x200000de

080006a8 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	//BUTTON_B2
	static uint8_t byFlagPress = 0,byFlagOut = 0;
	//Khi nut nhan duoc nhan
	if(GPIO_ReadInputDataBit(BUTTON_B2_PORT, BUTTON_B2_PIN)==0)
 80006ac:	2108      	movs	r1, #8
 80006ae:	483c      	ldr	r0, [pc, #240]	; (80007a0 <EXTI3_IRQHandler+0xf8>)
 80006b0:	f003 fd30 	bl	8004114 <GPIO_ReadInputDataBit>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d10d      	bne.n	80006d6 <EXTI3_IRQHandler+0x2e>
		{
			buttonB2.dwTimeInit = GetMilSecTick();
 80006ba:	f004 f939 	bl	8004930 <GetMilSecTick>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a38      	ldr	r2, [pc, #224]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 80006c2:	6053      	str	r3, [r2, #4]
			buttonB2.byState = BUTTON_EDGE_RISING;
 80006c4:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	751a      	strb	r2, [r3, #20]
			byFlagOut++;
 80006ca:	4b37      	ldr	r3, [pc, #220]	; (80007a8 <EXTI3_IRQHandler+0x100>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b35      	ldr	r3, [pc, #212]	; (80007a8 <EXTI3_IRQHandler+0x100>)
 80006d4:	701a      	strb	r2, [r3, #0]
		}
	//khi nut nhan duoc nha ra
	if(GPIO_ReadInputDataBit(BUTTON_B2_PORT, BUTTON_B2_PIN)!=0)
 80006d6:	2108      	movs	r1, #8
 80006d8:	4831      	ldr	r0, [pc, #196]	; (80007a0 <EXTI3_IRQHandler+0xf8>)
 80006da:	f003 fd1b 	bl	8004114 <GPIO_ReadInputDataBit>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d015      	beq.n	8000710 <EXTI3_IRQHandler+0x68>
		{
			buttonB2.dwTimeCurrent = GetMilSecTick();
 80006e4:	f004 f924 	bl	8004930 <GetMilSecTick>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a2e      	ldr	r2, [pc, #184]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 80006ec:	6093      	str	r3, [r2, #8]
			buttonB2.byState = BUTTON_EDGE_FALLING;
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	751a      	strb	r2, [r3, #20]
			buttonB2.dwTimePress = dwCalculatorTime(buttonB2.dwTimeInit, buttonB2.dwTimeCurrent);
 80006f4:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	4a2a      	ldr	r2, [pc, #168]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 80006fa:	6892      	ldr	r2, [r2, #8]
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fe22 	bl	8000348 <dwCalculatorTime>
 8000704:	4603      	mov	r3, r0
 8000706:	4a27      	ldr	r2, [pc, #156]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 8000708:	60d3      	str	r3, [r2, #12]
			byFlagPress = 1;
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <EXTI3_IRQHandler+0x104>)
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
		}
	//Thuc hien du 1 chu trinh nhan xong nha cua nut bam
	if(byFlagPress == 1)
 8000710:	4b26      	ldr	r3, [pc, #152]	; (80007ac <EXTI3_IRQHandler+0x104>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d11f      	bne.n	8000758 <EXTI3_IRQHandler+0xb0>
		{
			buttonB2.dwTimePress = dwCalculatorTime(buttonB2.dwTimeInit, buttonB2.dwTimeCurrent);
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 800071e:	6892      	ldr	r2, [r2, #8]
 8000720:	4611      	mov	r1, r2
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fe10 	bl	8000348 <dwCalculatorTime>
 8000728:	4603      	mov	r3, r0
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 800072c:	60d3      	str	r3, [r2, #12]
			if((buttonB2.dwTimePress >=BUTTON_NORMAL_PRESS_TIME)&&(buttonB2.dwTimePress < BUTTON_LONG_PRESS_TIME))
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	2b63      	cmp	r3, #99	; 0x63
 8000734:	d90a      	bls.n	800074c <EXTI3_IRQHandler+0xa4>
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800073e:	d205      	bcs.n	800074c <EXTI3_IRQHandler+0xa4>
				{
					buttonB2.byPressCnt ++;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 8000742:	785b      	ldrb	r3, [r3, #1]
 8000744:	3301      	adds	r3, #1
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 800074a:	705a      	strb	r2, [r3, #1]
				}
			byFlagPress = 0;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <EXTI3_IRQHandler+0x104>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
			buttonB2.byStatus = BUTTON_STATE_WAITPRESS;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 8000754:	2203      	movs	r2, #3
 8000756:	755a      	strb	r2, [r3, #21]
		}
	//Khi nut nhan duoc nhan lien tiep nhau
	if(byFlagOut == 3)
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <EXTI3_IRQHandler+0x100>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b03      	cmp	r3, #3
 800075e:	d119      	bne.n	8000794 <EXTI3_IRQHandler+0xec>
	{
		buttonB2.dwTimeOut = dwCalculatorTime(buttonB2.dwTimeCurrent, buttonB2.dwTimeInit);
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 8000766:	6852      	ldr	r2, [r2, #4]
 8000768:	4611      	mov	r1, r2
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fdec 	bl	8000348 <dwCalculatorTime>
 8000770:	4603      	mov	r3, r0
 8000772:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 8000774:	6113      	str	r3, [r2, #16]
			if(buttonB2.dwTimeOut >= BW2PRESS_TIME)
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 8000778:	691b      	ldr	r3, [r3, #16]
 800077a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800077e:	d306      	bcc.n	800078e <EXTI3_IRQHandler+0xe6>
				{
					buttonB2.byPressCntEnd = buttonB2.byPressCnt;
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 8000782:	785a      	ldrb	r2, [r3, #1]
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 8000786:	709a      	strb	r2, [r3, #2]
					buttonB2.byPressCnt = 0;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <EXTI3_IRQHandler+0xfc>)
 800078a:	2200      	movs	r2, #0
 800078c:	705a      	strb	r2, [r3, #1]
				}
			byFlagOut = 0;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <EXTI3_IRQHandler+0x100>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
		}
	EXTI_ClearITPendingBit(BUTTON_B2_EXTI_LINE);
 8000794:	2008      	movs	r0, #8
 8000796:	f003 fc1f 	bl	8003fd8 <EXTI_ClearITPendingBit>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40020400 	.word	0x40020400
 80007a4:	200000ac 	.word	0x200000ac
 80007a8:	200000df 	.word	0x200000df
 80007ac:	200000e0 	.word	0x200000e0

080007b0 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	//BUTTON_B4
	static uint8_t byFlagPress = 0,byFlagOut = 0;
	//Khi nut nhan duoc nhan
	if(GPIO_ReadInputDataBit(BUTTON_B4_PORT, BUTTON_B4_PIN)==0)
 80007b4:	2101      	movs	r1, #1
 80007b6:	483c      	ldr	r0, [pc, #240]	; (80008a8 <EXTI0_IRQHandler+0xf8>)
 80007b8:	f003 fcac 	bl	8004114 <GPIO_ReadInputDataBit>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d10d      	bne.n	80007de <EXTI0_IRQHandler+0x2e>
		{
			buttonB4.dwTimeInit = GetMilSecTick();
 80007c2:	f004 f8b5 	bl	8004930 <GetMilSecTick>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a38      	ldr	r2, [pc, #224]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 80007ca:	6053      	str	r3, [r2, #4]
			buttonB4.byState = BUTTON_EDGE_RISING;
 80007cc:	4b37      	ldr	r3, [pc, #220]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	751a      	strb	r2, [r3, #20]
			byFlagOut++;
 80007d2:	4b37      	ldr	r3, [pc, #220]	; (80008b0 <EXTI0_IRQHandler+0x100>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <EXTI0_IRQHandler+0x100>)
 80007dc:	701a      	strb	r2, [r3, #0]
		}
	//khi nut nhan duoc nha ra
	if(GPIO_ReadInputDataBit(BUTTON_B4_PORT, BUTTON_B4_PIN)!=0)
 80007de:	2101      	movs	r1, #1
 80007e0:	4831      	ldr	r0, [pc, #196]	; (80008a8 <EXTI0_IRQHandler+0xf8>)
 80007e2:	f003 fc97 	bl	8004114 <GPIO_ReadInputDataBit>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d015      	beq.n	8000818 <EXTI0_IRQHandler+0x68>
		{
			buttonB4.dwTimeCurrent = GetMilSecTick();
 80007ec:	f004 f8a0 	bl	8004930 <GetMilSecTick>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4a2e      	ldr	r2, [pc, #184]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 80007f4:	6093      	str	r3, [r2, #8]
			buttonB4.byState = BUTTON_EDGE_FALLING;
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	751a      	strb	r2, [r3, #20]
			buttonB4.dwTimePress = dwCalculatorTime(buttonB4.dwTimeInit, buttonB4.dwTimeCurrent);
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	4a2a      	ldr	r2, [pc, #168]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 8000802:	6892      	ldr	r2, [r2, #8]
 8000804:	4611      	mov	r1, r2
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fd9e 	bl	8000348 <dwCalculatorTime>
 800080c:	4603      	mov	r3, r0
 800080e:	4a27      	ldr	r2, [pc, #156]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 8000810:	60d3      	str	r3, [r2, #12]
			byFlagPress = 1;
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <EXTI0_IRQHandler+0x104>)
 8000814:	2201      	movs	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]
		}
	//Thuc hien du 1 chu trinh nhan xong nha cua nut bam
	if(byFlagPress == 1)
 8000818:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <EXTI0_IRQHandler+0x104>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d11f      	bne.n	8000860 <EXTI0_IRQHandler+0xb0>
		{
			buttonB4.dwTimePress = dwCalculatorTime(buttonB4.dwTimeInit, buttonB4.dwTimeCurrent);
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	4a21      	ldr	r2, [pc, #132]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 8000826:	6892      	ldr	r2, [r2, #8]
 8000828:	4611      	mov	r1, r2
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fd8c 	bl	8000348 <dwCalculatorTime>
 8000830:	4603      	mov	r3, r0
 8000832:	4a1e      	ldr	r2, [pc, #120]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 8000834:	60d3      	str	r3, [r2, #12]
			if((buttonB4.dwTimePress >=BUTTON_NORMAL_PRESS_TIME)&&(buttonB4.dwTimePress < BUTTON_LONG_PRESS_TIME))
 8000836:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	2b63      	cmp	r3, #99	; 0x63
 800083c:	d90a      	bls.n	8000854 <EXTI0_IRQHandler+0xa4>
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000846:	d205      	bcs.n	8000854 <EXTI0_IRQHandler+0xa4>
				{
					buttonB4.byPressCnt ++;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 800084a:	785b      	ldrb	r3, [r3, #1]
 800084c:	3301      	adds	r3, #1
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 8000852:	705a      	strb	r2, [r3, #1]
				}
			byFlagPress = 0;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <EXTI0_IRQHandler+0x104>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
			buttonB4.byStatus = BUTTON_STATE_WAITPRESS;
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 800085c:	2203      	movs	r2, #3
 800085e:	755a      	strb	r2, [r3, #21]
		}
	//Khi nut nhan duoc nhan lien tiep nhau
	if(byFlagOut == 3)
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <EXTI0_IRQHandler+0x100>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d119      	bne.n	800089c <EXTI0_IRQHandler+0xec>
	{
		buttonB4.dwTimeOut = dwCalculatorTime(buttonB4.dwTimeCurrent, buttonB4.dwTimeInit);
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 800086e:	6852      	ldr	r2, [r2, #4]
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fd68 	bl	8000348 <dwCalculatorTime>
 8000878:	4603      	mov	r3, r0
 800087a:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 800087c:	6113      	str	r3, [r2, #16]
			if(buttonB4.dwTimeOut >= BW2PRESS_TIME)
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000886:	d306      	bcc.n	8000896 <EXTI0_IRQHandler+0xe6>
				{
					buttonB4.byPressCntEnd = buttonB4.byPressCnt;
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 800088a:	785a      	ldrb	r2, [r3, #1]
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 800088e:	709a      	strb	r2, [r3, #2]
					buttonB4.byPressCnt = 0;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <EXTI0_IRQHandler+0xfc>)
 8000892:	2200      	movs	r2, #0
 8000894:	705a      	strb	r2, [r3, #1]
				}
			byFlagOut = 0;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <EXTI0_IRQHandler+0x100>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
		}
	EXTI_ClearITPendingBit(BUTTON_B4_EXTI_LINE);
 800089c:	2001      	movs	r0, #1
 800089e:	f003 fb9b 	bl	8003fd8 <EXTI_ClearITPendingBit>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40020400 	.word	0x40020400
 80008ac:	200000c4 	.word	0x200000c4
 80008b0:	200000e1 	.word	0x200000e1
 80008b4:	200000e2 	.word	0x200000e2

080008b8 <getModeTest>:

/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
TestSwMode_e getModeTest(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
	TestSwMode_e modeTemp;
	uint8_t byChooseCol = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	71bb      	strb	r3, [r7, #6]
	while(byChooseCol == 0)
 80008c2:	e007      	b.n	80008d4 <getModeTest+0x1c>
	{
		byChooseCol = getChooseRows(4, 20, pMenuMain, ucg_font_10x20_mr);
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <getModeTest+0x78>)
 80008c6:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <getModeTest+0x7c>)
 80008c8:	2114      	movs	r1, #20
 80008ca:	2004      	movs	r0, #4
 80008cc:	f000 f834 	bl	8000938 <getChooseRows>
 80008d0:	4603      	mov	r3, r0
 80008d2:	71bb      	strb	r3, [r7, #6]
	while(byChooseCol == 0)
 80008d4:	79bb      	ldrb	r3, [r7, #6]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0f4      	beq.n	80008c4 <getModeTest+0xc>
	}
	lcdPrintText(pMenuMain[byChooseCol], 0, 15, ucg_font_10x20_mr);
 80008da:	79ba      	ldrb	r2, [r7, #6]
 80008dc:	4613      	mov	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <getModeTest+0x7c>)
 80008e6:	1898      	adds	r0, r3, r2
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <getModeTest+0x78>)
 80008ea:	220f      	movs	r2, #15
 80008ec:	2100      	movs	r1, #0
 80008ee:	f002 f8f7 	bl	8002ae0 <lcdPrintText>
	switch(byChooseCol)
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d010      	beq.n	800091a <getModeTest+0x62>
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	dc13      	bgt.n	8000924 <getModeTest+0x6c>
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d002      	beq.n	8000906 <getModeTest+0x4e>
 8000900:	2b02      	cmp	r3, #2
 8000902:	d005      	beq.n	8000910 <getModeTest+0x58>
	case 3:
		byChooseCol = 0;
		modeTemp = BLE_MODE;
		break;
	default:
		break;
 8000904:	e00e      	b.n	8000924 <getModeTest+0x6c>
		byChooseCol = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	71bb      	strb	r3, [r7, #6]
		modeTemp = DUAL_MODE;
 800090a:	2301      	movs	r3, #1
 800090c:	71fb      	strb	r3, [r7, #7]
		break;
 800090e:	e00a      	b.n	8000926 <getModeTest+0x6e>
		byChooseCol = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	71bb      	strb	r3, [r7, #6]
		modeTemp = ZIGBEE_MODE;
 8000914:	2302      	movs	r3, #2
 8000916:	71fb      	strb	r3, [r7, #7]
		break;
 8000918:	e005      	b.n	8000926 <getModeTest+0x6e>
		byChooseCol = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	71bb      	strb	r3, [r7, #6]
		modeTemp = BLE_MODE;
 800091e:	2303      	movs	r3, #3
 8000920:	71fb      	strb	r3, [r7, #7]
		break;
 8000922:	e000      	b.n	8000926 <getModeTest+0x6e>
		break;
 8000924:	bf00      	nop
	}
	return modeTemp;
 8000926:	79fb      	ldrb	r3, [r7, #7]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	08007428 	.word	0x08007428
 8000934:	20000000 	.word	0x20000000

08000938 <getChooseRows>:
uint8_t getChooseRows(uint8_t byNumOfRows,\
				uint8_t bySizeOfRow,\
				char pStrInterface[][20],\
				const ucg_fntpgm_uint8_t *font)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60ba      	str	r2, [r7, #8]
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
 8000946:	460b      	mov	r3, r1
 8000948:	73bb      	strb	r3, [r7, #14]
	ValueKey_e key = NOKEY ;
 800094a:	2300      	movs	r3, #0
 800094c:	75fb      	strb	r3, [r7, #23]
	uint8_t byRow = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	75bb      	strb	r3, [r7, #22]
	static uint8_t byRowTemp = 2;
	static uint8_t byFlag = 0;

	if(byFlag == 0)
 8000952:	4b5f      	ldr	r3, [pc, #380]	; (8000ad0 <getChooseRows+0x198>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d131      	bne.n	80009be <getChooseRows+0x86>
	{
		lcdClear();
 800095a:	f002 f883 	bl	8002a64 <lcdClear>

		for(uint8_t i = 0;i<byNumOfRows;i++)
 800095e:	2300      	movs	r3, #0
 8000960:	757b      	strb	r3, [r7, #21]
 8000962:	e020      	b.n	80009a6 <getChooseRows+0x6e>
		{
			//print interface
			lcdPrintText (pStrInterface[i],0, bySizeOfRow+bySizeOfRow*i,font);
 8000964:	7d7a      	ldrb	r2, [r7, #21]
 8000966:	4613      	mov	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	461a      	mov	r2, r3
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	1898      	adds	r0, r3, r2
 8000974:	7d7b      	ldrb	r3, [r7, #21]
 8000976:	3301      	adds	r3, #1
 8000978:	b2db      	uxtb	r3, r3
 800097a:	7bba      	ldrb	r2, [r7, #14]
 800097c:	fb12 f303 	smulbb	r3, r2, r3
 8000980:	b2da      	uxtb	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2100      	movs	r1, #0
 8000986:	f002 f8ab 	bl	8002ae0 <lcdPrintText>
			lcdPrintText("<", 110, bySizeOfRow*byRowTemp, font);
 800098a:	4b52      	ldr	r3, [pc, #328]	; (8000ad4 <getChooseRows+0x19c>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	7bba      	ldrb	r2, [r7, #14]
 8000990:	fb12 f303 	smulbb	r3, r2, r3
 8000994:	b2da      	uxtb	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	216e      	movs	r1, #110	; 0x6e
 800099a:	484f      	ldr	r0, [pc, #316]	; (8000ad8 <getChooseRows+0x1a0>)
 800099c:	f002 f8a0 	bl	8002ae0 <lcdPrintText>
		for(uint8_t i = 0;i<byNumOfRows;i++)
 80009a0:	7d7b      	ldrb	r3, [r7, #21]
 80009a2:	3301      	adds	r3, #1
 80009a4:	757b      	strb	r3, [r7, #21]
 80009a6:	7d7a      	ldrb	r2, [r7, #21]
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d3da      	bcc.n	8000964 <getChooseRows+0x2c>
		}
		byFlag = 1;
 80009ae:	4b48      	ldr	r3, [pc, #288]	; (8000ad0 <getChooseRows+0x198>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
	}



	while(key == NOKEY)
 80009b4:	e003      	b.n	80009be <getChooseRows+0x86>
	{
		key = processEventButton();
 80009b6:	f7ff fcdf 	bl	8000378 <processEventButton>
 80009ba:	4603      	mov	r3, r0
 80009bc:	75fb      	strb	r3, [r7, #23]
	while(key == NOKEY)
 80009be:	7dfb      	ldrb	r3, [r7, #23]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d0f8      	beq.n	80009b6 <getChooseRows+0x7e>
	}
	switch(key)
 80009c4:	7dfb      	ldrb	r3, [r7, #23]
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d035      	beq.n	8000a36 <getChooseRows+0xfe>
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dc79      	bgt.n	8000ac2 <getChooseRows+0x18a>
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d06b      	beq.n	8000aaa <getChooseRows+0x172>
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d175      	bne.n	8000ac2 <getChooseRows+0x18a>
	{
	case UP:
		byRowTemp--;
 80009d6:	4b3f      	ldr	r3, [pc, #252]	; (8000ad4 <getChooseRows+0x19c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	3b01      	subs	r3, #1
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b3d      	ldr	r3, [pc, #244]	; (8000ad4 <getChooseRows+0x19c>)
 80009e0:	701a      	strb	r2, [r3, #0]
		if(byRowTemp <2)
 80009e2:	4b3c      	ldr	r3, [pc, #240]	; (8000ad4 <getChooseRows+0x19c>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d80a      	bhi.n	8000a00 <getChooseRows+0xc8>
		{
			byRowTemp = byNumOfRows;
 80009ea:	4a3a      	ldr	r2, [pc, #232]	; (8000ad4 <getChooseRows+0x19c>)
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	7013      	strb	r3, [r2, #0]
			lcdPrintText(" ", 110, bySizeOfRow*2, font);
 80009f0:	7bbb      	ldrb	r3, [r7, #14]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	216e      	movs	r1, #110	; 0x6e
 80009fa:	4838      	ldr	r0, [pc, #224]	; (8000adc <getChooseRows+0x1a4>)
 80009fc:	f002 f870 	bl	8002ae0 <lcdPrintText>
		}
		lcdPrintText(" ", 110, bySizeOfRow * (byRowTemp+1), font);
 8000a00:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <getChooseRows+0x19c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	3301      	adds	r3, #1
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	7bba      	ldrb	r2, [r7, #14]
 8000a0a:	fb12 f303 	smulbb	r3, r2, r3
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	216e      	movs	r1, #110	; 0x6e
 8000a14:	4831      	ldr	r0, [pc, #196]	; (8000adc <getChooseRows+0x1a4>)
 8000a16:	f002 f863 	bl	8002ae0 <lcdPrintText>
		lcdPrintText("<", 110, bySizeOfRow*byRowTemp, font);
 8000a1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <getChooseRows+0x19c>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	7bba      	ldrb	r2, [r7, #14]
 8000a20:	fb12 f303 	smulbb	r3, r2, r3
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	216e      	movs	r1, #110	; 0x6e
 8000a2a:	482b      	ldr	r0, [pc, #172]	; (8000ad8 <getChooseRows+0x1a0>)
 8000a2c:	f002 f858 	bl	8002ae0 <lcdPrintText>
		key = NOKEY;
 8000a30:	2300      	movs	r3, #0
 8000a32:	75fb      	strb	r3, [r7, #23]
		break;
 8000a34:	e046      	b.n	8000ac4 <getChooseRows+0x18c>
	case DOWN:
		byRowTemp++;
 8000a36:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <getChooseRows+0x19c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <getChooseRows+0x19c>)
 8000a40:	701a      	strb	r2, [r3, #0]
		if(byRowTemp > byNumOfRows)
 8000a42:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <getChooseRows+0x19c>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	7bfa      	ldrb	r2, [r7, #15]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d20c      	bcs.n	8000a66 <getChooseRows+0x12e>
		{
			byRowTemp = 2;
 8000a4c:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <getChooseRows+0x19c>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	701a      	strb	r2, [r3, #0]
			lcdPrintText(" ", 110, bySizeOfRow * byNumOfRows, font);
 8000a52:	7bba      	ldrb	r2, [r7, #14]
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	fb12 f303 	smulbb	r3, r2, r3
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	216e      	movs	r1, #110	; 0x6e
 8000a60:	481e      	ldr	r0, [pc, #120]	; (8000adc <getChooseRows+0x1a4>)
 8000a62:	f002 f83d 	bl	8002ae0 <lcdPrintText>
		}
		lcdPrintText(" ", 110, bySizeOfRow * (byRowTemp-1), font);
 8000a66:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <getChooseRows+0x19c>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	7bba      	ldrb	r2, [r7, #14]
 8000a70:	fb12 f303 	smulbb	r3, r2, r3
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	216e      	movs	r1, #110	; 0x6e
 8000a7a:	4818      	ldr	r0, [pc, #96]	; (8000adc <getChooseRows+0x1a4>)
 8000a7c:	f002 f830 	bl	8002ae0 <lcdPrintText>
		lcdPrintText("<", 110, byRowTemp*bySizeOfRow, font);
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <getChooseRows+0x19c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	7bba      	ldrb	r2, [r7, #14]
 8000a86:	fb12 f303 	smulbb	r3, r2, r3
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	216e      	movs	r1, #110	; 0x6e
 8000a90:	4811      	ldr	r0, [pc, #68]	; (8000ad8 <getChooseRows+0x1a0>)
 8000a92:	f002 f825 	bl	8002ae0 <lcdPrintText>
		prinfPoint(bySizeOfRow, byRowTemp, font, key);
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <getChooseRows+0x19c>)
 8000a98:	7819      	ldrb	r1, [r3, #0]
 8000a9a:	7dfb      	ldrb	r3, [r7, #23]
 8000a9c:	7bb8      	ldrb	r0, [r7, #14]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	f000 f81e 	bl	8000ae0 <prinfPoint>
		key = NOKEY;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	75fb      	strb	r3, [r7, #23]
		break;
 8000aa8:	e00c      	b.n	8000ac4 <getChooseRows+0x18c>
	case SELECT:
		lcdClear();
 8000aaa:	f001 ffdb 	bl	8002a64 <lcdClear>
		key = NOKEY;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	75fb      	strb	r3, [r7, #23]
		byFlag = 0;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <getChooseRows+0x198>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
		byRow = byRowTemp-1;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <getChooseRows+0x19c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	75bb      	strb	r3, [r7, #22]
		break;
 8000ac0:	e000      	b.n	8000ac4 <getChooseRows+0x18c>
	default:
		break;
 8000ac2:	bf00      	nop
	}
	return byRow;
 8000ac4:	7dbb      	ldrb	r3, [r7, #22]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200000e3 	.word	0x200000e3
 8000ad4:	20000050 	.word	0x20000050
 8000ad8:	0800703c 	.word	0x0800703c
 8000adc:	08007040 	.word	0x08007040

08000ae0 <prinfPoint>:
void prinfPoint(uint8_t bySizeOfRows,\
		uint8_t byChooseRow,\
		const ucg_fntpgm_uint8_t *font,\
		ValueKey_e key)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	603a      	str	r2, [r7, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
 8000aee:	460b      	mov	r3, r1
 8000af0:	71bb      	strb	r3, [r7, #6]
 8000af2:	4613      	mov	r3, r2
 8000af4:	717b      	strb	r3, [r7, #5]

	if(key == UP)
 8000af6:	797b      	ldrb	r3, [r7, #5]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d018      	beq.n	8000b2e <prinfPoint+0x4e>
	{

	}else if(key == DOWN)
 8000afc:	797b      	ldrb	r3, [r7, #5]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d115      	bne.n	8000b2e <prinfPoint+0x4e>
	{
		lcdPrintText(" ", 110, bySizeOfRows * (byChooseRow-1), font);
 8000b02:	79bb      	ldrb	r3, [r7, #6]
 8000b04:	3b01      	subs	r3, #1
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	79fa      	ldrb	r2, [r7, #7]
 8000b0a:	fb12 f303 	smulbb	r3, r2, r3
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	216e      	movs	r1, #110	; 0x6e
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <prinfPoint+0x58>)
 8000b16:	f001 ffe3 	bl	8002ae0 <lcdPrintText>
		lcdPrintText("<", 110, byChooseRow*bySizeOfRows, font);
 8000b1a:	79ba      	ldrb	r2, [r7, #6]
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	fb12 f303 	smulbb	r3, r2, r3
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	216e      	movs	r1, #110	; 0x6e
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <prinfPoint+0x5c>)
 8000b2a:	f001 ffd9 	bl	8002ae0 <lcdPrintText>

	}

}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	08007040 	.word	0x08007040
 8000b3c:	0800703c 	.word	0x0800703c

08000b40 <max>:
#error Unsupported LOCK_VERSION (add it...)

#endif


static int max(int a, int b) {
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
    if (a > b) { return a; }
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	dd01      	ble.n	8000b56 <max+0x16>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	e000      	b.n	8000b58 <max+0x18>
    return b;
 8000b56:	683b      	ldr	r3, [r7, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <getAlphanumeric>:
*/


//#pragma mark - Mode testing and conversion

static int8_t getAlphanumeric(char c) {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
    
    if (c >= '0' && c <= '9') { return (c - '0'); }
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b2f      	cmp	r3, #47	; 0x2f
 8000b72:	d907      	bls.n	8000b84 <getAlphanumeric+0x20>
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	2b39      	cmp	r3, #57	; 0x39
 8000b78:	d804      	bhi.n	8000b84 <getAlphanumeric+0x20>
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	3b30      	subs	r3, #48	; 0x30
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	e05b      	b.n	8000c3c <getAlphanumeric+0xd8>
    if (c >= 'A' && c <= 'Z') { return (c - 'A' + 10); }
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b40      	cmp	r3, #64	; 0x40
 8000b88:	d907      	bls.n	8000b9a <getAlphanumeric+0x36>
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b5a      	cmp	r3, #90	; 0x5a
 8000b8e:	d804      	bhi.n	8000b9a <getAlphanumeric+0x36>
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	3b37      	subs	r3, #55	; 0x37
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	b25b      	sxtb	r3, r3
 8000b98:	e050      	b.n	8000c3c <getAlphanumeric+0xd8>
    
    switch (c) {
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	3b20      	subs	r3, #32
 8000b9e:	2b1a      	cmp	r3, #26
 8000ba0:	d84a      	bhi.n	8000c38 <getAlphanumeric+0xd4>
 8000ba2:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <getAlphanumeric+0x44>)
 8000ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba8:	08000c15 	.word	0x08000c15
 8000bac:	08000c39 	.word	0x08000c39
 8000bb0:	08000c39 	.word	0x08000c39
 8000bb4:	08000c39 	.word	0x08000c39
 8000bb8:	08000c19 	.word	0x08000c19
 8000bbc:	08000c1d 	.word	0x08000c1d
 8000bc0:	08000c39 	.word	0x08000c39
 8000bc4:	08000c39 	.word	0x08000c39
 8000bc8:	08000c39 	.word	0x08000c39
 8000bcc:	08000c39 	.word	0x08000c39
 8000bd0:	08000c21 	.word	0x08000c21
 8000bd4:	08000c25 	.word	0x08000c25
 8000bd8:	08000c39 	.word	0x08000c39
 8000bdc:	08000c29 	.word	0x08000c29
 8000be0:	08000c2d 	.word	0x08000c2d
 8000be4:	08000c31 	.word	0x08000c31
 8000be8:	08000c39 	.word	0x08000c39
 8000bec:	08000c39 	.word	0x08000c39
 8000bf0:	08000c39 	.word	0x08000c39
 8000bf4:	08000c39 	.word	0x08000c39
 8000bf8:	08000c39 	.word	0x08000c39
 8000bfc:	08000c39 	.word	0x08000c39
 8000c00:	08000c39 	.word	0x08000c39
 8000c04:	08000c39 	.word	0x08000c39
 8000c08:	08000c39 	.word	0x08000c39
 8000c0c:	08000c39 	.word	0x08000c39
 8000c10:	08000c35 	.word	0x08000c35
        case ' ': return 36;
 8000c14:	2324      	movs	r3, #36	; 0x24
 8000c16:	e011      	b.n	8000c3c <getAlphanumeric+0xd8>
        case '$': return 37;
 8000c18:	2325      	movs	r3, #37	; 0x25
 8000c1a:	e00f      	b.n	8000c3c <getAlphanumeric+0xd8>
        case '%': return 38;
 8000c1c:	2326      	movs	r3, #38	; 0x26
 8000c1e:	e00d      	b.n	8000c3c <getAlphanumeric+0xd8>
        case '*': return 39;
 8000c20:	2327      	movs	r3, #39	; 0x27
 8000c22:	e00b      	b.n	8000c3c <getAlphanumeric+0xd8>
        case '+': return 40;
 8000c24:	2328      	movs	r3, #40	; 0x28
 8000c26:	e009      	b.n	8000c3c <getAlphanumeric+0xd8>
        case '-': return 41;
 8000c28:	2329      	movs	r3, #41	; 0x29
 8000c2a:	e007      	b.n	8000c3c <getAlphanumeric+0xd8>
        case '.': return 42;
 8000c2c:	232a      	movs	r3, #42	; 0x2a
 8000c2e:	e005      	b.n	8000c3c <getAlphanumeric+0xd8>
        case '/': return 43;
 8000c30:	232b      	movs	r3, #43	; 0x2b
 8000c32:	e003      	b.n	8000c3c <getAlphanumeric+0xd8>
        case ':': return 44;
 8000c34:	232c      	movs	r3, #44	; 0x2c
 8000c36:	e001      	b.n	8000c3c <getAlphanumeric+0xd8>
    }
    
    return -1;
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <isAlphanumeric>:

static bool isAlphanumeric(const char *text, uint16_t length) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
    while (length != 0) {
 8000c54:	e00f      	b.n	8000c76 <isAlphanumeric+0x2e>
        if (getAlphanumeric(text[--length]) == -1) { return false; }
 8000c56:	887b      	ldrh	r3, [r7, #2]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	807b      	strh	r3, [r7, #2]
 8000c5c:	887b      	ldrh	r3, [r7, #2]
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff7d 	bl	8000b64 <getAlphanumeric>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c70:	d101      	bne.n	8000c76 <isAlphanumeric+0x2e>
 8000c72:	2300      	movs	r3, #0
 8000c74:	e003      	b.n	8000c7e <isAlphanumeric+0x36>
    while (length != 0) {
 8000c76:	887b      	ldrh	r3, [r7, #2]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1ec      	bne.n	8000c56 <isAlphanumeric+0xe>
    }
    return true;
 8000c7c:	2301      	movs	r3, #1
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <isNumeric>:


static bool isNumeric(const char *text, uint16_t length) {
 8000c86:	b480      	push	{r7}
 8000c88:	b085      	sub	sp, #20
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	807b      	strh	r3, [r7, #2]
    while (length != 0) {
 8000c92:	e00f      	b.n	8000cb4 <isNumeric+0x2e>
        char c = text[--length];
 8000c94:	887b      	ldrh	r3, [r7, #2]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	807b      	strh	r3, [r7, #2]
 8000c9a:	887b      	ldrh	r3, [r7, #2]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	73fb      	strb	r3, [r7, #15]
        if (c < '0' || c > '9') { return false; }
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	2b2f      	cmp	r3, #47	; 0x2f
 8000ca8:	d902      	bls.n	8000cb0 <isNumeric+0x2a>
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	2b39      	cmp	r3, #57	; 0x39
 8000cae:	d901      	bls.n	8000cb4 <isNumeric+0x2e>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e003      	b.n	8000cbc <isNumeric+0x36>
    while (length != 0) {
 8000cb4:	887b      	ldrh	r3, [r7, #2]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1ec      	bne.n	8000c94 <isNumeric+0xe>
    }
    return true;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <getModeBits>:
// We store the following tightly packed (less 8) in modeInfo
//               <=9  <=26  <= 40
// NUMERIC      ( 10,   12,    14);
// ALPHANUMERIC (  9,   11,    13);
// BYTE         (  8,   16,    16);
static char getModeBits(uint8_t version, uint8_t mode) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	460a      	mov	r2, r1
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	71bb      	strb	r3, [r7, #6]
    // Note: We use 15 instead of 16; since 15 doesn't exist and we cannot store 16 (8 + 8) in 3 bits
    // hex(int("".join(reversed([('00' + bin(x - 8)[2:])[-3:] for x in [10, 9, 8, 12, 11, 15, 14, 13, 15]])), 2))
    unsigned int modeInfo = 0x7bbb80a;
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <getModeBits+0x60>)
 8000cda:	60fb      	str	r3, [r7, #12]
    
#if LOCK_VERSION == 0 || LOCK_VERSION > 9
    if (version > 9) { modeInfo >>= 9; }
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b09      	cmp	r3, #9
 8000ce0:	d902      	bls.n	8000ce8 <getModeBits+0x20>
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	0a5b      	lsrs	r3, r3, #9
 8000ce6:	60fb      	str	r3, [r7, #12]
#endif
    
#if LOCK_VERSION == 0 || LOCK_VERSION > 26
    if (version > 26) { modeInfo >>= 9; }
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b1a      	cmp	r3, #26
 8000cec:	d902      	bls.n	8000cf4 <getModeBits+0x2c>
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	0a5b      	lsrs	r3, r3, #9
 8000cf2:	60fb      	str	r3, [r7, #12]
#endif
    
    char result = 8 + ((modeInfo >> (3 * mode)) & 0x07);
 8000cf4:	79ba      	ldrb	r2, [r7, #6]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	f003 0307 	and.w	r3, r3, #7
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	3308      	adds	r3, #8
 8000d0c:	72fb      	strb	r3, [r7, #11]
    if (result == 15) { result = 16; }
 8000d0e:	7afb      	ldrb	r3, [r7, #11]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d101      	bne.n	8000d18 <getModeBits+0x50>
 8000d14:	2310      	movs	r3, #16
 8000d16:	72fb      	strb	r3, [r7, #11]
    
    return result;
 8000d18:	7afb      	ldrb	r3, [r7, #11]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	07bbb80a 	.word	0x07bbb80a

08000d2c <bb_getGridSizeBytes>:
    }
    printf("\n");
}
*/

static uint16_t bb_getGridSizeBytes(uint8_t size) {
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
    return (((size * size) + 7) / 8);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	79fa      	ldrb	r2, [r7, #7]
 8000d3a:	fb02 f303 	mul.w	r3, r2, r3
 8000d3e:	3307      	adds	r3, #7
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	da00      	bge.n	8000d46 <bb_getGridSizeBytes+0x1a>
 8000d44:	3307      	adds	r3, #7
 8000d46:	10db      	asrs	r3, r3, #3
 8000d48:	b29b      	uxth	r3, r3
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <bb_getBufferSizeBytes>:

static uint16_t bb_getBufferSizeBytes(uint32_t bits) {
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
    return ((bits + 7) / 8);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3307      	adds	r3, #7
 8000d62:	08db      	lsrs	r3, r3, #3
 8000d64:	b29b      	uxth	r3, r3
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <bb_initBuffer>:

static void bb_initBuffer(BitBucket *bitBuffer, uint8_t *data, int32_t capacityBytes) {
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	60f8      	str	r0, [r7, #12]
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
    bitBuffer->bitOffsetOrWidth = 0;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
    bitBuffer->capacityBytes = capacityBytes;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	809a      	strh	r2, [r3, #4]
    bitBuffer->data = data;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	609a      	str	r2, [r3, #8]
    
    memset(data, 0, bitBuffer->capacityBytes);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	889b      	ldrh	r3, [r3, #4]
 8000d96:	461a      	mov	r2, r3
 8000d98:	2100      	movs	r1, #0
 8000d9a:	68b8      	ldr	r0, [r7, #8]
 8000d9c:	f006 f922 	bl	8006fe4 <memset>
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <bb_initGrid>:

static void bb_initGrid(BitBucket *bitGrid, uint8_t *data, uint8_t size) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	4613      	mov	r3, r2
 8000db4:	71fb      	strb	r3, [r7, #7]
    bitGrid->bitOffsetOrWidth = size;
 8000db6:	79fa      	ldrb	r2, [r7, #7]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	601a      	str	r2, [r3, #0]
    bitGrid->capacityBytes = bb_getGridSizeBytes(size);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ffb4 	bl	8000d2c <bb_getGridSizeBytes>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	809a      	strh	r2, [r3, #4]
    bitGrid->data = data;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	609a      	str	r2, [r3, #8]

    memset(data, 0, bitGrid->capacityBytes);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	889b      	ldrh	r3, [r3, #4]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	2100      	movs	r1, #0
 8000dda:	68b8      	ldr	r0, [r7, #8]
 8000ddc:	f006 f902 	bl	8006fe4 <memset>
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <bb_appendBits>:

static void bb_appendBits(BitBucket *bitBuffer, uint32_t val, uint8_t length) {
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	4613      	mov	r3, r2
 8000df4:	71fb      	strb	r3, [r7, #7]
    uint32_t offset = bitBuffer->bitOffsetOrWidth;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	617b      	str	r3, [r7, #20]
    for (int8_t i = length - 1; i >= 0; i--, offset++) {
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	74fb      	strb	r3, [r7, #19]
 8000e04:	e024      	b.n	8000e50 <bb_appendBits+0x68>
        bitBuffer->data[offset >> 3] |= ((val >> i) & 1) << (7 - (offset & 7));
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	4413      	add	r3, r2
 8000e10:	7819      	ldrb	r1, [r3, #0]
 8000e12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1c:	f003 0201 	and.w	r2, r3, #1
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6898      	ldr	r0, [r3, #8]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	08db      	lsrs	r3, r3, #3
 8000e36:	4403      	add	r3, r0
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	701a      	strb	r2, [r3, #0]
    for (int8_t i = length - 1; i >= 0; i--, offset++) {
 8000e3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	3b01      	subs	r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	74fb      	strb	r3, [r7, #19]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	dad6      	bge.n	8000e06 <bb_appendBits+0x1e>
    }
    bitBuffer->bitOffsetOrWidth = offset;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	601a      	str	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	371c      	adds	r7, #28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <bb_setBit>:
    for (int8_t i = length - 1; i >= 0; i--, offset++) {
        bitBuffer->data[offset >> 3] |= ((val >> i) & 1) << (7 - (offset & 7));
    }
}
*/
static void bb_setBit(BitBucket *bitGrid, uint8_t x, uint8_t y, bool on) {
 8000e6a:	b480      	push	{r7}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	4608      	mov	r0, r1
 8000e74:	4611      	mov	r1, r2
 8000e76:	461a      	mov	r2, r3
 8000e78:	4603      	mov	r3, r0
 8000e7a:	70fb      	strb	r3, [r7, #3]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70bb      	strb	r3, [r7, #2]
 8000e80:	4613      	mov	r3, r2
 8000e82:	707b      	strb	r3, [r7, #1]
    uint32_t offset = y * bitGrid->bitOffsetOrWidth + x;
 8000e84:	78bb      	ldrb	r3, [r7, #2]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	fb03 f202 	mul.w	r2, r3, r2
 8000e8e:	78fb      	ldrb	r3, [r7, #3]
 8000e90:	4413      	add	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]
    uint8_t mask = 1 << (7 - (offset & 0x07));
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	72fb      	strb	r3, [r7, #11]
    if (on) {
 8000ea4:	787b      	ldrb	r3, [r7, #1]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00f      	beq.n	8000eca <bb_setBit+0x60>
        bitGrid->data[offset >> 3] |= mask;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	08db      	lsrs	r3, r3, #3
 8000eb2:	4413      	add	r3, r2
 8000eb4:	7819      	ldrb	r1, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	7afa      	ldrb	r2, [r7, #11]
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	701a      	strb	r2, [r3, #0]
    } else {
        bitGrid->data[offset >> 3] &= ~mask;
    }
}
 8000ec8:	e013      	b.n	8000ef2 <bb_setBit+0x88>
        bitGrid->data[offset >> 3] &= ~mask;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	08db      	lsrs	r3, r3, #3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b25a      	sxtb	r2, r3
 8000ed8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	b259      	sxtb	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	08db      	lsrs	r3, r3, #3
 8000eec:	4413      	add	r3, r2
 8000eee:	b2ca      	uxtb	r2, r1
 8000ef0:	701a      	strb	r2, [r3, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <bb_invertBit>:

static void bb_invertBit(BitBucket *bitGrid, uint8_t x, uint8_t y, bool invert) {
 8000efe:	b480      	push	{r7}
 8000f00:	b085      	sub	sp, #20
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	4608      	mov	r0, r1
 8000f08:	4611      	mov	r1, r2
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	70fb      	strb	r3, [r7, #3]
 8000f10:	460b      	mov	r3, r1
 8000f12:	70bb      	strb	r3, [r7, #2]
 8000f14:	4613      	mov	r3, r2
 8000f16:	707b      	strb	r3, [r7, #1]
    uint32_t offset = y * bitGrid->bitOffsetOrWidth + x;
 8000f18:	78bb      	ldrb	r3, [r7, #2]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	fb03 f202 	mul.w	r2, r3, r2
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	4413      	add	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
    uint8_t mask = 1 << (7 - (offset & 0x07));
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	2201      	movs	r2, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	72fb      	strb	r3, [r7, #11]
    bool on = ((bitGrid->data[offset >> 3] & (1 << (7 - (offset & 0x07)))) != 0);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	08db      	lsrs	r3, r3, #3
 8000f40:	4413      	add	r3, r2
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	fa42 f303 	asr.w	r3, r2, r3
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bf14      	ite	ne
 8000f5a:	2301      	movne	r3, #1
 8000f5c:	2300      	moveq	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	72bb      	strb	r3, [r7, #10]
    if (on ^ invert) {
 8000f62:	7aba      	ldrb	r2, [r7, #10]
 8000f64:	787b      	ldrb	r3, [r7, #1]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d00f      	beq.n	8000f8a <bb_invertBit+0x8c>
        bitGrid->data[offset >> 3] |= mask;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	4413      	add	r3, r2
 8000f74:	7819      	ldrb	r1, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	08db      	lsrs	r3, r3, #3
 8000f7e:	4413      	add	r3, r2
 8000f80:	7afa      	ldrb	r2, [r7, #11]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	701a      	strb	r2, [r3, #0]
    } else {
        bitGrid->data[offset >> 3] &= ~mask;
    }
}
 8000f88:	e013      	b.n	8000fb2 <bb_invertBit+0xb4>
        bitGrid->data[offset >> 3] &= ~mask;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	08db      	lsrs	r3, r3, #3
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b25a      	sxtb	r2, r3
 8000f98:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	b259      	sxtb	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	08db      	lsrs	r3, r3, #3
 8000fac:	4413      	add	r3, r2
 8000fae:	b2ca      	uxtb	r2, r1
 8000fb0:	701a      	strb	r2, [r3, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <bb_getBit>:

static bool bb_getBit(BitBucket *bitGrid, uint8_t x, uint8_t y) {
 8000fbe:	b480      	push	{r7}
 8000fc0:	b085      	sub	sp, #20
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	70fb      	strb	r3, [r7, #3]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	70bb      	strb	r3, [r7, #2]
    uint32_t offset = y * bitGrid->bitOffsetOrWidth + x;
 8000fce:	78bb      	ldrb	r3, [r7, #2]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	fb03 f202 	mul.w	r2, r3, r2
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
    return (bitGrid->data[offset >> 3] & (1 << (7 - (offset & 0x07)))) != 0;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	08db      	lsrs	r3, r3, #3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	fa42 f303 	asr.w	r3, r2, r3
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf14      	ite	ne
 8001000:	2301      	movne	r3, #1
 8001002:	2300      	moveq	r3, #0
 8001004:	b2db      	uxtb	r3, r3
}
 8001006:	4618      	mov	r0, r3
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <applyMask>:

// XORs the data modules in this QR Code with the given mask pattern. Due to XOR's mathematical
// properties, calling applyMask(m) twice with the same value is equivalent to no change at all.
// This means it is possible to apply a mask, undo it, and try another mask. Note that a final
// well-formed QR Code symbol needs exactly one mask applied (not zero, not two, etc.).
static void applyMask(BitBucket *modules, BitBucket *isFunction, uint8_t mask) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	4613      	mov	r3, r2
 8001020:	71fb      	strb	r3, [r7, #7]
    uint8_t size = modules->bitOffsetOrWidth;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	753b      	strb	r3, [r7, #20]
    
    for (uint8_t y = 0; y < size; y++) {
 8001028:	2300      	movs	r3, #0
 800102a:	75fb      	strb	r3, [r7, #23]
 800102c:	e0de      	b.n	80011ec <applyMask+0x1d8>
        for (uint8_t x = 0; x < size; x++) {
 800102e:	2300      	movs	r3, #0
 8001030:	75bb      	strb	r3, [r7, #22]
 8001032:	e0d3      	b.n	80011dc <applyMask+0x1c8>
            if (bb_getBit(isFunction, x, y)) { continue; }
 8001034:	7dfa      	ldrb	r2, [r7, #23]
 8001036:	7dbb      	ldrb	r3, [r7, #22]
 8001038:	4619      	mov	r1, r3
 800103a:	68b8      	ldr	r0, [r7, #8]
 800103c:	f7ff ffbf 	bl	8000fbe <bb_getBit>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	f040 80c6 	bne.w	80011d4 <applyMask+0x1c0>
            
            bool invert = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	757b      	strb	r3, [r7, #21]
            switch (mask) {
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2b07      	cmp	r3, #7
 8001050:	f200 80b9 	bhi.w	80011c6 <applyMask+0x1b2>
 8001054:	a201      	add	r2, pc, #4	; (adr r2, 800105c <applyMask+0x48>)
 8001056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105a:	bf00      	nop
 800105c:	0800107d 	.word	0x0800107d
 8001060:	08001097 	.word	0x08001097
 8001064:	080010ad 	.word	0x080010ad
 8001068:	080010cf 	.word	0x080010cf
 800106c:	080010f5 	.word	0x080010f5
 8001070:	0800111d 	.word	0x0800111d
 8001074:	08001153 	.word	0x08001153
 8001078:	0800118d 	.word	0x0800118d
                case 0:  invert = (x + y) % 2 == 0;                    break;
 800107c:	7dba      	ldrb	r2, [r7, #22]
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	4413      	add	r3, r2
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	bf0c      	ite	eq
 800108c:	2301      	moveq	r3, #1
 800108e:	2300      	movne	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	757b      	strb	r3, [r7, #21]
 8001094:	e097      	b.n	80011c6 <applyMask+0x1b2>
                case 1:  invert = y % 2 == 0;                          break;
 8001096:	7dfb      	ldrb	r3, [r7, #23]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	bf0c      	ite	eq
 80010a2:	2301      	moveq	r3, #1
 80010a4:	2300      	movne	r3, #0
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	757b      	strb	r3, [r7, #21]
 80010aa:	e08c      	b.n	80011c6 <applyMask+0x1b2>
                case 2:  invert = x % 3 == 0;                          break;
 80010ac:	7dba      	ldrb	r2, [r7, #22]
 80010ae:	4b54      	ldr	r3, [pc, #336]	; (8001200 <applyMask+0x1ec>)
 80010b0:	fba3 1302 	umull	r1, r3, r3, r2
 80010b4:	0859      	lsrs	r1, r3, #1
 80010b6:	460b      	mov	r3, r1
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	440b      	add	r3, r1
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	bf0c      	ite	eq
 80010c4:	2301      	moveq	r3, #1
 80010c6:	2300      	movne	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	757b      	strb	r3, [r7, #21]
 80010cc:	e07b      	b.n	80011c6 <applyMask+0x1b2>
                case 3:  invert = (x + y) % 3 == 0;                    break;
 80010ce:	7dba      	ldrb	r2, [r7, #22]
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	18d1      	adds	r1, r2, r3
 80010d4:	4b4b      	ldr	r3, [pc, #300]	; (8001204 <applyMask+0x1f0>)
 80010d6:	fb83 3201 	smull	r3, r2, r3, r1
 80010da:	17cb      	asrs	r3, r1, #31
 80010dc:	1ad2      	subs	r2, r2, r3
 80010de:	4613      	mov	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	1aca      	subs	r2, r1, r3
 80010e6:	2a00      	cmp	r2, #0
 80010e8:	bf0c      	ite	eq
 80010ea:	2301      	moveq	r3, #1
 80010ec:	2300      	movne	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	757b      	strb	r3, [r7, #21]
 80010f2:	e068      	b.n	80011c6 <applyMask+0x1b2>
                case 4:  invert = (x / 3 + y / 2) % 2 == 0;            break;
 80010f4:	7dbb      	ldrb	r3, [r7, #22]
 80010f6:	4a42      	ldr	r2, [pc, #264]	; (8001200 <applyMask+0x1ec>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	085b      	lsrs	r3, r3, #1
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	085b      	lsrs	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4413      	add	r3, r2
 8001108:	b2db      	uxtb	r3, r3
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	bf0c      	ite	eq
 8001112:	2301      	moveq	r3, #1
 8001114:	2300      	movne	r3, #0
 8001116:	b2db      	uxtb	r3, r3
 8001118:	757b      	strb	r3, [r7, #21]
 800111a:	e054      	b.n	80011c6 <applyMask+0x1b2>
                case 5:  invert = x * y % 2 + x * y % 3 == 0;          break;
 800111c:	7dbb      	ldrb	r3, [r7, #22]
 800111e:	7dfa      	ldrb	r2, [r7, #23]
 8001120:	fb02 f303 	mul.w	r3, r2, r3
 8001124:	f003 0001 	and.w	r0, r3, #1
 8001128:	7dbb      	ldrb	r3, [r7, #22]
 800112a:	7dfa      	ldrb	r2, [r7, #23]
 800112c:	fb02 f103 	mul.w	r1, r2, r3
 8001130:	4b34      	ldr	r3, [pc, #208]	; (8001204 <applyMask+0x1f0>)
 8001132:	fb83 3201 	smull	r3, r2, r3, r1
 8001136:	17cb      	asrs	r3, r1, #31
 8001138:	1ad2      	subs	r2, r2, r3
 800113a:	4613      	mov	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	1aca      	subs	r2, r1, r3
 8001142:	1883      	adds	r3, r0, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	757b      	strb	r3, [r7, #21]
 8001150:	e039      	b.n	80011c6 <applyMask+0x1b2>
                case 6:  invert = (x * y % 2 + x * y % 3) % 2 == 0;    break;
 8001152:	7dbb      	ldrb	r3, [r7, #22]
 8001154:	7dfa      	ldrb	r2, [r7, #23]
 8001156:	fb02 f303 	mul.w	r3, r2, r3
 800115a:	f003 0001 	and.w	r0, r3, #1
 800115e:	7dbb      	ldrb	r3, [r7, #22]
 8001160:	7dfa      	ldrb	r2, [r7, #23]
 8001162:	fb02 f103 	mul.w	r1, r2, r3
 8001166:	4b27      	ldr	r3, [pc, #156]	; (8001204 <applyMask+0x1f0>)
 8001168:	fb83 3201 	smull	r3, r2, r3, r1
 800116c:	17cb      	asrs	r3, r1, #31
 800116e:	1ad2      	subs	r2, r2, r3
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	1aca      	subs	r2, r1, r3
 8001178:	1883      	adds	r3, r0, r2
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf0c      	ite	eq
 8001182:	2301      	moveq	r3, #1
 8001184:	2300      	movne	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	757b      	strb	r3, [r7, #21]
 800118a:	e01c      	b.n	80011c6 <applyMask+0x1b2>
                case 7:  invert = ((x + y) % 2 + x * y % 3) % 2 == 0;  break;
 800118c:	7dba      	ldrb	r2, [r7, #22]
 800118e:	7dfb      	ldrb	r3, [r7, #23]
 8001190:	4413      	add	r3, r2
 8001192:	b2db      	uxtb	r3, r3
 8001194:	f003 0001 	and.w	r0, r3, #1
 8001198:	7dbb      	ldrb	r3, [r7, #22]
 800119a:	7dfa      	ldrb	r2, [r7, #23]
 800119c:	fb02 f103 	mul.w	r1, r2, r3
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <applyMask+0x1f0>)
 80011a2:	fb83 3201 	smull	r3, r2, r3, r1
 80011a6:	17cb      	asrs	r3, r1, #31
 80011a8:	1ad2      	subs	r2, r2, r3
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	1aca      	subs	r2, r1, r3
 80011b2:	1883      	adds	r3, r0, r2
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	bf0c      	ite	eq
 80011bc:	2301      	moveq	r3, #1
 80011be:	2300      	movne	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	757b      	strb	r3, [r7, #21]
 80011c4:	bf00      	nop
            }
            bb_invertBit(modules, x, y, invert);
 80011c6:	7d7b      	ldrb	r3, [r7, #21]
 80011c8:	7dfa      	ldrb	r2, [r7, #23]
 80011ca:	7db9      	ldrb	r1, [r7, #22]
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff fe96 	bl	8000efe <bb_invertBit>
 80011d2:	e000      	b.n	80011d6 <applyMask+0x1c2>
            if (bb_getBit(isFunction, x, y)) { continue; }
 80011d4:	bf00      	nop
        for (uint8_t x = 0; x < size; x++) {
 80011d6:	7dbb      	ldrb	r3, [r7, #22]
 80011d8:	3301      	adds	r3, #1
 80011da:	75bb      	strb	r3, [r7, #22]
 80011dc:	7dba      	ldrb	r2, [r7, #22]
 80011de:	7d3b      	ldrb	r3, [r7, #20]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	f4ff af27 	bcc.w	8001034 <applyMask+0x20>
    for (uint8_t y = 0; y < size; y++) {
 80011e6:	7dfb      	ldrb	r3, [r7, #23]
 80011e8:	3301      	adds	r3, #1
 80011ea:	75fb      	strb	r3, [r7, #23]
 80011ec:	7dfa      	ldrb	r2, [r7, #23]
 80011ee:	7d3b      	ldrb	r3, [r7, #20]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	f4ff af1c 	bcc.w	800102e <applyMask+0x1a>
        }
    }
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	aaaaaaab 	.word	0xaaaaaaab
 8001204:	55555556 	.word	0x55555556

08001208 <setFunctionModule>:

static void setFunctionModule(BitBucket *modules, BitBucket *isFunction, uint8_t x, uint8_t y, bool on) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	460b      	mov	r3, r1
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	4613      	mov	r3, r2
 800121c:	71bb      	strb	r3, [r7, #6]
    bb_setBit(modules, x, y, on);
 800121e:	7e3b      	ldrb	r3, [r7, #24]
 8001220:	79ba      	ldrb	r2, [r7, #6]
 8001222:	79f9      	ldrb	r1, [r7, #7]
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f7ff fe20 	bl	8000e6a <bb_setBit>
    bb_setBit(isFunction, x, y, true);
 800122a:	2301      	movs	r3, #1
 800122c:	79ba      	ldrb	r2, [r7, #6]
 800122e:	79f9      	ldrb	r1, [r7, #7]
 8001230:	68b8      	ldr	r0, [r7, #8]
 8001232:	f7ff fe1a 	bl	8000e6a <bb_setBit>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <drawFinderPattern>:

// Draws a 9*9 finder pattern including the border separator, with the center module at (x, y).
static void drawFinderPattern(BitBucket *modules, BitBucket *isFunction, uint8_t x, uint8_t y) {
 800123e:	b580      	push	{r7, lr}
 8001240:	b088      	sub	sp, #32
 8001242:	af02      	add	r7, sp, #8
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	4611      	mov	r1, r2
 800124a:	461a      	mov	r2, r3
 800124c:	460b      	mov	r3, r1
 800124e:	71fb      	strb	r3, [r7, #7]
 8001250:	4613      	mov	r3, r2
 8001252:	71bb      	strb	r3, [r7, #6]
    uint8_t size = modules->bitOffsetOrWidth;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	757b      	strb	r3, [r7, #21]

    for (int8_t i = -4; i <= 4; i++) {
 800125a:	23fc      	movs	r3, #252	; 0xfc
 800125c:	75fb      	strb	r3, [r7, #23]
 800125e:	e059      	b.n	8001314 <drawFinderPattern+0xd6>
        for (int8_t j = -4; j <= 4; j++) {
 8001260:	23fc      	movs	r3, #252	; 0xfc
 8001262:	75bb      	strb	r3, [r7, #22]
 8001264:	e04c      	b.n	8001300 <drawFinderPattern+0xc2>
            uint8_t dist = max(abs(i), abs(j));  // Chebyshev/infinity norm
 8001266:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800126a:	2b00      	cmp	r3, #0
 800126c:	bfb8      	it	lt
 800126e:	425b      	neglt	r3, r3
 8001270:	b2db      	uxtb	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001278:	2b00      	cmp	r3, #0
 800127a:	bfb8      	it	lt
 800127c:	425b      	neglt	r3, r3
 800127e:	b2db      	uxtb	r3, r3
 8001280:	4619      	mov	r1, r3
 8001282:	4610      	mov	r0, r2
 8001284:	f7ff fc5c 	bl	8000b40 <max>
 8001288:	4603      	mov	r3, r0
 800128a:	753b      	strb	r3, [r7, #20]
            int16_t xx = x + j, yy = y + i;
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	b21a      	sxth	r2, r3
 8001290:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001294:	b21b      	sxth	r3, r3
 8001296:	4413      	add	r3, r2
 8001298:	827b      	strh	r3, [r7, #18]
 800129a:	79bb      	ldrb	r3, [r7, #6]
 800129c:	b21a      	sxth	r2, r3
 800129e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4413      	add	r3, r2
 80012a6:	823b      	strh	r3, [r7, #16]
            if (0 <= xx && xx < size && 0 <= yy && yy < size) {
 80012a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db21      	blt.n	80012f4 <drawFinderPattern+0xb6>
 80012b0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80012b4:	7d7b      	ldrb	r3, [r7, #21]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	da1c      	bge.n	80012f4 <drawFinderPattern+0xb6>
 80012ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db18      	blt.n	80012f4 <drawFinderPattern+0xb6>
 80012c2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80012c6:	7d7b      	ldrb	r3, [r7, #21]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	da13      	bge.n	80012f4 <drawFinderPattern+0xb6>
                setFunctionModule(modules, isFunction, xx, yy, dist != 2 && dist != 4);
 80012cc:	8a7b      	ldrh	r3, [r7, #18]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	8a3b      	ldrh	r3, [r7, #16]
 80012d2:	b2d9      	uxtb	r1, r3
 80012d4:	7d3b      	ldrb	r3, [r7, #20]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d004      	beq.n	80012e4 <drawFinderPattern+0xa6>
 80012da:	7d3b      	ldrb	r3, [r7, #20]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d001      	beq.n	80012e4 <drawFinderPattern+0xa6>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <drawFinderPattern+0xa8>
 80012e4:	2300      	movs	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	460b      	mov	r3, r1
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f7ff ff8a 	bl	8001208 <setFunctionModule>
        for (int8_t j = -4; j <= 4; j++) {
 80012f4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	75bb      	strb	r3, [r7, #22]
 8001300:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001304:	2b04      	cmp	r3, #4
 8001306:	ddae      	ble.n	8001266 <drawFinderPattern+0x28>
    for (int8_t i = -4; i <= 4; i++) {
 8001308:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	3301      	adds	r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	75fb      	strb	r3, [r7, #23]
 8001314:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001318:	2b04      	cmp	r3, #4
 800131a:	dda1      	ble.n	8001260 <drawFinderPattern+0x22>
            }
        }
    }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <drawAlignmentPattern>:

// Draws a 5*5 alignment pattern, with the center module at (x, y).
static void drawAlignmentPattern(BitBucket *modules, BitBucket *isFunction, uint8_t x, uint8_t y) {
 8001326:	b5b0      	push	{r4, r5, r7, lr}
 8001328:	b088      	sub	sp, #32
 800132a:	af02      	add	r7, sp, #8
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	4611      	mov	r1, r2
 8001332:	461a      	mov	r2, r3
 8001334:	460b      	mov	r3, r1
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	4613      	mov	r3, r2
 800133a:	71bb      	strb	r3, [r7, #6]
    for (int8_t i = -2; i <= 2; i++) {
 800133c:	23fe      	movs	r3, #254	; 0xfe
 800133e:	75fb      	strb	r3, [r7, #23]
 8001340:	e038      	b.n	80013b4 <drawAlignmentPattern+0x8e>
        for (int8_t j = -2; j <= 2; j++) {
 8001342:	23fe      	movs	r3, #254	; 0xfe
 8001344:	75bb      	strb	r3, [r7, #22]
 8001346:	e02b      	b.n	80013a0 <drawAlignmentPattern+0x7a>
            setFunctionModule(modules, isFunction, x + j, y + i, max(abs(i), abs(j)) != 1);
 8001348:	7dba      	ldrb	r2, [r7, #22]
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	4413      	add	r3, r2
 800134e:	b2dc      	uxtb	r4, r3
 8001350:	7dfa      	ldrb	r2, [r7, #23]
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	4413      	add	r3, r2
 8001356:	b2dd      	uxtb	r5, r3
 8001358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800135c:	2b00      	cmp	r3, #0
 800135e:	bfb8      	it	lt
 8001360:	425b      	neglt	r3, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800136a:	2b00      	cmp	r3, #0
 800136c:	bfb8      	it	lt
 800136e:	425b      	neglt	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4619      	mov	r1, r3
 8001374:	4610      	mov	r0, r2
 8001376:	f7ff fbe3 	bl	8000b40 <max>
 800137a:	4603      	mov	r3, r0
 800137c:	2b01      	cmp	r3, #1
 800137e:	bf14      	ite	ne
 8001380:	2301      	movne	r3, #1
 8001382:	2300      	moveq	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	462b      	mov	r3, r5
 800138a:	4622      	mov	r2, r4
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f7ff ff3a 	bl	8001208 <setFunctionModule>
        for (int8_t j = -2; j <= 2; j++) {
 8001394:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	3301      	adds	r3, #1
 800139c:	b2db      	uxtb	r3, r3
 800139e:	75bb      	strb	r3, [r7, #22]
 80013a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	ddcf      	ble.n	8001348 <drawAlignmentPattern+0x22>
    for (int8_t i = -2; i <= 2; i++) {
 80013a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	3301      	adds	r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	75fb      	strb	r3, [r7, #23]
 80013b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	ddc2      	ble.n	8001342 <drawAlignmentPattern+0x1c>
        }
    }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bdb0      	pop	{r4, r5, r7, pc}

080013c6 <drawFormatBits>:

// Draws two copies of the format bits (with its own error correction code)
// based on the given mask and this object's error correction level field.
static void drawFormatBits(BitBucket *modules, BitBucket *isFunction, uint8_t ecc, uint8_t mask) {
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b08c      	sub	sp, #48	; 0x30
 80013ca:	af02      	add	r7, sp, #8
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	4611      	mov	r1, r2
 80013d2:	461a      	mov	r2, r3
 80013d4:	460b      	mov	r3, r1
 80013d6:	71fb      	strb	r3, [r7, #7]
 80013d8:	4613      	mov	r3, r2
 80013da:	71bb      	strb	r3, [r7, #6]
    
    uint8_t size = modules->bitOffsetOrWidth;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	76fb      	strb	r3, [r7, #27]

    // Calculate error correction code and pack bits
    uint32_t data = ecc << 3 | mask;  // errCorrLvl is uint2, mask is uint3
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	00da      	lsls	r2, r3, #3
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
    uint32_t rem = data;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < 10; i++) {
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	e00c      	b.n	8001410 <drawFormatBits+0x4a>
        rem = (rem << 1) ^ ((rem >> 9) * 0x537);
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	005a      	lsls	r2, r3, #1
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	0a5b      	lsrs	r3, r3, #9
 80013fe:	f240 5137 	movw	r1, #1335	; 0x537
 8001402:	fb01 f303 	mul.w	r3, r1, r3
 8001406:	4053      	eors	r3, r2
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < 10; i++) {
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	3301      	adds	r3, #1
 800140e:	623b      	str	r3, [r7, #32]
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	2b09      	cmp	r3, #9
 8001414:	ddef      	ble.n	80013f6 <drawFormatBits+0x30>
    }
    
    data = data << 10 | rem;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	029b      	lsls	r3, r3, #10
 800141a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141c:	4313      	orrs	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
    data ^= 0x5412;  // uint15
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f483 43a8 	eor.w	r3, r3, #21504	; 0x5400
 8001426:	f083 0312 	eor.w	r3, r3, #18
 800142a:	617b      	str	r3, [r7, #20]
    
    // Draw first copy
    for (uint8_t i = 0; i <= 5; i++) {
 800142c:	2300      	movs	r3, #0
 800142e:	77fb      	strb	r3, [r7, #31]
 8001430:	e015      	b.n	800145e <drawFormatBits+0x98>
        setFunctionModule(modules, isFunction, 8, i, ((data >> i) & 1) != 0);
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	fa22 f303 	lsr.w	r3, r2, r3
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	bf14      	ite	ne
 8001442:	2301      	movne	r3, #1
 8001444:	2300      	moveq	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	7ffb      	ldrb	r3, [r7, #31]
 800144c:	9200      	str	r2, [sp, #0]
 800144e:	2208      	movs	r2, #8
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f7ff fed8 	bl	8001208 <setFunctionModule>
    for (uint8_t i = 0; i <= 5; i++) {
 8001458:	7ffb      	ldrb	r3, [r7, #31]
 800145a:	3301      	adds	r3, #1
 800145c:	77fb      	strb	r3, [r7, #31]
 800145e:	7ffb      	ldrb	r3, [r7, #31]
 8001460:	2b05      	cmp	r3, #5
 8001462:	d9e6      	bls.n	8001432 <drawFormatBits+0x6c>
    }
    
    setFunctionModule(modules, isFunction, 8, 7, ((data >> 6) & 1) != 0);
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	099b      	lsrs	r3, r3, #6
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf14      	ite	ne
 8001470:	2301      	movne	r3, #1
 8001472:	2300      	moveq	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2307      	movs	r3, #7
 800147a:	2208      	movs	r2, #8
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff fec2 	bl	8001208 <setFunctionModule>
    setFunctionModule(modules, isFunction, 8, 8, ((data >> 7) & 1) != 0);
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	09db      	lsrs	r3, r3, #7
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	bf14      	ite	ne
 8001490:	2301      	movne	r3, #1
 8001492:	2300      	moveq	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2308      	movs	r3, #8
 800149a:	2208      	movs	r2, #8
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f7ff feb2 	bl	8001208 <setFunctionModule>
    setFunctionModule(modules, isFunction, 7, 8, ((data >> 8) & 1) != 0);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	0a1b      	lsrs	r3, r3, #8
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf14      	ite	ne
 80014b0:	2301      	movne	r3, #1
 80014b2:	2300      	moveq	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2308      	movs	r3, #8
 80014ba:	2207      	movs	r2, #7
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff fea2 	bl	8001208 <setFunctionModule>
    
    for (int8_t i = 9; i < 15; i++) {
 80014c4:	2309      	movs	r3, #9
 80014c6:	77bb      	strb	r3, [r7, #30]
 80014c8:	e01c      	b.n	8001504 <drawFormatBits+0x13e>
        setFunctionModule(modules, isFunction, 14 - i, 8, ((data >> i) & 1) != 0);
 80014ca:	7fbb      	ldrb	r3, [r7, #30]
 80014cc:	f1c3 030e 	rsb	r3, r3, #14
 80014d0:	b2d9      	uxtb	r1, r3
 80014d2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	fa22 f303 	lsr.w	r3, r2, r3
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bf14      	ite	ne
 80014e4:	2301      	movne	r3, #1
 80014e6:	2300      	moveq	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2308      	movs	r3, #8
 80014ee:	460a      	mov	r2, r1
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f7ff fe88 	bl	8001208 <setFunctionModule>
    for (int8_t i = 9; i < 15; i++) {
 80014f8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	77bb      	strb	r3, [r7, #30]
 8001504:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001508:	2b0e      	cmp	r3, #14
 800150a:	ddde      	ble.n	80014ca <drawFormatBits+0x104>
    }
    
    // Draw second copy
    for (int8_t i = 0; i <= 7; i++) {
 800150c:	2300      	movs	r3, #0
 800150e:	777b      	strb	r3, [r7, #29]
 8001510:	e01e      	b.n	8001550 <drawFormatBits+0x18a>
        setFunctionModule(modules, isFunction, size - 1 - i, 8, ((data >> i) & 1) != 0);
 8001512:	7f7b      	ldrb	r3, [r7, #29]
 8001514:	7efa      	ldrb	r2, [r7, #27]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	3b01      	subs	r3, #1
 800151c:	b2d9      	uxtb	r1, r3
 800151e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf14      	ite	ne
 8001530:	2301      	movne	r3, #1
 8001532:	2300      	moveq	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2308      	movs	r3, #8
 800153a:	460a      	mov	r2, r1
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f7ff fe62 	bl	8001208 <setFunctionModule>
    for (int8_t i = 0; i <= 7; i++) {
 8001544:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3301      	adds	r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	777b      	strb	r3, [r7, #29]
 8001550:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001554:	2b07      	cmp	r3, #7
 8001556:	dddc      	ble.n	8001512 <drawFormatBits+0x14c>
    }
    
    for (int8_t i = 8; i < 15; i++) {
 8001558:	2308      	movs	r3, #8
 800155a:	773b      	strb	r3, [r7, #28]
 800155c:	e01e      	b.n	800159c <drawFormatBits+0x1d6>
        setFunctionModule(modules, isFunction, 8, size - 15 + i, ((data >> i) & 1) != 0);
 800155e:	7f3a      	ldrb	r2, [r7, #28]
 8001560:	7efb      	ldrb	r3, [r7, #27]
 8001562:	4413      	add	r3, r2
 8001564:	b2db      	uxtb	r3, r3
 8001566:	3b0f      	subs	r3, #15
 8001568:	b2d9      	uxtb	r1, r3
 800156a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf14      	ite	ne
 800157c:	2301      	movne	r3, #1
 800157e:	2300      	moveq	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	460b      	mov	r3, r1
 8001586:	2208      	movs	r2, #8
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f7ff fe3c 	bl	8001208 <setFunctionModule>
    for (int8_t i = 8; i < 15; i++) {
 8001590:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	3301      	adds	r3, #1
 8001598:	b2db      	uxtb	r3, r3
 800159a:	773b      	strb	r3, [r7, #28]
 800159c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80015a0:	2b0e      	cmp	r3, #14
 80015a2:	dddc      	ble.n	800155e <drawFormatBits+0x198>
    }
    
    setFunctionModule(modules, isFunction, 8, size - 8, true);
 80015a4:	7efb      	ldrb	r3, [r7, #27]
 80015a6:	3b08      	subs	r3, #8
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2201      	movs	r2, #1
 80015ac:	9200      	str	r2, [sp, #0]
 80015ae:	2208      	movs	r2, #8
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f7ff fe28 	bl	8001208 <setFunctionModule>
}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <drawVersion>:


// Draws two copies of the version bits (with its own error correction code),
// based on this object's version field (which only has an effect for 7 <= version <= 40).
static void drawVersion(BitBucket *modules, BitBucket *isFunction, uint8_t version) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	4613      	mov	r3, r2
 80015cc:	71fb      	strb	r3, [r7, #7]
    
    int8_t size = modules->bitOffsetOrWidth;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	767b      	strb	r3, [r7, #25]

#if LOCK_VERSION != 0 && LOCK_VERSION < 7
    return;
    
#else
    if (version < 7) { return; }
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d957      	bls.n	800168a <drawVersion+0xca>
    
    // Calculate error correction code and pack bits
    uint32_t rem = version;  // version is uint6, in the range [7, 40]
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < 12; i++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	76fb      	strb	r3, [r7, #27]
 80015e2:	e00c      	b.n	80015fe <drawVersion+0x3e>
        rem = (rem << 1) ^ ((rem >> 11) * 0x1F25);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005a      	lsls	r2, r3, #1
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	0adb      	lsrs	r3, r3, #11
 80015ec:	f641 7125 	movw	r1, #7973	; 0x1f25
 80015f0:	fb01 f303 	mul.w	r3, r1, r3
 80015f4:	4053      	eors	r3, r2
 80015f6:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < 12; i++) {
 80015f8:	7efb      	ldrb	r3, [r7, #27]
 80015fa:	3301      	adds	r3, #1
 80015fc:	76fb      	strb	r3, [r7, #27]
 80015fe:	7efb      	ldrb	r3, [r7, #27]
 8001600:	2b0b      	cmp	r3, #11
 8001602:	d9ef      	bls.n	80015e4 <drawVersion+0x24>
    }
    
    uint32_t data = version << 12 | rem;  // uint18
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	031b      	lsls	r3, r3, #12
 8001608:	461a      	mov	r2, r3
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	4313      	orrs	r3, r2
 800160e:	617b      	str	r3, [r7, #20]
    
    // Draw two copies
    for (uint8_t i = 0; i < 18; i++) {
 8001610:	2300      	movs	r3, #0
 8001612:	76bb      	strb	r3, [r7, #26]
 8001614:	e035      	b.n	8001682 <drawVersion+0xc2>
        bool bit = ((data >> i) & 1) != 0;
 8001616:	7ebb      	ldrb	r3, [r7, #26]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	fa22 f303 	lsr.w	r3, r2, r3
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	bf14      	ite	ne
 8001626:	2301      	movne	r3, #1
 8001628:	2300      	moveq	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	74fb      	strb	r3, [r7, #19]
        uint8_t a = size - 11 + i % 3, b = i / 3;
 800162e:	7eba      	ldrb	r2, [r7, #26]
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <drawVersion+0xd4>)
 8001632:	fba3 1302 	umull	r1, r3, r3, r2
 8001636:	0859      	lsrs	r1, r3, #1
 8001638:	460b      	mov	r3, r1
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	440b      	add	r3, r1
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	b2da      	uxtb	r2, r3
 8001642:	7e7b      	ldrb	r3, [r7, #25]
 8001644:	4413      	add	r3, r2
 8001646:	b2db      	uxtb	r3, r3
 8001648:	3b0b      	subs	r3, #11
 800164a:	74bb      	strb	r3, [r7, #18]
 800164c:	7ebb      	ldrb	r3, [r7, #26]
 800164e:	4a11      	ldr	r2, [pc, #68]	; (8001694 <drawVersion+0xd4>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	747b      	strb	r3, [r7, #17]
        setFunctionModule(modules, isFunction, a, b, bit);
 8001658:	7c79      	ldrb	r1, [r7, #17]
 800165a:	7cba      	ldrb	r2, [r7, #18]
 800165c:	7cfb      	ldrb	r3, [r7, #19]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	460b      	mov	r3, r1
 8001662:	68b9      	ldr	r1, [r7, #8]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff fdcf 	bl	8001208 <setFunctionModule>
        setFunctionModule(modules, isFunction, b, a, bit);
 800166a:	7cb9      	ldrb	r1, [r7, #18]
 800166c:	7c7a      	ldrb	r2, [r7, #17]
 800166e:	7cfb      	ldrb	r3, [r7, #19]
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	460b      	mov	r3, r1
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff fdc6 	bl	8001208 <setFunctionModule>
    for (uint8_t i = 0; i < 18; i++) {
 800167c:	7ebb      	ldrb	r3, [r7, #26]
 800167e:	3301      	adds	r3, #1
 8001680:	76bb      	strb	r3, [r7, #26]
 8001682:	7ebb      	ldrb	r3, [r7, #26]
 8001684:	2b11      	cmp	r3, #17
 8001686:	d9c6      	bls.n	8001616 <drawVersion+0x56>
 8001688:	e000      	b.n	800168c <drawVersion+0xcc>
    if (version < 7) { return; }
 800168a:	bf00      	nop
    }
    
#endif
}
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	aaaaaaab 	.word	0xaaaaaaab

08001698 <drawFunctionPatterns>:

static void drawFunctionPatterns(BitBucket *modules, BitBucket *isFunction, uint8_t version, uint8_t ecc) {
 8001698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800169c:	b08d      	sub	sp, #52	; 0x34
 800169e:	af02      	add	r7, sp, #8
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	4611      	mov	r1, r2
 80016a6:	461a      	mov	r2, r3
 80016a8:	460b      	mov	r3, r1
 80016aa:	71fb      	strb	r3, [r7, #7]
 80016ac:	4613      	mov	r3, r2
 80016ae:	71bb      	strb	r3, [r7, #6]
    
    uint8_t size = modules->bitOffsetOrWidth;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f887 3020 	strb.w	r3, [r7, #32]

    // Draw the horizontal and vertical timing patterns
    for (uint8_t i = 0; i < size; i++) {
 80016b8:	2300      	movs	r3, #0
 80016ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80016be:	e029      	b.n	8001714 <drawFunctionPatterns+0x7c>
        setFunctionModule(modules, isFunction, 6, i, i % 2 == 0);
 80016c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	bf0c      	ite	eq
 80016ce:	2301      	moveq	r3, #1
 80016d0:	2300      	movne	r3, #0
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016da:	9200      	str	r2, [sp, #0]
 80016dc:	2206      	movs	r2, #6
 80016de:	68b9      	ldr	r1, [r7, #8]
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f7ff fd91 	bl	8001208 <setFunctionModule>
        setFunctionModule(modules, isFunction, i, 6, i % 2 == 0);
 80016e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	bf0c      	ite	eq
 80016f4:	2301      	moveq	r3, #1
 80016f6:	2300      	movne	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2306      	movs	r3, #6
 8001702:	68b9      	ldr	r1, [r7, #8]
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7ff fd7f 	bl	8001208 <setFunctionModule>
    for (uint8_t i = 0; i < size; i++) {
 800170a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800170e:	3301      	adds	r3, #1
 8001710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001714:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001718:	f897 3020 	ldrb.w	r3, [r7, #32]
 800171c:	429a      	cmp	r2, r3
 800171e:	d3cf      	bcc.n	80016c0 <drawFunctionPatterns+0x28>
    }
    
    // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)
    drawFinderPattern(modules, isFunction, 3, 3);
 8001720:	2303      	movs	r3, #3
 8001722:	2203      	movs	r2, #3
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f7ff fd89 	bl	800123e <drawFinderPattern>
    drawFinderPattern(modules, isFunction, size - 4, 3);
 800172c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001730:	3b04      	subs	r3, #4
 8001732:	b2da      	uxtb	r2, r3
 8001734:	2303      	movs	r3, #3
 8001736:	68b9      	ldr	r1, [r7, #8]
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff fd80 	bl	800123e <drawFinderPattern>
    drawFinderPattern(modules, isFunction, 3, size - 4);
 800173e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001742:	3b04      	subs	r3, #4
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2203      	movs	r2, #3
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f7ff fd77 	bl	800123e <drawFinderPattern>
    
#if LOCK_VERSION == 0 || LOCK_VERSION > 1

    if (version > 1) {
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b01      	cmp	r3, #1
 8001754:	f240 80c2 	bls.w	80018dc <drawFunctionPatterns+0x244>
 8001758:	466b      	mov	r3, sp
 800175a:	461e      	mov	r6, r3

        // Draw the numerous alignment patterns
        
        uint8_t alignCount = version / 7 + 2;
 800175c:	79fa      	ldrb	r2, [r7, #7]
 800175e:	4b68      	ldr	r3, [pc, #416]	; (8001900 <drawFunctionPatterns+0x268>)
 8001760:	fba3 1302 	umull	r1, r3, r3, r2
 8001764:	1ad2      	subs	r2, r2, r3
 8001766:	0852      	lsrs	r2, r2, #1
 8001768:	4413      	add	r3, r2
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	b2db      	uxtb	r3, r3
 800176e:	3302      	adds	r3, #2
 8001770:	77fb      	strb	r3, [r7, #31]
        uint8_t step;
        if (version != 32) {
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2b20      	cmp	r3, #32
 8001776:	d00f      	beq.n	8001798 <drawFunctionPatterns+0x100>
            step = (version * 4 + alignCount * 2 + 1) / (2 * alignCount - 2) * 2;  // ceil((size - 13) / (2*numAlign - 2)) * 2
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	005a      	lsls	r2, r3, #1
 800177c:	7ffb      	ldrb	r3, [r7, #31]
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	7ffb      	ldrb	r3, [r7, #31]
 8001786:	3b01      	subs	r3, #1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fb92 f3f3 	sdiv	r3, r2, r3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001796:	e002      	b.n	800179e <drawFunctionPatterns+0x106>
        } else { // C-C-C-Combo breaker!
            step = 26;
 8001798:	231a      	movs	r3, #26
 800179a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        }
        
        uint8_t alignPositionIndex = alignCount - 1;
 800179e:	7ffb      	ldrb	r3, [r7, #31]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint8_t alignPosition[alignCount];
 80017a6:	7ff9      	ldrb	r1, [r7, #31]
 80017a8:	460b      	mov	r3, r1
 80017aa:	3b01      	subs	r3, #1
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	b2cb      	uxtb	r3, r1
 80017b0:	2200      	movs	r2, #0
 80017b2:	4698      	mov	r8, r3
 80017b4:	4691      	mov	r9, r2
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ca:	b2cb      	uxtb	r3, r1
 80017cc:	2200      	movs	r2, #0
 80017ce:	461c      	mov	r4, r3
 80017d0:	4615      	mov	r5, r2
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	00eb      	lsls	r3, r5, #3
 80017dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017e0:	00e2      	lsls	r2, r4, #3
 80017e2:	460b      	mov	r3, r1
 80017e4:	3307      	adds	r3, #7
 80017e6:	08db      	lsrs	r3, r3, #3
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	ebad 0d03 	sub.w	sp, sp, r3
 80017ee:	ab02      	add	r3, sp, #8
 80017f0:	3300      	adds	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
        
        alignPosition[0] = 6;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2206      	movs	r2, #6
 80017f8:	701a      	strb	r2, [r3, #0]
        
        uint8_t size = version * 4 + 17;
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	3311      	adds	r3, #17
 8001802:	74fb      	strb	r3, [r7, #19]
        for (uint8_t i = 0, pos = size - 7; i < alignCount - 1; i++, pos -= step) {
 8001804:	2300      	movs	r3, #0
 8001806:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800180a:	7cfb      	ldrb	r3, [r7, #19]
 800180c:	3b07      	subs	r3, #7
 800180e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001812:	e015      	b.n	8001840 <drawFunctionPatterns+0x1a8>
            alignPosition[alignPositionIndex--] = pos;
 8001814:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001818:	1e5a      	subs	r2, r3, #1
 800181a:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 800181e:	4619      	mov	r1, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001826:	545a      	strb	r2, [r3, r1]
        for (uint8_t i = 0, pos = size - 7; i < alignCount - 1; i++, pos -= step) {
 8001828:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800182c:	3301      	adds	r3, #1
 800182e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001832:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001836:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001840:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001844:	7ffb      	ldrb	r3, [r7, #31]
 8001846:	3b01      	subs	r3, #1
 8001848:	429a      	cmp	r2, r3
 800184a:	dbe3      	blt.n	8001814 <drawFunctionPatterns+0x17c>
        }
        
        for (uint8_t i = 0; i < alignCount; i++) {
 800184c:	2300      	movs	r3, #0
 800184e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001852:	e03d      	b.n	80018d0 <drawFunctionPatterns+0x238>
            for (uint8_t j = 0; j < alignCount; j++) {
 8001854:	2300      	movs	r3, #0
 8001856:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800185a:	e02f      	b.n	80018bc <drawFunctionPatterns+0x224>
                if ((i == 0 && j == 0) || (i == 0 && j == alignCount - 1) || (i == alignCount - 1 && j == 0)) {
 800185c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <drawFunctionPatterns+0x1d4>
 8001864:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001868:	2b00      	cmp	r3, #0
 800186a:	d021      	beq.n	80018b0 <drawFunctionPatterns+0x218>
 800186c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001870:	2b00      	cmp	r3, #0
 8001872:	d105      	bne.n	8001880 <drawFunctionPatterns+0x1e8>
 8001874:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001878:	7ffb      	ldrb	r3, [r7, #31]
 800187a:	3b01      	subs	r3, #1
 800187c:	429a      	cmp	r2, r3
 800187e:	d017      	beq.n	80018b0 <drawFunctionPatterns+0x218>
 8001880:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001884:	7ffb      	ldrb	r3, [r7, #31]
 8001886:	3b01      	subs	r3, #1
 8001888:	429a      	cmp	r2, r3
 800188a:	d103      	bne.n	8001894 <drawFunctionPatterns+0x1fc>
 800188c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00d      	beq.n	80018b0 <drawFunctionPatterns+0x218>
                    continue;  // Skip the three finder corners
                } else {
                    drawAlignmentPattern(modules, isFunction, alignPosition[i], alignPosition[j]);
 8001894:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	5cd1      	ldrb	r1, [r2, r3]
 800189c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	460a      	mov	r2, r1
 80018a6:	68b9      	ldr	r1, [r7, #8]
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f7ff fd3c 	bl	8001326 <drawAlignmentPattern>
 80018ae:	e000      	b.n	80018b2 <drawFunctionPatterns+0x21a>
                    continue;  // Skip the three finder corners
 80018b0:	bf00      	nop
            for (uint8_t j = 0; j < alignCount; j++) {
 80018b2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80018b6:	3301      	adds	r3, #1
 80018b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80018bc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80018c0:	7ffb      	ldrb	r3, [r7, #31]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d3ca      	bcc.n	800185c <drawFunctionPatterns+0x1c4>
        for (uint8_t i = 0; i < alignCount; i++) {
 80018c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80018ca:	3301      	adds	r3, #1
 80018cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80018d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80018d4:	7ffb      	ldrb	r3, [r7, #31]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d3bc      	bcc.n	8001854 <drawFunctionPatterns+0x1bc>
 80018da:	46b5      	mov	sp, r6
    }
    
#endif
    
    // Draw configuration data
    drawFormatBits(modules, isFunction, ecc, 0);  // Dummy mask value; overwritten later in the constructor
 80018dc:	79ba      	ldrb	r2, [r7, #6]
 80018de:	2300      	movs	r3, #0
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f7ff fd6f 	bl	80013c6 <drawFormatBits>
    drawVersion(modules, isFunction, version);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f7ff fe66 	bl	80015c0 <drawVersion>
}
 80018f4:	bf00      	nop
 80018f6:	372c      	adds	r7, #44	; 0x2c
 80018f8:	46bd      	mov	sp, r7
 80018fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018fe:	bf00      	nop
 8001900:	24924925 	.word	0x24924925

08001904 <drawCodewords>:


// Draws the given sequence of 8-bit codewords (data and error correction) onto the entire
// data area of this QR Code symbol. Function modules need to be marked off before this is called.
static void drawCodewords(BitBucket *modules, BitBucket *isFunction, BitBucket *codewords) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
    
    uint32_t bitLength = codewords->bitOffsetOrWidth;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	61bb      	str	r3, [r7, #24]
    uint8_t *data = codewords->data;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	617b      	str	r3, [r7, #20]
    
    uint8_t size = modules->bitOffsetOrWidth;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	74fb      	strb	r3, [r7, #19]
    
    // Bit index into the data
    uint32_t i = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Do the funny zigzag scan
    for (int16_t right = size - 1; right >= 1; right -= 2) {  // Index of right column in each column pair
 8001926:	7cfb      	ldrb	r3, [r7, #19]
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29b      	uxth	r3, r3
 800192e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001930:	e06f      	b.n	8001a12 <drawCodewords+0x10e>
        if (right == 6) { right = 5; }
 8001932:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001936:	2b06      	cmp	r3, #6
 8001938:	d101      	bne.n	800193e <drawCodewords+0x3a>
 800193a:	2305      	movs	r3, #5
 800193c:	847b      	strh	r3, [r7, #34]	; 0x22
        
        for (uint8_t vert = 0; vert < size; vert++) {  // Vertical counter
 800193e:	2300      	movs	r3, #0
 8001940:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001944:	e05c      	b.n	8001a00 <drawCodewords+0xfc>
            for (int j = 0; j < 2; j++) {
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	e051      	b.n	80019f0 <drawCodewords+0xec>
                uint8_t x = right - j;  // Actual x coordinate
 800194c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800194e:	b2da      	uxtb	r2, r3
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	74bb      	strb	r3, [r7, #18]
                bool upwards = ((right & 2) == 0) ^ (x < 6);
 8001958:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	bf0c      	ite	eq
 8001962:	2301      	moveq	r3, #1
 8001964:	2300      	movne	r3, #0
 8001966:	b2db      	uxtb	r3, r3
 8001968:	b25a      	sxtb	r2, r3
 800196a:	7cbb      	ldrb	r3, [r7, #18]
 800196c:	2b05      	cmp	r3, #5
 800196e:	bf94      	ite	ls
 8001970:	2301      	movls	r3, #1
 8001972:	2300      	movhi	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	b25b      	sxtb	r3, r3
 8001978:	4053      	eors	r3, r2
 800197a:	b25b      	sxtb	r3, r3
 800197c:	747b      	strb	r3, [r7, #17]
                uint8_t y = upwards ? size - 1 - vert : vert;  // Actual y coordinate
 800197e:	7c7b      	ldrb	r3, [r7, #17]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <drawCodewords+0x90>
 8001984:	7cfa      	ldrb	r2, [r7, #19]
 8001986:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	3b01      	subs	r3, #1
 8001990:	b2db      	uxtb	r3, r3
 8001992:	e001      	b.n	8001998 <drawCodewords+0x94>
 8001994:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001998:	743b      	strb	r3, [r7, #16]
                if (!bb_getBit(isFunction, x, y) && i < bitLength) {
 800199a:	7c3a      	ldrb	r2, [r7, #16]
 800199c:	7cbb      	ldrb	r3, [r7, #18]
 800199e:	4619      	mov	r1, r3
 80019a0:	68b8      	ldr	r0, [r7, #8]
 80019a2:	f7ff fb0c 	bl	8000fbe <bb_getBit>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d11e      	bne.n	80019ea <drawCodewords+0xe6>
 80019ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d21a      	bcs.n	80019ea <drawCodewords+0xe6>
                    bb_setBit(modules, x, y, ((data[i >> 3] >> (7 - (i & 7))) & 1) != 0);
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	08db      	lsrs	r3, r3, #3
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	43db      	mvns	r3, r3
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	fa42 f303 	asr.w	r3, r2, r3
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf14      	ite	ne
 80019d4:	2301      	movne	r3, #1
 80019d6:	2300      	moveq	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	7c3a      	ldrb	r2, [r7, #16]
 80019dc:	7cb9      	ldrb	r1, [r7, #18]
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f7ff fa43 	bl	8000e6a <bb_setBit>
                    i++;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	3301      	adds	r3, #1
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
            for (int j = 0; j < 2; j++) {
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3301      	adds	r3, #1
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	ddaa      	ble.n	800194c <drawCodewords+0x48>
        for (uint8_t vert = 0; vert < size; vert++) {  // Vertical counter
 80019f6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80019fa:	3301      	adds	r3, #1
 80019fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001a00:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001a04:	7cfb      	ldrb	r3, [r7, #19]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d39d      	bcc.n	8001946 <drawCodewords+0x42>
    for (int16_t right = size - 1; right >= 1; right -= 2) {  // Index of right column in each column pair
 8001a0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a0c:	3b02      	subs	r3, #2
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	847b      	strh	r3, [r7, #34]	; 0x22
 8001a12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	dc8b      	bgt.n	8001932 <drawCodewords+0x2e>
                // If there are any remainder bits (0 to 7), they are already
                // set to 0/false/white when the grid of modules was initialized
            }
        }
    }
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	3728      	adds	r7, #40	; 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <getPenaltyScore>:
#define PENALTY_N4     10

// Calculates and returns the penalty score based on state of this QR Code's current modules.
// This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.
// @TODO: This can be optimized by working with the bytes instead of bits.
static uint32_t getPenaltyScore(BitBucket *modules) {
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b08d      	sub	sp, #52	; 0x34
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
    uint32_t result = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    uint8_t size = modules->bitOffsetOrWidth;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	75fb      	strb	r3, [r7, #23]
    
    // Adjacent modules in row having same color
    for (uint8_t y = 0; y < size; y++) {
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001a3c:	e049      	b.n	8001ad2 <getPenaltyScore+0xae>
        
        bool colorX = bb_getBit(modules, 0, y);
 8001a3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a42:	461a      	mov	r2, r3
 8001a44:	2100      	movs	r1, #0
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fab9 	bl	8000fbe <bb_getBit>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        for (uint8_t x = 1, runX = 1; x < size; x++) {
 8001a52:	2301      	movs	r3, #1
 8001a54:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001a5e:	e02e      	b.n	8001abe <getPenaltyScore+0x9a>
            bool cx = bb_getBit(modules, x, y);
 8001a60:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001a64:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a68:	4619      	mov	r1, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff faa7 	bl	8000fbe <bb_getBit>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73bb      	strb	r3, [r7, #14]
            if (cx != colorX) {
 8001a74:	7bba      	ldrb	r2, [r7, #14]
 8001a76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d006      	beq.n	8001a8c <getPenaltyScore+0x68>
                colorX = cx;
 8001a7e:	7bbb      	ldrb	r3, [r7, #14]
 8001a80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                runX = 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001a8a:	e013      	b.n	8001ab4 <getPenaltyScore+0x90>
                
            } else {
                runX++;
 8001a8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a90:	3301      	adds	r3, #1
 8001a92:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                if (runX == 5) {
 8001a96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d103      	bne.n	8001aa6 <getPenaltyScore+0x82>
                    result += PENALTY_N1;
 8001a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa0:	3303      	adds	r3, #3
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa4:	e006      	b.n	8001ab4 <getPenaltyScore+0x90>
                } else if (runX > 5) {
 8001aa6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001aaa:	2b05      	cmp	r3, #5
 8001aac:	d902      	bls.n	8001ab4 <getPenaltyScore+0x90>
                    result++;
 8001aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t x = 1, runX = 1; x < size; x++) {
 8001ab4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001abe:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d3cb      	bcc.n	8001a60 <getPenaltyScore+0x3c>
    for (uint8_t y = 0; y < size; y++) {
 8001ac8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001acc:	3301      	adds	r3, #1
 8001ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001ad2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d3b0      	bcc.n	8001a3e <getPenaltyScore+0x1a>
            }
        }
    }
    
    // Adjacent modules in column having same color
    for (uint8_t x = 0; x < size; x++) {
 8001adc:	2300      	movs	r3, #0
 8001ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ae2:	e049      	b.n	8001b78 <getPenaltyScore+0x154>
        bool colorY = bb_getBit(modules, x, 0);
 8001ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ae8:	2200      	movs	r2, #0
 8001aea:	4619      	mov	r1, r3
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff fa66 	bl	8000fbe <bb_getBit>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        for (uint8_t y = 1, runY = 1; y < size; y++) {
 8001af8:	2301      	movs	r3, #1
 8001afa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001afe:	2301      	movs	r3, #1
 8001b00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001b04:	e02e      	b.n	8001b64 <getPenaltyScore+0x140>
            bool cy = bb_getBit(modules, x, y);
 8001b06:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b0e:	4619      	mov	r1, r3
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fa54 	bl	8000fbe <bb_getBit>
 8001b16:	4603      	mov	r3, r0
 8001b18:	73fb      	strb	r3, [r7, #15]
            if (cy != colorY) {
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d006      	beq.n	8001b32 <getPenaltyScore+0x10e>
                colorY = cy;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                runY = 1;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001b30:	e013      	b.n	8001b5a <getPenaltyScore+0x136>
            } else {
                runY++;
 8001b32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b36:	3301      	adds	r3, #1
 8001b38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                if (runY == 5) {
 8001b3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d103      	bne.n	8001b4c <getPenaltyScore+0x128>
                    result += PENALTY_N1;
 8001b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b46:	3303      	adds	r3, #3
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b4a:	e006      	b.n	8001b5a <getPenaltyScore+0x136>
                } else if (runY > 5) {
 8001b4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b50:	2b05      	cmp	r3, #5
 8001b52:	d902      	bls.n	8001b5a <getPenaltyScore+0x136>
                    result++;
 8001b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b56:	3301      	adds	r3, #1
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t y = 1, runY = 1; y < size; y++) {
 8001b5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001b64:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d3cb      	bcc.n	8001b06 <getPenaltyScore+0xe2>
    for (uint8_t x = 0; x < size; x++) {
 8001b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b72:	3301      	adds	r3, #1
 8001b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d3b0      	bcc.n	8001ae4 <getPenaltyScore+0xc0>
                }
            }
        }
    }
    
    uint16_t black = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	847b      	strh	r3, [r7, #34]	; 0x22
    for (uint8_t y = 0; y < size; y++) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001b8c:	e08f      	b.n	8001cae <getPenaltyScore+0x28a>
        uint16_t bitsRow = 0, bitsCol = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	83fb      	strh	r3, [r7, #30]
 8001b92:	2300      	movs	r3, #0
 8001b94:	83bb      	strh	r3, [r7, #28]
        for (uint8_t x = 0; x < size; x++) {
 8001b96:	2300      	movs	r3, #0
 8001b98:	76fb      	strb	r3, [r7, #27]
 8001b9a:	e07e      	b.n	8001c9a <getPenaltyScore+0x276>
            bool color = bb_getBit(modules, x, y);
 8001b9c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001ba0:	7efb      	ldrb	r3, [r7, #27]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff fa0a 	bl	8000fbe <bb_getBit>
 8001baa:	4603      	mov	r3, r0
 8001bac:	74fb      	strb	r3, [r7, #19]

            // 2*2 blocks of modules having same color
            if (x > 0 && y > 0) {
 8001bae:	7efb      	ldrb	r3, [r7, #27]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d035      	beq.n	8001c20 <getPenaltyScore+0x1fc>
 8001bb4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d031      	beq.n	8001c20 <getPenaltyScore+0x1fc>
                bool colorUL = bb_getBit(modules, x - 1, y - 1);
 8001bbc:	7efb      	ldrb	r3, [r7, #27]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b2d9      	uxtb	r1, r3
 8001bc2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff f9f6 	bl	8000fbe <bb_getBit>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	74bb      	strb	r3, [r7, #18]
                bool colorUR = bb_getBit(modules, x, y - 1);
 8001bd6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	7efb      	ldrb	r3, [r7, #27]
 8001be0:	4619      	mov	r1, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff f9eb 	bl	8000fbe <bb_getBit>
 8001be8:	4603      	mov	r3, r0
 8001bea:	747b      	strb	r3, [r7, #17]
                bool colorL = bb_getBit(modules, x - 1, y);
 8001bec:	7efb      	ldrb	r3, [r7, #27]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff f9e0 	bl	8000fbe <bb_getBit>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	743b      	strb	r3, [r7, #16]
                if (color == colorUL && color == colorUR && color == colorL) {
 8001c02:	7cfa      	ldrb	r2, [r7, #19]
 8001c04:	7cbb      	ldrb	r3, [r7, #18]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d10a      	bne.n	8001c20 <getPenaltyScore+0x1fc>
 8001c0a:	7cfa      	ldrb	r2, [r7, #19]
 8001c0c:	7c7b      	ldrb	r3, [r7, #17]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d106      	bne.n	8001c20 <getPenaltyScore+0x1fc>
 8001c12:	7cfa      	ldrb	r2, [r7, #19]
 8001c14:	7c3b      	ldrb	r3, [r7, #16]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d102      	bne.n	8001c20 <getPenaltyScore+0x1fc>
                    result += PENALTY_N2;
 8001c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1c:	3303      	adds	r3, #3
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            // Finder-like pattern in rows and columns
            bitsRow = ((bitsRow << 1) & 0x7FF) | color;
 8001c20:	8bfb      	ldrh	r3, [r7, #30]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c2a:	b21a      	sxth	r2, r3
 8001c2c:	7cfb      	ldrb	r3, [r7, #19]
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	4313      	orrs	r3, r2
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	83fb      	strh	r3, [r7, #30]
            bitsCol = ((bitsCol << 1) & 0x7FF) | bb_getBit(modules, y, x);
 8001c36:	8bbb      	ldrh	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c40:	b21c      	sxth	r4, r3
 8001c42:	7efa      	ldrb	r2, [r7, #27]
 8001c44:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001c48:	4619      	mov	r1, r3
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff f9b7 	bl	8000fbe <bb_getBit>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	4323      	orrs	r3, r4
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	83bb      	strh	r3, [r7, #28]

            // Needs 11 bits accumulated
            if (x >= 10) {
 8001c5a:	7efb      	ldrb	r3, [r7, #27]
 8001c5c:	2b09      	cmp	r3, #9
 8001c5e:	d913      	bls.n	8001c88 <getPenaltyScore+0x264>
                if (bitsRow == 0x05D || bitsRow == 0x5D0) {
 8001c60:	8bfb      	ldrh	r3, [r7, #30]
 8001c62:	2b5d      	cmp	r3, #93	; 0x5d
 8001c64:	d003      	beq.n	8001c6e <getPenaltyScore+0x24a>
 8001c66:	8bfb      	ldrh	r3, [r7, #30]
 8001c68:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8001c6c:	d102      	bne.n	8001c74 <getPenaltyScore+0x250>
                    result += PENALTY_N3;
 8001c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c70:	3328      	adds	r3, #40	; 0x28
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                if (bitsCol == 0x05D || bitsCol == 0x5D0) {
 8001c74:	8bbb      	ldrh	r3, [r7, #28]
 8001c76:	2b5d      	cmp	r3, #93	; 0x5d
 8001c78:	d003      	beq.n	8001c82 <getPenaltyScore+0x25e>
 8001c7a:	8bbb      	ldrh	r3, [r7, #28]
 8001c7c:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8001c80:	d102      	bne.n	8001c88 <getPenaltyScore+0x264>
                    result += PENALTY_N3;
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	3328      	adds	r3, #40	; 0x28
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            // Balance of black and white modules
            if (color) { black++; }
 8001c88:	7cfb      	ldrb	r3, [r7, #19]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <getPenaltyScore+0x270>
 8001c8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c90:	3301      	adds	r3, #1
 8001c92:	847b      	strh	r3, [r7, #34]	; 0x22
        for (uint8_t x = 0; x < size; x++) {
 8001c94:	7efb      	ldrb	r3, [r7, #27]
 8001c96:	3301      	adds	r3, #1
 8001c98:	76fb      	strb	r3, [r7, #27]
 8001c9a:	7efa      	ldrb	r2, [r7, #27]
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	f4ff af7c 	bcc.w	8001b9c <getPenaltyScore+0x178>
    for (uint8_t y = 0; y < size; y++) {
 8001ca4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001cae:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001cb2:	7dfb      	ldrb	r3, [r7, #23]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	f4ff af6a 	bcc.w	8001b8e <getPenaltyScore+0x16a>
        }
    }

    // Find smallest k such that (45-5k)% <= dark/total <= (55+5k)%
    uint16_t total = size * size;
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	fb12 f303 	smulbb	r3, r2, r3
 8001cc6:	82bb      	strh	r3, [r7, #20]
    for (uint16_t k = 0; black * 20 < (9 - k) * total || black * 20 > (11 + k) * total; k++) {
 8001cc8:	2300      	movs	r3, #0
 8001cca:	833b      	strh	r3, [r7, #24]
 8001ccc:	e005      	b.n	8001cda <getPenaltyScore+0x2b6>
        result += PENALTY_N4;
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	330a      	adds	r3, #10
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint16_t k = 0; black * 20 < (9 - k) * total || black * 20 > (11 + k) * total; k++) {
 8001cd4:	8b3b      	ldrh	r3, [r7, #24]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	833b      	strh	r3, [r7, #24]
 8001cda:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	8b3b      	ldrh	r3, [r7, #24]
 8001ce8:	f1c3 0309 	rsb	r3, r3, #9
 8001cec:	8aba      	ldrh	r2, [r7, #20]
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	4299      	cmp	r1, r3
 8001cf4:	dbeb      	blt.n	8001cce <getPenaltyScore+0x2aa>
 8001cf6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4619      	mov	r1, r3
 8001d02:	8b3b      	ldrh	r3, [r7, #24]
 8001d04:	330b      	adds	r3, #11
 8001d06:	8aba      	ldrh	r2, [r7, #20]
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	4299      	cmp	r1, r3
 8001d0e:	dcde      	bgt.n	8001cce <getPenaltyScore+0x2aa>
    }
    
    return result;
 8001d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3734      	adds	r7, #52	; 0x34
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}

08001d1a <rs_multiply>:


//#pragma mark - Reed-Solomon Generator

static uint8_t rs_multiply(uint8_t x, uint8_t y) {
 8001d1a:	b480      	push	{r7}
 8001d1c:	b085      	sub	sp, #20
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	460a      	mov	r2, r1
 8001d24:	71fb      	strb	r3, [r7, #7]
 8001d26:	4613      	mov	r3, r2
 8001d28:	71bb      	strb	r3, [r7, #6]
    // Russian peasant multiplication
    // See: https://en.wikipedia.org/wiki/Ancient_Egyptian_multiplication
    uint16_t z = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	81fb      	strh	r3, [r7, #14]
    for (int8_t i = 7; i >= 0; i--) {
 8001d2e:	2307      	movs	r3, #7
 8001d30:	737b      	strb	r3, [r7, #13]
 8001d32:	e02c      	b.n	8001d8e <rs_multiply+0x74>
        z = (z << 1) ^ ((z >> 7) * 0x11D);
 8001d34:	89fb      	ldrh	r3, [r7, #14]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	89fb      	ldrh	r3, [r7, #14]
 8001d3c:	09db      	lsrs	r3, r3, #7
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4619      	mov	r1, r3
 8001d42:	00c9      	lsls	r1, r1, #3
 8001d44:	4419      	add	r1, r3
 8001d46:	0049      	lsls	r1, r1, #1
 8001d48:	440b      	add	r3, r1
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	0109      	lsls	r1, r1, #4
 8001d4e:	1acb      	subs	r3, r1, r3
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	4053      	eors	r3, r2
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	81fb      	strh	r3, [r7, #14]
        z ^= ((y >> i) & 1) * x;
 8001d5a:	79ba      	ldrb	r2, [r7, #6]
 8001d5c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d60:	fa42 f303 	asr.w	r3, r2, r3
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	fb12 f303 	smulbb	r3, r2, r3
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d7c:	4053      	eors	r3, r2
 8001d7e:	b21b      	sxth	r3, r3
 8001d80:	81fb      	strh	r3, [r7, #14]
    for (int8_t i = 7; i >= 0; i--) {
 8001d82:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	737b      	strb	r3, [r7, #13]
 8001d8e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	dace      	bge.n	8001d34 <rs_multiply+0x1a>
    }
    return z;
 8001d96:	89fb      	ldrh	r3, [r7, #14]
 8001d98:	b2db      	uxtb	r3, r3
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <rs_init>:

static void rs_init(uint8_t degree, uint8_t *coeff) {
 8001da6:	b590      	push	{r4, r7, lr}
 8001da8:	b085      	sub	sp, #20
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	6039      	str	r1, [r7, #0]
 8001db0:	71fb      	strb	r3, [r7, #7]
    memset(coeff, 0, degree);
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	461a      	mov	r2, r3
 8001db6:	2100      	movs	r1, #0
 8001db8:	6838      	ldr	r0, [r7, #0]
 8001dba:	f005 f913 	bl	8006fe4 <memset>
    coeff[degree - 1] = 1;
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
    
    // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),
    // drop the highest term, and store the rest of the coefficients in order of descending powers.
    // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).
    uint16_t root = 1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < degree; i++) {
 8001dce:	2300      	movs	r3, #0
 8001dd0:	737b      	strb	r3, [r7, #13]
 8001dd2:	e040      	b.n	8001e56 <rs_init+0xb0>
        // Multiply the current product by (x - r^i)
        for (uint8_t j = 0; j < degree; j++) {
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	733b      	strb	r3, [r7, #12]
 8001dd8:	e023      	b.n	8001e22 <rs_init+0x7c>
            coeff[j] = rs_multiply(coeff[j], root);
 8001dda:	7b3b      	ldrb	r3, [r7, #12]
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	7818      	ldrb	r0, [r3, #0]
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	b2d9      	uxtb	r1, r3
 8001de6:	7b3b      	ldrb	r3, [r7, #12]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	18d4      	adds	r4, r2, r3
 8001dec:	f7ff ff95 	bl	8001d1a <rs_multiply>
 8001df0:	4603      	mov	r3, r0
 8001df2:	7023      	strb	r3, [r4, #0]
            if (j + 1 < degree) {
 8001df4:	7b3b      	ldrb	r3, [r7, #12]
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	da0e      	bge.n	8001e1c <rs_init+0x76>
                coeff[j] ^= coeff[j + 1];
 8001dfe:	7b3b      	ldrb	r3, [r7, #12]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	7819      	ldrb	r1, [r3, #0]
 8001e06:	7b3b      	ldrb	r3, [r7, #12]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	781a      	ldrb	r2, [r3, #0]
 8001e10:	7b3b      	ldrb	r3, [r7, #12]
 8001e12:	6838      	ldr	r0, [r7, #0]
 8001e14:	4403      	add	r3, r0
 8001e16:	404a      	eors	r2, r1
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < degree; j++) {
 8001e1c:	7b3b      	ldrb	r3, [r7, #12]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	733b      	strb	r3, [r7, #12]
 8001e22:	7b3a      	ldrb	r2, [r7, #12]
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3d7      	bcc.n	8001dda <rs_init+0x34>
            }
        }
        root = (root << 1) ^ ((root >> 7) * 0x11D);  // Multiply by 0x02 mod GF(2^8/0x11D)
 8001e2a:	89fb      	ldrh	r3, [r7, #14]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	89fb      	ldrh	r3, [r7, #14]
 8001e32:	09db      	lsrs	r3, r3, #7
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	4619      	mov	r1, r3
 8001e38:	00c9      	lsls	r1, r1, #3
 8001e3a:	4419      	add	r1, r3
 8001e3c:	0049      	lsls	r1, r1, #1
 8001e3e:	440b      	add	r3, r1
 8001e40:	4619      	mov	r1, r3
 8001e42:	0109      	lsls	r1, r1, #4
 8001e44:	1acb      	subs	r3, r1, r3
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	4053      	eors	r3, r2
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < degree; i++) {
 8001e50:	7b7b      	ldrb	r3, [r7, #13]
 8001e52:	3301      	adds	r3, #1
 8001e54:	737b      	strb	r3, [r7, #13]
 8001e56:	7b7a      	ldrb	r2, [r7, #13]
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d3ba      	bcc.n	8001dd4 <rs_init+0x2e>
    }
}
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd90      	pop	{r4, r7, pc}

08001e68 <rs_getRemainder>:

static void rs_getRemainder(uint8_t degree, uint8_t *coeff, uint8_t *data, uint8_t length, uint8_t *result, uint8_t stride) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	461a      	mov	r2, r3
 8001e74:	4603      	mov	r3, r0
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	73bb      	strb	r3, [r7, #14]
    // Compute the remainder by performing polynomial division
    
    //for (uint8_t i = 0; i < degree; i++) { result[] = 0; }
    //memset(result, 0, degree);
    
    for (uint8_t i = 0; i < length; i++) {
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	75fb      	strb	r3, [r7, #23]
 8001e80:	e05b      	b.n	8001f3a <rs_getRemainder+0xd2>
        uint8_t factor = data[i] ^ result[0];
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	781a      	ldrb	r2, [r3, #0]
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	4053      	eors	r3, r2
 8001e90:	753b      	strb	r3, [r7, #20]
        for (uint8_t j = 1; j < degree; j++) {
 8001e92:	2301      	movs	r3, #1
 8001e94:	75bb      	strb	r3, [r7, #22]
 8001e96:	e015      	b.n	8001ec4 <rs_getRemainder+0x5c>
            result[(j - 1) * stride] = result[j * stride];
 8001e98:	7dbb      	ldrb	r3, [r7, #22]
 8001e9a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	441a      	add	r2, r3
 8001ea8:	7dbb      	ldrb	r3, [r7, #22]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	440b      	add	r3, r1
 8001eba:	7812      	ldrb	r2, [r2, #0]
 8001ebc:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 1; j < degree; j++) {
 8001ebe:	7dbb      	ldrb	r3, [r7, #22]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	75bb      	strb	r3, [r7, #22]
 8001ec4:	7dba      	ldrb	r2, [r7, #22]
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d3e5      	bcc.n	8001e98 <rs_getRemainder+0x30>
        }
        result[(degree - 1) * stride] = 0;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ed4:	fb02 f303 	mul.w	r3, r2, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	4413      	add	r3, r2
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
        
        for (uint8_t j = 0; j < degree; j++) {
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	757b      	strb	r3, [r7, #21]
 8001ee6:	e021      	b.n	8001f2c <rs_getRemainder+0xc4>
            result[j * stride] ^= rs_multiply(coeff[j], factor);
 8001ee8:	7d7b      	ldrb	r3, [r7, #21]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	4413      	add	r3, r2
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	7d3a      	ldrb	r2, [r7, #20]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff10 	bl	8001d1a <rs_multiply>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4618      	mov	r0, r3
 8001efe:	7d7b      	ldrb	r3, [r7, #21]
 8001f00:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f04:	fb02 f303 	mul.w	r3, r2, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	781a      	ldrb	r2, [r3, #0]
 8001f10:	7d7b      	ldrb	r3, [r7, #21]
 8001f12:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001f16:	fb01 f303 	mul.w	r3, r1, r3
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	440b      	add	r3, r1
 8001f20:	4042      	eors	r2, r0
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < degree; j++) {
 8001f26:	7d7b      	ldrb	r3, [r7, #21]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	757b      	strb	r3, [r7, #21]
 8001f2c:	7d7a      	ldrb	r2, [r7, #21]
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d3d9      	bcc.n	8001ee8 <rs_getRemainder+0x80>
    for (uint8_t i = 0; i < length; i++) {
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	3301      	adds	r3, #1
 8001f38:	75fb      	strb	r3, [r7, #23]
 8001f3a:	7dfa      	ldrb	r2, [r7, #23]
 8001f3c:	7bbb      	ldrb	r3, [r7, #14]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d39f      	bcc.n	8001e82 <rs_getRemainder+0x1a>
        }
    }
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <encodeDataCodewords>:



//#pragma mark - QrCode

static int8_t encodeDataCodewords(BitBucket *dataCodewords, const uint8_t *text, uint16_t length, uint8_t version) {
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	4611      	mov	r1, r2
 8001f58:	461a      	mov	r2, r3
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	80fb      	strh	r3, [r7, #6]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	717b      	strb	r3, [r7, #5]
    int8_t mode = MODE_BYTE;
 8001f62:	2302      	movs	r3, #2
 8001f64:	77fb      	strb	r3, [r7, #31]
    
    if (isNumeric((char*)text, length)) {
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	68b8      	ldr	r0, [r7, #8]
 8001f6c:	f7fe fe8b 	bl	8000c86 <isNumeric>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d050      	beq.n	8002018 <encodeDataCodewords+0xcc>
        mode = MODE_NUMERIC;
 8001f76:	2300      	movs	r3, #0
 8001f78:	77fb      	strb	r3, [r7, #31]
        bb_appendBits(dataCodewords, 1 << MODE_NUMERIC, 4);
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7fe ff32 	bl	8000de8 <bb_appendBits>
        bb_appendBits(dataCodewords, length, getModeBits(version, MODE_NUMERIC));
 8001f84:	88fc      	ldrh	r4, [r7, #6]
 8001f86:	797b      	ldrb	r3, [r7, #5]
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fe9c 	bl	8000cc8 <getModeBits>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	4621      	mov	r1, r4
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f7fe ff26 	bl	8000de8 <bb_appendBits>

        uint16_t accumData = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	83bb      	strh	r3, [r7, #28]
        uint8_t accumCount = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	76fb      	strb	r3, [r7, #27]
        for (uint16_t i = 0; i < length; i++) {
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	833b      	strh	r3, [r7, #24]
 8001fa8:	e021      	b.n	8001fee <encodeDataCodewords+0xa2>
            accumData = accumData * 10 + ((char)(text[i]) - '0');
 8001faa:	8bbb      	ldrh	r3, [r7, #28]
 8001fac:	461a      	mov	r2, r3
 8001fae:	0092      	lsls	r2, r2, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	8b3b      	ldrh	r3, [r7, #24]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	440b      	add	r3, r1
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3b30      	subs	r3, #48	; 0x30
 8001fc6:	83bb      	strh	r3, [r7, #28]
            accumCount++;
 8001fc8:	7efb      	ldrb	r3, [r7, #27]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	76fb      	strb	r3, [r7, #27]
            if (accumCount == 3) {
 8001fce:	7efb      	ldrb	r3, [r7, #27]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d109      	bne.n	8001fe8 <encodeDataCodewords+0x9c>
                bb_appendBits(dataCodewords, accumData, 10);
 8001fd4:	8bbb      	ldrh	r3, [r7, #28]
 8001fd6:	220a      	movs	r2, #10
 8001fd8:	4619      	mov	r1, r3
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f7fe ff04 	bl	8000de8 <bb_appendBits>
                accumData = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	83bb      	strh	r3, [r7, #28]
                accumCount = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	76fb      	strb	r3, [r7, #27]
        for (uint16_t i = 0; i < length; i++) {
 8001fe8:	8b3b      	ldrh	r3, [r7, #24]
 8001fea:	3301      	adds	r3, #1
 8001fec:	833b      	strh	r3, [r7, #24]
 8001fee:	8b3a      	ldrh	r2, [r7, #24]
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d3d9      	bcc.n	8001faa <encodeDataCodewords+0x5e>
            }
        }
        
        // 1 or 2 digits remaining
        if (accumCount > 0) {
 8001ff6:	7efb      	ldrb	r3, [r7, #27]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8087 	beq.w	800210c <encodeDataCodewords+0x1c0>
            bb_appendBits(dataCodewords, accumData, accumCount * 3 + 1);
 8001ffe:	8bb9      	ldrh	r1, [r7, #28]
 8002000:	7efb      	ldrb	r3, [r7, #27]
 8002002:	461a      	mov	r2, r3
 8002004:	0052      	lsls	r2, r2, #1
 8002006:	4413      	add	r3, r2
 8002008:	b2db      	uxtb	r3, r3
 800200a:	3301      	adds	r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7fe fee9 	bl	8000de8 <bb_appendBits>
 8002016:	e079      	b.n	800210c <encodeDataCodewords+0x1c0>
        }
        
    } else if (isAlphanumeric((char*)text, length)) {
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	4619      	mov	r1, r3
 800201c:	68b8      	ldr	r0, [r7, #8]
 800201e:	f7fe fe13 	bl	8000c48 <isAlphanumeric>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d04d      	beq.n	80020c4 <encodeDataCodewords+0x178>
        mode = MODE_ALPHANUMERIC;
 8002028:	2301      	movs	r3, #1
 800202a:	77fb      	strb	r3, [r7, #31]
        bb_appendBits(dataCodewords, 1 << MODE_ALPHANUMERIC, 4);
 800202c:	2204      	movs	r2, #4
 800202e:	2102      	movs	r1, #2
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f7fe fed9 	bl	8000de8 <bb_appendBits>
        bb_appendBits(dataCodewords, length, getModeBits(version, MODE_ALPHANUMERIC));
 8002036:	88fc      	ldrh	r4, [r7, #6]
 8002038:	797b      	ldrb	r3, [r7, #5]
 800203a:	2101      	movs	r1, #1
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fe43 	bl	8000cc8 <getModeBits>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	4621      	mov	r1, r4
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f7fe fecd 	bl	8000de8 <bb_appendBits>

        uint16_t accumData = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	82fb      	strh	r3, [r7, #22]
        uint8_t accumCount = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	757b      	strb	r3, [r7, #21]
        for (uint16_t i = 0; i  < length; i++) {
 8002056:	2300      	movs	r3, #0
 8002058:	827b      	strh	r3, [r7, #18]
 800205a:	e025      	b.n	80020a8 <encodeDataCodewords+0x15c>
            accumData = accumData * 45 + getAlphanumeric((char)(text[i]));
 800205c:	8afb      	ldrh	r3, [r7, #22]
 800205e:	461a      	mov	r2, r3
 8002060:	0052      	lsls	r2, r2, #1
 8002062:	4413      	add	r3, r2
 8002064:	461a      	mov	r2, r3
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	b29c      	uxth	r4, r3
 800206c:	8a7b      	ldrh	r3, [r7, #18]
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	4413      	add	r3, r2
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fd75 	bl	8000b64 <getAlphanumeric>
 800207a:	4603      	mov	r3, r0
 800207c:	b29b      	uxth	r3, r3
 800207e:	4423      	add	r3, r4
 8002080:	82fb      	strh	r3, [r7, #22]
            accumCount++;
 8002082:	7d7b      	ldrb	r3, [r7, #21]
 8002084:	3301      	adds	r3, #1
 8002086:	757b      	strb	r3, [r7, #21]
            if (accumCount == 2) {
 8002088:	7d7b      	ldrb	r3, [r7, #21]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d109      	bne.n	80020a2 <encodeDataCodewords+0x156>
                bb_appendBits(dataCodewords, accumData, 11);
 800208e:	8afb      	ldrh	r3, [r7, #22]
 8002090:	220b      	movs	r2, #11
 8002092:	4619      	mov	r1, r3
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f7fe fea7 	bl	8000de8 <bb_appendBits>
                accumData = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	82fb      	strh	r3, [r7, #22]
                accumCount = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	757b      	strb	r3, [r7, #21]
        for (uint16_t i = 0; i  < length; i++) {
 80020a2:	8a7b      	ldrh	r3, [r7, #18]
 80020a4:	3301      	adds	r3, #1
 80020a6:	827b      	strh	r3, [r7, #18]
 80020a8:	8a7a      	ldrh	r2, [r7, #18]
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d3d5      	bcc.n	800205c <encodeDataCodewords+0x110>
            }
        }
        
        // 1 character remaining
        if (accumCount > 0) {
 80020b0:	7d7b      	ldrb	r3, [r7, #21]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d02a      	beq.n	800210c <encodeDataCodewords+0x1c0>
            bb_appendBits(dataCodewords, accumData, 6);
 80020b6:	8afb      	ldrh	r3, [r7, #22]
 80020b8:	2206      	movs	r2, #6
 80020ba:	4619      	mov	r1, r3
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7fe fe93 	bl	8000de8 <bb_appendBits>
 80020c2:	e023      	b.n	800210c <encodeDataCodewords+0x1c0>
        }
        
    } else {
        bb_appendBits(dataCodewords, 1 << MODE_BYTE, 4);
 80020c4:	2204      	movs	r2, #4
 80020c6:	2104      	movs	r1, #4
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7fe fe8d 	bl	8000de8 <bb_appendBits>
        bb_appendBits(dataCodewords, length, getModeBits(version, MODE_BYTE));
 80020ce:	88fc      	ldrh	r4, [r7, #6]
 80020d0:	797b      	ldrb	r3, [r7, #5]
 80020d2:	2102      	movs	r1, #2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fdf7 	bl	8000cc8 <getModeBits>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	4621      	mov	r1, r4
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f7fe fe81 	bl	8000de8 <bb_appendBits>
        for (uint16_t i = 0; i < length; i++) {
 80020e6:	2300      	movs	r3, #0
 80020e8:	823b      	strh	r3, [r7, #16]
 80020ea:	e00b      	b.n	8002104 <encodeDataCodewords+0x1b8>
            bb_appendBits(dataCodewords, (char)(text[i]), 8);
 80020ec:	8a3b      	ldrh	r3, [r7, #16]
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	4413      	add	r3, r2
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2208      	movs	r2, #8
 80020f6:	4619      	mov	r1, r3
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f7fe fe75 	bl	8000de8 <bb_appendBits>
        for (uint16_t i = 0; i < length; i++) {
 80020fe:	8a3b      	ldrh	r3, [r7, #16]
 8002100:	3301      	adds	r3, #1
 8002102:	823b      	strh	r3, [r7, #16]
 8002104:	8a3a      	ldrh	r2, [r7, #16]
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	429a      	cmp	r2, r3
 800210a:	d3ef      	bcc.n	80020ec <encodeDataCodewords+0x1a0>
        }
    }
    
    //bb_setBits(dataCodewords, length, 4, getModeBits(version, mode));
    
    return mode;
 800210c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3724      	adds	r7, #36	; 0x24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd90      	pop	{r4, r7, pc}

08002118 <performErrorCorrection>:

static void performErrorCorrection(uint8_t version, uint8_t ecc, BitBucket *data) {
 8002118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800211c:	b093      	sub	sp, #76	; 0x4c
 800211e:	af02      	add	r7, sp, #8
 8002120:	4603      	mov	r3, r0
 8002122:	60ba      	str	r2, [r7, #8]
 8002124:	73fb      	strb	r3, [r7, #15]
 8002126:	460b      	mov	r3, r1
 8002128:	73bb      	strb	r3, [r7, #14]
 800212a:	466b      	mov	r3, sp
 800212c:	461e      	mov	r6, r3
    
    // See: http://www.thonky.com/qr-code-tutorial/structure-final-message
    
#if LOCK_VERSION == 0
    uint8_t numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecc][version - 1];
 800212e:	7bba      	ldrb	r2, [r7, #14]
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	1e59      	subs	r1, r3, #1
 8002134:	48b4      	ldr	r0, [pc, #720]	; (8002408 <performErrorCorrection+0x2f0>)
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4403      	add	r3, r0
 8002140:	440b      	add	r3, r1
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t totalEcc = NUM_ERROR_CORRECTION_CODEWORDS[ecc][version - 1];
 8002148:	7bba      	ldrb	r2, [r7, #14]
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	1e59      	subs	r1, r3, #1
 800214e:	48af      	ldr	r0, [pc, #700]	; (800240c <performErrorCorrection+0x2f4>)
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800215e:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t moduleCount = NUM_RAW_DATA_MODULES[version - 1];
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	3b01      	subs	r3, #1
 8002164:	4aaa      	ldr	r2, [pc, #680]	; (8002410 <performErrorCorrection+0x2f8>)
 8002166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800216a:	853b      	strh	r3, [r7, #40]	; 0x28
    uint8_t numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecc];
    uint16_t totalEcc = NUM_ERROR_CORRECTION_CODEWORDS[ecc];
    uint16_t moduleCount = NUM_RAW_DATA_MODULES;
#endif
    
    uint8_t blockEccLen = totalEcc / numBlocks;
 800216c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800216e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002172:	fb92 f3f3 	sdiv	r3, r2, r3
 8002176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t numShortBlocks = numBlocks - moduleCount / 8 % numBlocks;
 800217a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800217c:	08db      	lsrs	r3, r3, #3
 800217e:	b29b      	uxth	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002186:	fb92 f1f3 	sdiv	r1, r2, r3
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t shortBlockLen = moduleCount / 8 / numBlocks;
 800219c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800219e:	08db      	lsrs	r3, r3, #3
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80021ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    
    uint8_t shortDataBlockLen = shortBlockLen - blockEccLen;
 80021b0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80021b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    
    uint8_t result[data->capacityBytes];
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	8899      	ldrh	r1, [r3, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	3b01      	subs	r3, #1
 80021c6:	623b      	str	r3, [r7, #32]
 80021c8:	b28b      	uxth	r3, r1
 80021ca:	2200      	movs	r2, #0
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	00c3      	lsls	r3, r0, #3
 80021dc:	6838      	ldr	r0, [r7, #0]
 80021de:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80021e2:	6838      	ldr	r0, [r7, #0]
 80021e4:	00c2      	lsls	r2, r0, #3
 80021e6:	b28b      	uxth	r3, r1
 80021e8:	2200      	movs	r2, #0
 80021ea:	469a      	mov	sl, r3
 80021ec:	4693      	mov	fp, r2
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002202:	460b      	mov	r3, r1
 8002204:	3307      	adds	r3, #7
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	ebad 0d03 	sub.w	sp, sp, r3
 800220e:	ab02      	add	r3, sp, #8
 8002210:	3300      	adds	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
    memset(result, 0, sizeof(result));
 8002214:	460b      	mov	r3, r1
 8002216:	461a      	mov	r2, r3
 8002218:	2100      	movs	r1, #0
 800221a:	69f8      	ldr	r0, [r7, #28]
 800221c:	f004 fee2 	bl	8006fe4 <memset>
    
    uint8_t coeff[blockEccLen];
 8002220:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002224:	460b      	mov	r3, r1
 8002226:	3b01      	subs	r3, #1
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	b2cb      	uxtb	r3, r1
 800222c:	2200      	movs	r2, #0
 800222e:	4698      	mov	r8, r3
 8002230:	4691      	mov	r9, r2
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800223e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002242:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002246:	b2cb      	uxtb	r3, r1
 8002248:	2200      	movs	r2, #0
 800224a:	461c      	mov	r4, r3
 800224c:	4615      	mov	r5, r2
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	00eb      	lsls	r3, r5, #3
 8002258:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800225c:	00e2      	lsls	r2, r4, #3
 800225e:	460b      	mov	r3, r1
 8002260:	3307      	adds	r3, #7
 8002262:	08db      	lsrs	r3, r3, #3
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	ebad 0d03 	sub.w	sp, sp, r3
 800226a:	ab02      	add	r3, sp, #8
 800226c:	3300      	adds	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
    rs_init(blockEccLen, coeff);
 8002270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002274:	6979      	ldr	r1, [r7, #20]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fd95 	bl	8001da6 <rs_init>
    
    uint16_t offset = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	867b      	strh	r3, [r7, #50]	; 0x32
    uint8_t *dataBytes = data->data;
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	637b      	str	r3, [r7, #52]	; 0x34
    
    
    // Interleave all short blocks
    for (uint8_t i = 0; i < shortDataBlockLen; i++) {
 8002286:	2300      	movs	r3, #0
 8002288:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800228c:	e035      	b.n	80022fa <performErrorCorrection+0x1e2>
        uint16_t index = i;
 800228e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002292:	877b      	strh	r3, [r7, #58]	; 0x3a
        uint8_t stride = shortDataBlockLen;
 8002294:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002298:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 800229c:	2300      	movs	r3, #0
 800229e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80022a2:	e01f      	b.n	80022e4 <performErrorCorrection+0x1cc>
            result[offset++] = dataBytes[index];
 80022a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80022a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022a8:	441a      	add	r2, r3
 80022aa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80022ac:	1c59      	adds	r1, r3, #1
 80022ae:	8679      	strh	r1, [r7, #50]	; 0x32
 80022b0:	4619      	mov	r1, r3
 80022b2:	7812      	ldrb	r2, [r2, #0]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	545a      	strb	r2, [r3, r1]
            
#if LOCK_VERSION == 0 || LOCK_VERSION >= 5
            if (blockNum == numShortBlocks) { stride++; }
 80022b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80022bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d104      	bne.n	80022ce <performErrorCorrection+0x1b6>
 80022c4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80022c8:	3301      	adds	r3, #1
 80022ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
#endif
            index += stride;
 80022ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80022d6:	4413      	add	r3, r2
 80022d8:	877b      	strh	r3, [r7, #58]	; 0x3a
        for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 80022da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80022de:	3301      	adds	r3, #1
 80022e0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80022e4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80022e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d3d9      	bcc.n	80022a4 <performErrorCorrection+0x18c>
    for (uint8_t i = 0; i < shortDataBlockLen; i++) {
 80022f0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80022f4:	3301      	adds	r3, #1
 80022f6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80022fa:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80022fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002302:	429a      	cmp	r2, r3
 8002304:	d3c3      	bcc.n	800228e <performErrorCorrection+0x176>
    
    // Version less than 5 only have short blocks
#if LOCK_VERSION == 0 || LOCK_VERSION >= 5
    {
        // Interleave long blocks
        uint16_t index = shortDataBlockLen * (numShortBlocks + 1);
 8002306:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800230a:	b29a      	uxth	r2, r3
 800230c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002310:	3301      	adds	r3, #1
 8002312:	b29b      	uxth	r3, r3
 8002314:	fb12 f303 	smulbb	r3, r2, r3
 8002318:	87fb      	strh	r3, [r7, #62]	; 0x3e
        uint8_t stride = shortDataBlockLen;
 800231a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800231e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        for (uint8_t blockNum = 0; blockNum < numBlocks - numShortBlocks; blockNum++) {
 8002322:	2300      	movs	r3, #0
 8002324:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8002328:	e01d      	b.n	8002366 <performErrorCorrection+0x24e>
            result[offset++] = dataBytes[index];
 800232a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800232c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800232e:	441a      	add	r2, r3
 8002330:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002332:	1c59      	adds	r1, r3, #1
 8002334:	8679      	strh	r1, [r7, #50]	; 0x32
 8002336:	4619      	mov	r1, r3
 8002338:	7812      	ldrb	r2, [r2, #0]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	545a      	strb	r2, [r3, r1]
            
            if (blockNum == 0) { stride++; }
 800233e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002342:	2b00      	cmp	r3, #0
 8002344:	d104      	bne.n	8002350 <performErrorCorrection+0x238>
 8002346:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800234a:	3301      	adds	r3, #1
 800234c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            index += stride;
 8002350:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002354:	b29a      	uxth	r2, r3
 8002356:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002358:	4413      	add	r3, r2
 800235a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        for (uint8_t blockNum = 0; blockNum < numBlocks - numShortBlocks; blockNum++) {
 800235c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002360:	3301      	adds	r3, #1
 8002362:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8002366:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800236a:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800236e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002372:	1acb      	subs	r3, r1, r3
 8002374:	429a      	cmp	r2, r3
 8002376:	dbd8      	blt.n	800232a <performErrorCorrection+0x212>
        }
    }
#endif
    
    // Add all ecc blocks, interleaved
    uint8_t blockSize = shortDataBlockLen;
 8002378:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800237c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 8002380:	2300      	movs	r3, #0
 8002382:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002386:	e027      	b.n	80023d8 <performErrorCorrection+0x2c0>
        
#if LOCK_VERSION == 0 || LOCK_VERSION >= 5
        if (blockNum == numShortBlocks) { blockSize++; }
 8002388:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800238c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002390:	429a      	cmp	r2, r3
 8002392:	d104      	bne.n	800239e <performErrorCorrection+0x286>
 8002394:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002398:	3301      	adds	r3, #1
 800239a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif
        rs_getRemainder(blockEccLen, coeff, dataBytes, blockSize, &result[offset + blockNum], numBlocks);
 800239e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80023a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80023a4:	4413      	add	r3, r2
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	4413      	add	r3, r2
 80023aa:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80023ae:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 80023b2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80023b6:	9201      	str	r2, [sp, #4]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	460b      	mov	r3, r1
 80023bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023be:	6979      	ldr	r1, [r7, #20]
 80023c0:	f7ff fd52 	bl	8001e68 <rs_getRemainder>
        dataBytes += blockSize;
 80023c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023ca:	4413      	add	r3, r2
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
    for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 80023ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80023d2:	3301      	adds	r3, #1
 80023d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80023d8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80023dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d3d1      	bcc.n	8002388 <performErrorCorrection+0x270>
    }
    
    memcpy(data->data, result, data->capacityBytes);
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	6898      	ldr	r0, [r3, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	889b      	ldrh	r3, [r3, #4]
 80023ec:	461a      	mov	r2, r3
 80023ee:	69f9      	ldr	r1, [r7, #28]
 80023f0:	f004 fdea 	bl	8006fc8 <memcpy>
    data->bitOffsetOrWidth = moduleCount;
 80023f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	46b5      	mov	sp, r6
}
 80023fc:	bf00      	nop
 80023fe:	3744      	adds	r7, #68	; 0x44
 8002400:	46bd      	mov	sp, r7
 8002402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002406:	bf00      	nop
 8002408:	08007258 	.word	0x08007258
 800240c:	08007118 	.word	0x08007118
 8002410:	080072f8 	.word	0x080072f8

08002414 <qrcode_getBufferSize>:
static const uint8_t ECC_FORMAT_BITS = (0x02 << 6) | (0x03 << 4) | (0x00 << 2) | (0x01 << 0);


//#pragma mark - Public QRCode functions

uint16_t qrcode_getBufferSize(uint8_t version) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
    return bb_getGridSizeBytes(4 * version + 17);
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	b2db      	uxtb	r3, r3
 8002424:	3311      	adds	r3, #17
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fc7f 	bl	8000d2c <bb_getGridSizeBytes>
 800242e:	4603      	mov	r3, r0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <qrcode_initBytes>:

// @TODO: Return error if data is too big.
int8_t qrcode_initBytes(QRCode *qrcode, uint8_t *modules, uint8_t version, uint8_t ecc, uint8_t *data, uint16_t length) {
 8002438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800243c:	b09d      	sub	sp, #116	; 0x74
 800243e:	af00      	add	r7, sp, #0
 8002440:	6178      	str	r0, [r7, #20]
 8002442:	6139      	str	r1, [r7, #16]
 8002444:	4611      	mov	r1, r2
 8002446:	461a      	mov	r2, r3
 8002448:	460b      	mov	r3, r1
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	4613      	mov	r3, r2
 800244e:	73bb      	strb	r3, [r7, #14]
 8002450:	466b      	mov	r3, sp
 8002452:	60bb      	str	r3, [r7, #8]
    uint8_t size = version * 4 + 17;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	b2db      	uxtb	r3, r3
 800245a:	3311      	adds	r3, #17
 800245c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    qrcode->version = version;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	701a      	strb	r2, [r3, #0]
    qrcode->size = size;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800246c:	705a      	strb	r2, [r3, #1]
    qrcode->ecc = ecc;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	7bba      	ldrb	r2, [r7, #14]
 8002472:	709a      	strb	r2, [r3, #2]
    qrcode->modules = modules;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	609a      	str	r2, [r3, #8]
    
    uint8_t eccFormatBits = (ECC_FORMAT_BITS >> (2 * ecc)) & 0x03;
 800247a:	23b1      	movs	r3, #177	; 0xb1
 800247c:	461a      	mov	r2, r3
 800247e:	7bbb      	ldrb	r3, [r7, #14]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	fa42 f303 	asr.w	r3, r2, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    
#if LOCK_VERSION == 0
    uint16_t moduleCount = NUM_RAW_DATA_MODULES[version - 1];
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	3b01      	subs	r3, #1
 8002494:	4aac      	ldr	r2, [pc, #688]	; (8002748 <qrcode_initBytes+0x310>)
 8002496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800249a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint16_t dataCapacity = moduleCount / 8 - NUM_ERROR_CORRECTION_CODEWORDS[eccFormatBits][version - 1];
 800249e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80024a2:	08db      	lsrs	r3, r3, #3
 80024a4:	b299      	uxth	r1, r3
 80024a6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	1e58      	subs	r0, r3, #1
 80024ae:	4ea7      	ldr	r6, [pc, #668]	; (800274c <qrcode_initBytes+0x314>)
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4403      	add	r3, r0
 80024ba:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80024be:	1acb      	subs	r3, r1, r3
 80024c0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    uint16_t moduleCount = NUM_RAW_DATA_MODULES;
    uint16_t dataCapacity = moduleCount / 8 - NUM_ERROR_CORRECTION_CODEWORDS[eccFormatBits];
#endif
    
    struct BitBucket codewords;
    uint8_t codewordBytes[bb_getBufferSizeBytes(moduleCount)];
 80024c4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fc44 	bl	8000d56 <bb_getBufferSizeBytes>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4619      	mov	r1, r3
 80024d2:	460b      	mov	r3, r1
 80024d4:	3b01      	subs	r3, #1
 80024d6:	657b      	str	r3, [r7, #84]	; 0x54
 80024d8:	b28b      	uxth	r3, r1
 80024da:	2200      	movs	r2, #0
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	00c3      	lsls	r3, r0, #3
 80024ec:	6838      	ldr	r0, [r7, #0]
 80024ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80024f2:	6838      	ldr	r0, [r7, #0]
 80024f4:	00c2      	lsls	r2, r0, #3
 80024f6:	b28b      	uxth	r3, r1
 80024f8:	2200      	movs	r2, #0
 80024fa:	469a      	mov	sl, r3
 80024fc:	4693      	mov	fp, r2
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800250a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800250e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002512:	460b      	mov	r3, r1
 8002514:	3307      	adds	r3, #7
 8002516:	08db      	lsrs	r3, r3, #3
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	ebad 0d03 	sub.w	sp, sp, r3
 800251e:	466b      	mov	r3, sp
 8002520:	3300      	adds	r3, #0
 8002522:	653b      	str	r3, [r7, #80]	; 0x50
    bb_initBuffer(&codewords, codewordBytes, (int32_t)sizeof(codewordBytes));
 8002524:	460a      	mov	r2, r1
 8002526:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800252a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fc20 	bl	8000d72 <bb_initBuffer>
    
    // Place the data code words into the buffer
    int8_t mode = encodeDataCodewords(&codewords, data, length, version);
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002538:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800253c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002540:	f7ff fd04 	bl	8001f4c <encodeDataCodewords>
 8002544:	4603      	mov	r3, r0
 8002546:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
    if (mode < 0) { return -1; }
 800254a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800254e:	2b00      	cmp	r3, #0
 8002550:	da02      	bge.n	8002558 <qrcode_initBytes+0x120>
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
 8002556:	e0ef      	b.n	8002738 <qrcode_initBytes+0x300>
    qrcode->mode = mode;
 8002558:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	70da      	strb	r2, [r3, #3]
    
    // Add terminator and pad up to a byte if applicable
    uint32_t padding = (dataCapacity * 8) - codewords.bitOffsetOrWidth;
 8002560:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	461a      	mov	r2, r3
 8002568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	663b      	str	r3, [r7, #96]	; 0x60
    if (padding > 4) { padding = 4; }
 800256e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002570:	2b04      	cmp	r3, #4
 8002572:	d901      	bls.n	8002578 <qrcode_initBytes+0x140>
 8002574:	2304      	movs	r3, #4
 8002576:	663b      	str	r3, [r7, #96]	; 0x60
    bb_appendBits(&codewords, 0, padding);
 8002578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800257a:	b2da      	uxtb	r2, r3
 800257c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fc30 	bl	8000de8 <bb_appendBits>
    bb_appendBits(&codewords, 0, (8 - codewords.bitOffsetOrWidth % 8) % 8);
 8002588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258a:	b2db      	uxtb	r3, r3
 800258c:	425b      	negs	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	b2da      	uxtb	r2, r3
 8002596:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe fc23 	bl	8000de8 <bb_appendBits>

    // Pad with alternate bytes until data capacity is reached
    for (uint8_t padByte = 0xEC; codewords.bitOffsetOrWidth < (dataCapacity * 8); padByte ^= 0xEC ^ 0x11) {
 80025a2:	23ec      	movs	r3, #236	; 0xec
 80025a4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80025a8:	e00e      	b.n	80025c8 <qrcode_initBytes+0x190>
        bb_appendBits(&codewords, padByte, 8);
 80025aa:	f897 1066 	ldrb.w	r1, [r7, #102]	; 0x66
 80025ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025b2:	2208      	movs	r2, #8
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fc17 	bl	8000de8 <bb_appendBits>
    for (uint8_t padByte = 0xEC; codewords.bitOffsetOrWidth < (dataCapacity * 8); padByte ^= 0xEC ^ 0x11) {
 80025ba:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80025be:	f083 0302 	eor.w	r3, r3, #2
 80025c2:	43db      	mvns	r3, r3
 80025c4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80025c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ca:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80025ce:	00d2      	lsls	r2, r2, #3
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d3ea      	bcc.n	80025aa <qrcode_initBytes+0x172>
    }

    BitBucket modulesGrid;
    bb_initGrid(&modulesGrid, modules, size);
 80025d4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80025d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025dc:	6939      	ldr	r1, [r7, #16]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fbe2 	bl	8000da8 <bb_initGrid>
    
    BitBucket isFunctionGrid;
    uint8_t isFunctionGridBytes[bb_getGridSizeBytes(size)];
 80025e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fb9f 	bl	8000d2c <bb_getGridSizeBytes>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4619      	mov	r1, r3
 80025f2:	466b      	mov	r3, sp
 80025f4:	461e      	mov	r6, r3
 80025f6:	460b      	mov	r3, r1
 80025f8:	3b01      	subs	r3, #1
 80025fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80025fc:	b28b      	uxth	r3, r1
 80025fe:	2200      	movs	r2, #0
 8002600:	4698      	mov	r8, r3
 8002602:	4691      	mov	r9, r2
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002610:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002614:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002618:	b28b      	uxth	r3, r1
 800261a:	2200      	movs	r2, #0
 800261c:	461c      	mov	r4, r3
 800261e:	4615      	mov	r5, r2
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	00eb      	lsls	r3, r5, #3
 800262a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800262e:	00e2      	lsls	r2, r4, #3
 8002630:	460b      	mov	r3, r1
 8002632:	3307      	adds	r3, #7
 8002634:	08db      	lsrs	r3, r3, #3
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	ebad 0d03 	sub.w	sp, sp, r3
 800263c:	466b      	mov	r3, sp
 800263e:	3300      	adds	r3, #0
 8002640:	647b      	str	r3, [r7, #68]	; 0x44
    bb_initGrid(&isFunctionGrid, isFunctionGridBytes, size);
 8002642:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8002646:	f107 031c 	add.w	r3, r7, #28
 800264a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fbab 	bl	8000da8 <bb_initGrid>
    
    // Draw function patterns, draw all codewords, do masking
    drawFunctionPatterns(&modulesGrid, &isFunctionGrid, version, eccFormatBits);
 8002652:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	f107 011c 	add.w	r1, r7, #28
 800265c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002660:	f7ff f81a 	bl	8001698 <drawFunctionPatterns>
    performErrorCorrection(version, eccFormatBits, &codewords);
 8002664:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002668:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fd52 	bl	8002118 <performErrorCorrection>
    drawCodewords(&modulesGrid, &isFunctionGrid, &codewords);
 8002674:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002678:	f107 011c 	add.w	r1, r7, #28
 800267c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff f93f 	bl	8001904 <drawCodewords>
    
    // Find the best (lowest penalty) mask
    uint8_t mask = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    int32_t minPenalty = INT32_MAX;
 800268c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002690:	66bb      	str	r3, [r7, #104]	; 0x68
    for (uint8_t i = 0; i < 8; i++) {
 8002692:	2300      	movs	r3, #0
 8002694:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002698:	e031      	b.n	80026fe <qrcode_initBytes+0x2c6>
        drawFormatBits(&modulesGrid, &isFunctionGrid, eccFormatBits, i);
 800269a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800269e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80026a2:	f107 011c 	add.w	r1, r7, #28
 80026a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80026aa:	f7fe fe8c 	bl	80013c6 <drawFormatBits>
        applyMask(&modulesGrid, &isFunctionGrid, i);
 80026ae:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80026b2:	f107 011c 	add.w	r1, r7, #28
 80026b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fcaa 	bl	8001014 <applyMask>
        int penalty = getPenaltyScore(&modulesGrid);
 80026c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff f9ad 	bl	8001a24 <getPenaltyScore>
 80026ca:	4603      	mov	r3, r0
 80026cc:	643b      	str	r3, [r7, #64]	; 0x40
        if (penalty < minPenalty) {
 80026ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026d2:	429a      	cmp	r2, r3
 80026d4:	da05      	bge.n	80026e2 <qrcode_initBytes+0x2aa>
            mask = i;
 80026d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80026da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            minPenalty = penalty;
 80026de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e0:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        applyMask(&modulesGrid, &isFunctionGrid, i);  // Undoes the mask due to XOR
 80026e2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80026e6:	f107 011c 	add.w	r1, r7, #28
 80026ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fc90 	bl	8001014 <applyMask>
    for (uint8_t i = 0; i < 8; i++) {
 80026f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80026f8:	3301      	adds	r3, #1
 80026fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80026fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002702:	2b07      	cmp	r3, #7
 8002704:	d9c9      	bls.n	800269a <qrcode_initBytes+0x262>
    }
    
    qrcode->mask = mask;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800270c:	711a      	strb	r2, [r3, #4]
    
    // Overwrite old format bits
    drawFormatBits(&modulesGrid, &isFunctionGrid, eccFormatBits, mask);
 800270e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002712:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8002716:	f107 011c 	add.w	r1, r7, #28
 800271a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800271e:	f7fe fe52 	bl	80013c6 <drawFormatBits>
    
    // Apply the final choice of mask
    applyMask(&modulesGrid, &isFunctionGrid, mask);
 8002722:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8002726:	f107 011c 	add.w	r1, r7, #28
 800272a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fc70 	bl	8001014 <applyMask>

    return 0;
 8002734:	2300      	movs	r3, #0
 8002736:	46b5      	mov	sp, r6
 8002738:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3774      	adds	r7, #116	; 0x74
 8002740:	46bd      	mov	sp, r7
 8002742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002746:	bf00      	nop
 8002748:	080072f8 	.word	0x080072f8
 800274c:	08007118 	.word	0x08007118

08002750 <qrcode_initText>:

int8_t qrcode_initText(QRCode *qrcode, uint8_t *modules, uint8_t version, uint8_t ecc, const char *data) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	4611      	mov	r1, r2
 800275c:	461a      	mov	r2, r3
 800275e:	460b      	mov	r3, r1
 8002760:	71fb      	strb	r3, [r7, #7]
 8002762:	4613      	mov	r3, r2
 8002764:	71bb      	strb	r3, [r7, #6]
    return qrcode_initBytes(qrcode, modules, version, ecc, (uint8_t*)data, strlen(data));
 8002766:	69b8      	ldr	r0, [r7, #24]
 8002768:	f7fd fd3e 	bl	80001e8 <strlen>
 800276c:	4603      	mov	r3, r0
 800276e:	b29b      	uxth	r3, r3
 8002770:	79b9      	ldrb	r1, [r7, #6]
 8002772:	79fa      	ldrb	r2, [r7, #7]
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	460b      	mov	r3, r1
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f7ff fe5a 	bl	8002438 <qrcode_initBytes>
 8002784:	4603      	mov	r3, r0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <qrcode_getModule>:

bool qrcode_getModule(QRCode *qrcode, uint8_t x, uint8_t y) {
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	70fb      	strb	r3, [r7, #3]
 800279a:	4613      	mov	r3, r2
 800279c:	70bb      	strb	r3, [r7, #2]
    if (x < 0 || x >= qrcode->size || y < 0 || y >= qrcode->size) {
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	785b      	ldrb	r3, [r3, #1]
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d204      	bcs.n	80027b2 <qrcode_getModule+0x24>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	785b      	ldrb	r3, [r3, #1]
 80027ac:	78ba      	ldrb	r2, [r7, #2]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d301      	bcc.n	80027b6 <qrcode_getModule+0x28>
        return false;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e01b      	b.n	80027ee <qrcode_getModule+0x60>
    }

    uint32_t offset = y * qrcode->size + x;
 80027b6:	78bb      	ldrb	r3, [r7, #2]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	7852      	ldrb	r2, [r2, #1]
 80027bc:	fb03 f202 	mul.w	r2, r3, r2
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	4413      	add	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
    return (qrcode->modules[offset >> 3] & (1 << (7 - (offset & 0x07)))) != 0;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	08db      	lsrs	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	fa42 f303 	asr.w	r3, r2, r3
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <lcdInit>:
 * @brief  Initializes LCD
 * @param  None
 * @retval None
 */
void lcdInit(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af02      	add	r7, sp, #8
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
 8002802:	2100      	movs	r1, #0
 8002804:	480f      	ldr	r0, [pc, #60]	; (8002844 <lcdInit+0x48>)
 8002806:	f002 faf5 	bl	8004df4 <Ucglib4WireSWSPI_begin>
	ucg_ClearScreen(&ucg);
 800280a:	480e      	ldr	r0, [pc, #56]	; (8002844 <lcdInit+0x48>)
 800280c:	f002 fb39 	bl	8004e82 <ucg_ClearScreen>
	ucg_SetFont(&ucg, ucg_font_ncenR12_hr);
 8002810:	490d      	ldr	r1, [pc, #52]	; (8002848 <lcdInit+0x4c>)
 8002812:	480c      	ldr	r0, [pc, #48]	; (8002844 <lcdInit+0x48>)
 8002814:	f003 fb84 	bl	8005f20 <ucg_SetFont>
	ucg_SetColor(&ucg, 0, 255, 255, 255);//khoi tao mau chu la mau trang
 8002818:	23ff      	movs	r3, #255	; 0xff
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	23ff      	movs	r3, #255	; 0xff
 800281e:	22ff      	movs	r2, #255	; 0xff
 8002820:	2100      	movs	r1, #0
 8002822:	4808      	ldr	r0, [pc, #32]	; (8002844 <lcdInit+0x48>)
 8002824:	f003 fc5b 	bl	80060de <ucg_SetColor>
	ucg_SetColor(&ucg, 1, 0, 0, 0);// khoi tao mau backgroud la mau den
 8002828:	2300      	movs	r3, #0
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2300      	movs	r3, #0
 800282e:	2200      	movs	r2, #0
 8002830:	2101      	movs	r1, #1
 8002832:	4804      	ldr	r0, [pc, #16]	; (8002844 <lcdInit+0x48>)
 8002834:	f003 fc53 	bl	80060de <ucg_SetColor>
	ucg_SetRotate180(&ucg);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <lcdInit+0x48>)
 800283a:	f003 fd71 	bl	8006320 <ucg_SetRotate180>
}
 800283e:	bf00      	nop
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	200000e4 	.word	0x200000e4
 8002848:	08009c34 	.word	0x08009c34

0800284c <generateQRCode>:
 * @brief  Print qr_code in LCD
 * @param  data
 * @retval None
 */
void generateQRCode(char *pByData,uint8_t byDataLength)
{
 800284c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002850:	b091      	sub	sp, #68	; 0x44
 8002852:	af02      	add	r7, sp, #8
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	70fb      	strb	r3, [r7, #3]
 800285a:	466b      	mov	r3, sp
 800285c:	461e      	mov	r6, r3
	  // Create the QR code
	    QRCode qrcode;

	    const uint8_t byEcc = ECC_LEVEL;
 800285e:	2300      	movs	r3, #0
 8002860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	    const uint8_t byVersion = VERSION_OF_QR;
 8002864:	2303      	movs	r3, #3
 8002866:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	    uint8_t pbyQrcodeData[qrcode_getBufferSize(byVersion)];
 800286a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fdd0 	bl	8002414 <qrcode_getBufferSize>
 8002874:	4603      	mov	r3, r0
 8002876:	4619      	mov	r1, r3
 8002878:	460b      	mov	r3, r1
 800287a:	3b01      	subs	r3, #1
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287e:	b28b      	uxth	r3, r1
 8002880:	2200      	movs	r2, #0
 8002882:	4698      	mov	r8, r3
 8002884:	4691      	mov	r9, r2
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800289a:	b28b      	uxth	r3, r1
 800289c:	2200      	movs	r2, #0
 800289e:	461c      	mov	r4, r3
 80028a0:	4615      	mov	r5, r2
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	00eb      	lsls	r3, r5, #3
 80028ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028b0:	00e2      	lsls	r2, r4, #3
 80028b2:	460b      	mov	r3, r1
 80028b4:	3307      	adds	r3, #7
 80028b6:	08db      	lsrs	r3, r3, #3
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	ebad 0d03 	sub.w	sp, sp, r3
 80028be:	ab02      	add	r3, sp, #8
 80028c0:	3300      	adds	r3, #0
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28

	    checkDataLength(byDataLength, byEcc, byVersion);
 80028c4:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80028c8:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f93e 	bl	8002b50 <checkDataLength>

	    qrcode_initText(&qrcode, pbyQrcodeData, byVersion, byEcc, pByData);
 80028d4:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 80028d8:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80028dc:	f107 000c 	add.w	r0, r7, #12
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	460b      	mov	r3, r1
 80028e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028e8:	f7ff ff32 	bl	8002750 <qrcode_initText>

	    const uint8_t byXyScale = SCALE_ONE_PIXEL;
 80028ec:	2303      	movs	r3, #3
 80028ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	    const uint8_t byWidth = WIDTH_LCD;
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	    const uint8_t byHeight = HEIGHT_LCD;
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    uint8_t byXmax = byWidth/2;
 80028fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002902:	085b      	lsrs	r3, r3, #1
 8002904:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    uint8_t byYmax = byHeight/2;
 8002908:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800290c:	085b      	lsrs	r3, r3, #1
 800290e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	    uint8_t byOffset = (byXyScale*qrcode.size);
 8002912:	7b7b      	ldrb	r3, [r7, #13]
 8002914:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002918:	fb12 f303 	smulbb	r3, r2, r3
 800291c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	    uint8_t byX1 = byXmax - (byOffset/2);
 8002920:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    uint8_t byY1 = byYmax - (byOffset/2);
 8002932:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f887 3020 	strb.w	r3, [r7, #32]


	    uint8_t byPx1 = byX1;
 8002944:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002948:	77fb      	strb	r3, [r7, #31]
	    uint8_t byPy1 = byY1;
 800294a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800294e:	77bb      	strb	r3, [r7, #30]

	    uint8_t byPx2 = byPx1;
 8002950:	7ffb      	ldrb	r3, [r7, #31]
 8002952:	777b      	strb	r3, [r7, #29]
	    uint8_t byPy2 = byPy1;
 8002954:	7fbb      	ldrb	r3, [r7, #30]
 8002956:	773b      	strb	r3, [r7, #28]


	    //Clear LCD
	    lcdClearAxisY(byPy1,128);
 8002958:	7fbb      	ldrb	r3, [r7, #30]
 800295a:	2180      	movs	r1, #128	; 0x80
 800295c:	4618      	mov	r0, r3
 800295e:	f000 f88b 	bl	8002a78 <lcdClearAxisY>

	    // Top quiet zone
	    ucg_SetColor(&ucg, 0, 255, 255, 255);
 8002962:	23ff      	movs	r3, #255	; 0xff
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	23ff      	movs	r3, #255	; 0xff
 8002968:	22ff      	movs	r2, #255	; 0xff
 800296a:	2100      	movs	r1, #0
 800296c:	483c      	ldr	r0, [pc, #240]	; (8002a60 <generateQRCode+0x214>)
 800296e:	f003 fbb6 	bl	80060de <ucg_SetColor>
	    for (uint8_t y = 0; y < qrcode.size; y++) {
 8002972:	2300      	movs	r3, #0
 8002974:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002978:	e066      	b.n	8002a48 <generateQRCode+0x1fc>
	        for(uint8_t x = 0; x < qrcode.size; x++) {
 800297a:	2300      	movs	r3, #0
 800297c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002980:	e058      	b.n	8002a34 <generateQRCode+0x1e8>
	            bool mod = qrcode_getModule(&qrcode,x, y);
 8002982:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002986:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fefd 	bl	800278e <qrcode_getModule>
 8002994:	4603      	mov	r3, r0
 8002996:	76fb      	strb	r3, [r7, #27]
	            byPx1 = byX1 + x * byXyScale;
 8002998:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800299c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029a0:	fb12 f303 	smulbb	r3, r2, r3
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80029aa:	4413      	add	r3, r2
 80029ac:	77fb      	strb	r3, [r7, #31]
	            byPy1 = byX1 + y * byXyScale;
 80029ae:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80029b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029b6:	fb12 f303 	smulbb	r3, r2, r3
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80029c0:	4413      	add	r3, r2
 80029c2:	77bb      	strb	r3, [r7, #30]
	            byPx2 = byPx1 + byXyScale;
 80029c4:	7ffa      	ldrb	r2, [r7, #31]
 80029c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ca:	4413      	add	r3, r2
 80029cc:	777b      	strb	r3, [r7, #29]
	            byPy2 = byPy1 + byXyScale;
 80029ce:	7fba      	ldrb	r2, [r7, #30]
 80029d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029d4:	4413      	add	r3, r2
 80029d6:	773b      	strb	r3, [r7, #28]
	            if(mod){
 80029d8:	7efb      	ldrb	r3, [r7, #27]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d025      	beq.n	8002a2a <generateQRCode+0x1de>
	            	for(uint8_t i =byPx1;i<=byPx2;i++)
 80029de:	7ffb      	ldrb	r3, [r7, #31]
 80029e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80029e4:	e01c      	b.n	8002a20 <generateQRCode+0x1d4>
	            	{
	            		for(uint8_t k = byPy1; k<= byPy2;k++)
 80029e6:	7fbb      	ldrb	r3, [r7, #30]
 80029e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80029ec:	e00e      	b.n	8002a0c <generateQRCode+0x1c0>
	            		{
	            			ucg_DrawPixel(&ucg, i, k);
 80029ee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80029f2:	b21b      	sxth	r3, r3
 80029f4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80029f8:	b212      	sxth	r2, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	4818      	ldr	r0, [pc, #96]	; (8002a60 <generateQRCode+0x214>)
 80029fe:	f003 fb9c 	bl	800613a <ucg_DrawPixel>
	            		for(uint8_t k = byPy1; k<= byPy2;k++)
 8002a02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a06:	3301      	adds	r3, #1
 8002a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002a0c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002a10:	7f3b      	ldrb	r3, [r7, #28]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d9eb      	bls.n	80029ee <generateQRCode+0x1a2>
	            	for(uint8_t i =byPx1;i<=byPx2;i++)
 8002a16:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002a20:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002a24:	7f7b      	ldrb	r3, [r7, #29]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d9dd      	bls.n	80029e6 <generateQRCode+0x19a>
	        for(uint8_t x = 0; x < qrcode.size; x++) {
 8002a2a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002a34:	7b7b      	ldrb	r3, [r7, #13]
 8002a36:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d3a1      	bcc.n	8002982 <generateQRCode+0x136>
	    for (uint8_t y = 0; y < qrcode.size; y++) {
 8002a3e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002a42:	3301      	adds	r3, #1
 8002a44:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002a48:	7b7b      	ldrb	r3, [r7, #13]
 8002a4a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d393      	bcc.n	800297a <generateQRCode+0x12e>
 8002a52:	46b5      	mov	sp, r6

	            }
	        }
	    }

}
 8002a54:	bf00      	nop
 8002a56:	373c      	adds	r7, #60	; 0x3c
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a5e:	bf00      	nop
 8002a60:	200000e4 	.word	0x200000e4

08002a64 <lcdClear>:
 * @brief  Clear LCD
 * @param  None
 * @retval None
 */
void lcdClear(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
	ucg_ClearScreen(&ucg);
 8002a68:	4802      	ldr	r0, [pc, #8]	; (8002a74 <lcdClear+0x10>)
 8002a6a:	f002 fa0a 	bl	8004e82 <ucg_ClearScreen>
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200000e4 	.word	0x200000e4

08002a78 <lcdClearAxisY>:
void lcdClearAxisY(uint8_t byY1, uint8_t byY2)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	4603      	mov	r3, r0
 8002a80:	460a      	mov	r2, r1
 8002a82:	71fb      	strb	r3, [r7, #7]
 8002a84:	4613      	mov	r3, r2
 8002a86:	71bb      	strb	r3, [r7, #6]
	  ucg_SetColor(&ucg, 0, 0, 0, 0);
 8002a88:	2300      	movs	r3, #0
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2100      	movs	r1, #0
 8002a92:	4812      	ldr	r0, [pc, #72]	; (8002adc <lcdClearAxisY+0x64>)
 8002a94:	f003 fb23 	bl	80060de <ucg_SetColor>
	  ucg_SetMaxClipRange(&ucg);
 8002a98:	4810      	ldr	r0, [pc, #64]	; (8002adc <lcdClearAxisY+0x64>)
 8002a9a:	f002 fd3c 	bl	8005516 <ucg_SetMaxClipRange>
	  ucg_DrawBox(&ucg, 0, (ucg_int_t)byY1, ucg_GetWidth(&ucg),(ucg_int_t) (byY2-byY1));
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	b219      	sxth	r1, r3
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <lcdClearAxisY+0x64>)
 8002aa4:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8002aa8:	79bb      	ldrb	r3, [r7, #6]
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	b21b      	sxth	r3, r3
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	4603      	mov	r3, r0
 8002aba:	460a      	mov	r2, r1
 8002abc:	2100      	movs	r1, #0
 8002abe:	4807      	ldr	r0, [pc, #28]	; (8002adc <lcdClearAxisY+0x64>)
 8002ac0:	f002 f9b4 	bl	8004e2c <ucg_DrawBox>
	  ucg_SetColor(&ucg, 0, 255, 255, 255);
 8002ac4:	23ff      	movs	r3, #255	; 0xff
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	23ff      	movs	r3, #255	; 0xff
 8002aca:	22ff      	movs	r2, #255	; 0xff
 8002acc:	2100      	movs	r1, #0
 8002ace:	4803      	ldr	r0, [pc, #12]	; (8002adc <lcdClearAxisY+0x64>)
 8002ad0:	f003 fb05 	bl	80060de <ucg_SetColor>
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200000e4 	.word	0x200000e4

08002ae0 <lcdPrintText>:
 * @brief  In Ra chuoi Str ra man hinh
 * @param
 * @retval None
 */
void lcdPrintText(char *str,uint8_t x,uint8_t y,const ucg_fntpgm_uint8_t *font)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b089      	sub	sp, #36	; 0x24
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	72fb      	strb	r3, [r7, #11]
 8002aee:	4613      	mov	r3, r2
 8002af0:	72bb      	strb	r3, [r7, #10]
	uint8_t byDelta = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	75bb      	strb	r3, [r7, #22]
	ucg_SetFont(&ucg, font);
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4814      	ldr	r0, [pc, #80]	; (8002b4c <lcdPrintText+0x6c>)
 8002afa:	f003 fa11 	bl	8005f20 <ucg_SetFont>
	for(uint8_t i = 0;i<strlen(str);i++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]
 8002b02:	e016      	b.n	8002b32 <lcdPrintText+0x52>
	{
		byDelta = ucg_DrawGlyph(&ucg, x, y , 0, (uint8_t)str[i]);
 8002b04:	7afb      	ldrb	r3, [r7, #11]
 8002b06:	b219      	sxth	r1, r3
 8002b08:	7abb      	ldrb	r3, [r7, #10]
 8002b0a:	b218      	sxth	r0, r3
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4413      	add	r3, r2
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	2300      	movs	r3, #0
 8002b18:	4602      	mov	r2, r0
 8002b1a:	480c      	ldr	r0, [pc, #48]	; (8002b4c <lcdPrintText+0x6c>)
 8002b1c:	f003 f920 	bl	8005d60 <ucg_DrawGlyph>
 8002b20:	4603      	mov	r3, r0
 8002b22:	75bb      	strb	r3, [r7, #22]

		x += byDelta;
 8002b24:	7afa      	ldrb	r2, [r7, #11]
 8002b26:	7dbb      	ldrb	r3, [r7, #22]
 8002b28:	4413      	add	r3, r2
 8002b2a:	72fb      	strb	r3, [r7, #11]
	for(uint8_t i = 0;i<strlen(str);i++)
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	75fb      	strb	r3, [r7, #23]
 8002b32:	7dfc      	ldrb	r4, [r7, #23]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f7fd fb57 	bl	80001e8 <strlen>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	429c      	cmp	r4, r3
 8002b3e:	d3e1      	bcc.n	8002b04 <lcdPrintText+0x24>
	}
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200000e4 	.word	0x200000e4

08002b50 <checkDataLength>:
 * @brief  Kiem tra do dai chuoi ma QR-Code co the chua
 * @param
 * @retval None
 */
uint8_t checkDataLength(uint8_t byDataLength, uint8_t byEccLevel, uint8_t byVersion)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	71bb      	strb	r3, [r7, #6]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	717b      	strb	r3, [r7, #5]
	switch(byVersion)
 8002b62:	797b      	ldrb	r3, [r7, #5]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	f200 80da 	bhi.w	8002d20 <checkDataLength+0x1d0>
 8002b6c:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <checkDataLength+0x24>)
 8002b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b72:	bf00      	nop
 8002b74:	08002b8d 	.word	0x08002b8d
 8002b78:	08002bd7 	.word	0x08002bd7
 8002b7c:	08002c21 	.word	0x08002c21
 8002b80:	08002c61 	.word	0x08002c61
 8002b84:	08002ca1 	.word	0x08002ca1
 8002b88:	08002ce1 	.word	0x08002ce1
	{
	case 1:
		if(byEccLevel == ECC_LOW)
 8002b8c:	79bb      	ldrb	r3, [r7, #6]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d105      	bne.n	8002b9e <checkDataLength+0x4e>
		{
			if(byDataLength>19)
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	2b13      	cmp	r3, #19
 8002b96:	f240 80c5 	bls.w	8002d24 <checkDataLength+0x1d4>
				return -1;
 8002b9a:	23ff      	movs	r3, #255	; 0xff
 8002b9c:	e0ce      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 8002b9e:	79bb      	ldrb	r3, [r7, #6]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d105      	bne.n	8002bb0 <checkDataLength+0x60>
		{
			if(byDataLength>16)
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	f240 80bc 	bls.w	8002d24 <checkDataLength+0x1d4>
				return -1;
 8002bac:	23ff      	movs	r3, #255	; 0xff
 8002bae:	e0c5      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 8002bb0:	79bb      	ldrb	r3, [r7, #6]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d105      	bne.n	8002bc2 <checkDataLength+0x72>
		{
			if(byDataLength>13)
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	2b0d      	cmp	r3, #13
 8002bba:	f240 80b3 	bls.w	8002d24 <checkDataLength+0x1d4>
				return -1;
 8002bbe:	23ff      	movs	r3, #255	; 0xff
 8002bc0:	e0bc      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 8002bc2:	79bb      	ldrb	r3, [r7, #6]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	f040 80ad 	bne.w	8002d24 <checkDataLength+0x1d4>
		{
			if(byDataLength>9)
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	2b09      	cmp	r3, #9
 8002bce:	f240 80a9 	bls.w	8002d24 <checkDataLength+0x1d4>
				return -1;
 8002bd2:	23ff      	movs	r3, #255	; 0xff
 8002bd4:	e0b2      	b.n	8002d3c <checkDataLength+0x1ec>
		}
		break;
	case 2:
		if(byEccLevel == ECC_LOW)
 8002bd6:	79bb      	ldrb	r3, [r7, #6]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <checkDataLength+0x98>
		{
			if(byDataLength>34)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	2b22      	cmp	r3, #34	; 0x22
 8002be0:	f240 80a2 	bls.w	8002d28 <checkDataLength+0x1d8>
				return -1;
 8002be4:	23ff      	movs	r3, #255	; 0xff
 8002be6:	e0a9      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 8002be8:	79bb      	ldrb	r3, [r7, #6]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d105      	bne.n	8002bfa <checkDataLength+0xaa>
		{
			if(byDataLength>28)
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	2b1c      	cmp	r3, #28
 8002bf2:	f240 8099 	bls.w	8002d28 <checkDataLength+0x1d8>
				return -1;
 8002bf6:	23ff      	movs	r3, #255	; 0xff
 8002bf8:	e0a0      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 8002bfa:	79bb      	ldrb	r3, [r7, #6]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d105      	bne.n	8002c0c <checkDataLength+0xbc>
		{
			if(byDataLength>22)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	2b16      	cmp	r3, #22
 8002c04:	f240 8090 	bls.w	8002d28 <checkDataLength+0x1d8>
				return -1;
 8002c08:	23ff      	movs	r3, #255	; 0xff
 8002c0a:	e097      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 8002c0c:	79bb      	ldrb	r3, [r7, #6]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	f040 808a 	bne.w	8002d28 <checkDataLength+0x1d8>
		{
			if(byDataLength>16)
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	f240 8086 	bls.w	8002d28 <checkDataLength+0x1d8>
				return -1;
 8002c1c:	23ff      	movs	r3, #255	; 0xff
 8002c1e:	e08d      	b.n	8002d3c <checkDataLength+0x1ec>
		}
		break;
	case 3:
		if(byEccLevel == ECC_LOW)
 8002c20:	79bb      	ldrb	r3, [r7, #6]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d104      	bne.n	8002c30 <checkDataLength+0xe0>
		{
			if(byDataLength>55)
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	2b37      	cmp	r3, #55	; 0x37
 8002c2a:	d97f      	bls.n	8002d2c <checkDataLength+0x1dc>
				return -1;
 8002c2c:	23ff      	movs	r3, #255	; 0xff
 8002c2e:	e085      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 8002c30:	79bb      	ldrb	r3, [r7, #6]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d104      	bne.n	8002c40 <checkDataLength+0xf0>
		{
			if(byDataLength>44)
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	2b2c      	cmp	r3, #44	; 0x2c
 8002c3a:	d977      	bls.n	8002d2c <checkDataLength+0x1dc>
				return -1;
 8002c3c:	23ff      	movs	r3, #255	; 0xff
 8002c3e:	e07d      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 8002c40:	79bb      	ldrb	r3, [r7, #6]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d104      	bne.n	8002c50 <checkDataLength+0x100>
		{
			if(byDataLength>34)
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	2b22      	cmp	r3, #34	; 0x22
 8002c4a:	d96f      	bls.n	8002d2c <checkDataLength+0x1dc>
				return -1;
 8002c4c:	23ff      	movs	r3, #255	; 0xff
 8002c4e:	e075      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 8002c50:	79bb      	ldrb	r3, [r7, #6]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d16a      	bne.n	8002d2c <checkDataLength+0x1dc>
		{
			if(byDataLength>26)
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	2b1a      	cmp	r3, #26
 8002c5a:	d967      	bls.n	8002d2c <checkDataLength+0x1dc>
				return -1;
 8002c5c:	23ff      	movs	r3, #255	; 0xff
 8002c5e:	e06d      	b.n	8002d3c <checkDataLength+0x1ec>
		}
		break;
	case 4:
		if(byEccLevel == ECC_LOW)
 8002c60:	79bb      	ldrb	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d104      	bne.n	8002c70 <checkDataLength+0x120>
		{
			if(byDataLength>80)
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	2b50      	cmp	r3, #80	; 0x50
 8002c6a:	d961      	bls.n	8002d30 <checkDataLength+0x1e0>
				return -1;
 8002c6c:	23ff      	movs	r3, #255	; 0xff
 8002c6e:	e065      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 8002c70:	79bb      	ldrb	r3, [r7, #6]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d104      	bne.n	8002c80 <checkDataLength+0x130>
		{
			if(byDataLength>64)
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d959      	bls.n	8002d30 <checkDataLength+0x1e0>
				return -1;
 8002c7c:	23ff      	movs	r3, #255	; 0xff
 8002c7e:	e05d      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 8002c80:	79bb      	ldrb	r3, [r7, #6]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d104      	bne.n	8002c90 <checkDataLength+0x140>
		{
			if(byDataLength>48)
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	2b30      	cmp	r3, #48	; 0x30
 8002c8a:	d951      	bls.n	8002d30 <checkDataLength+0x1e0>
				return -1;
 8002c8c:	23ff      	movs	r3, #255	; 0xff
 8002c8e:	e055      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 8002c90:	79bb      	ldrb	r3, [r7, #6]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d14c      	bne.n	8002d30 <checkDataLength+0x1e0>
		{
			if(byDataLength>36)
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	2b24      	cmp	r3, #36	; 0x24
 8002c9a:	d949      	bls.n	8002d30 <checkDataLength+0x1e0>
				return -1;
 8002c9c:	23ff      	movs	r3, #255	; 0xff
 8002c9e:	e04d      	b.n	8002d3c <checkDataLength+0x1ec>
		}
		break;
	case 5:
		if(byEccLevel == ECC_LOW)
 8002ca0:	79bb      	ldrb	r3, [r7, #6]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <checkDataLength+0x160>
		{
			if(byDataLength>108)
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	2b6c      	cmp	r3, #108	; 0x6c
 8002caa:	d943      	bls.n	8002d34 <checkDataLength+0x1e4>
				return -1;
 8002cac:	23ff      	movs	r3, #255	; 0xff
 8002cae:	e045      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 8002cb0:	79bb      	ldrb	r3, [r7, #6]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d104      	bne.n	8002cc0 <checkDataLength+0x170>
		{
			if(byDataLength>86)
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	2b56      	cmp	r3, #86	; 0x56
 8002cba:	d93b      	bls.n	8002d34 <checkDataLength+0x1e4>
				return -1;
 8002cbc:	23ff      	movs	r3, #255	; 0xff
 8002cbe:	e03d      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 8002cc0:	79bb      	ldrb	r3, [r7, #6]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d104      	bne.n	8002cd0 <checkDataLength+0x180>
		{
			if(byDataLength>62)
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	2b3e      	cmp	r3, #62	; 0x3e
 8002cca:	d933      	bls.n	8002d34 <checkDataLength+0x1e4>
				return -1;
 8002ccc:	23ff      	movs	r3, #255	; 0xff
 8002cce:	e035      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 8002cd0:	79bb      	ldrb	r3, [r7, #6]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d12e      	bne.n	8002d34 <checkDataLength+0x1e4>
		{
			if(byDataLength>46)
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8002cda:	d92b      	bls.n	8002d34 <checkDataLength+0x1e4>
				return -1;
 8002cdc:	23ff      	movs	r3, #255	; 0xff
 8002cde:	e02d      	b.n	8002d3c <checkDataLength+0x1ec>
		}
		break;
	case 6:
		if(byEccLevel == ECC_LOW)
 8002ce0:	79bb      	ldrb	r3, [r7, #6]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d104      	bne.n	8002cf0 <checkDataLength+0x1a0>
		{
			if(byDataLength>136)
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	2b88      	cmp	r3, #136	; 0x88
 8002cea:	d925      	bls.n	8002d38 <checkDataLength+0x1e8>
				return -1;
 8002cec:	23ff      	movs	r3, #255	; 0xff
 8002cee:	e025      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 8002cf0:	79bb      	ldrb	r3, [r7, #6]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d104      	bne.n	8002d00 <checkDataLength+0x1b0>
		{
			if(byDataLength>108)
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	2b6c      	cmp	r3, #108	; 0x6c
 8002cfa:	d91d      	bls.n	8002d38 <checkDataLength+0x1e8>
				return -1;
 8002cfc:	23ff      	movs	r3, #255	; 0xff
 8002cfe:	e01d      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 8002d00:	79bb      	ldrb	r3, [r7, #6]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d104      	bne.n	8002d10 <checkDataLength+0x1c0>
		{
			if(byDataLength>76)
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2b4c      	cmp	r3, #76	; 0x4c
 8002d0a:	d915      	bls.n	8002d38 <checkDataLength+0x1e8>
				return -1;
 8002d0c:	23ff      	movs	r3, #255	; 0xff
 8002d0e:	e015      	b.n	8002d3c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 8002d10:	79bb      	ldrb	r3, [r7, #6]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d110      	bne.n	8002d38 <checkDataLength+0x1e8>
		{
			if(byDataLength>60)
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	2b3c      	cmp	r3, #60	; 0x3c
 8002d1a:	d90d      	bls.n	8002d38 <checkDataLength+0x1e8>
				return -1;
 8002d1c:	23ff      	movs	r3, #255	; 0xff
 8002d1e:	e00d      	b.n	8002d3c <checkDataLength+0x1ec>
		}
		break;
	default:
		break;
 8002d20:	bf00      	nop
 8002d22:	e00a      	b.n	8002d3a <checkDataLength+0x1ea>
		break;
 8002d24:	bf00      	nop
 8002d26:	e008      	b.n	8002d3a <checkDataLength+0x1ea>
		break;
 8002d28:	bf00      	nop
 8002d2a:	e006      	b.n	8002d3a <checkDataLength+0x1ea>
		break;
 8002d2c:	bf00      	nop
 8002d2e:	e004      	b.n	8002d3a <checkDataLength+0x1ea>
		break;
 8002d30:	bf00      	nop
 8002d32:	e002      	b.n	8002d3a <checkDataLength+0x1ea>
		break;
 8002d34:	bf00      	nop
 8002d36:	e000      	b.n	8002d3a <checkDataLength+0x1ea>
		break;
 8002d38:	bf00      	nop
	}
	return 0;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <main>:
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/


int main(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
	appInitCommon();
 8002d4c:	f000 f80a 	bl	8002d64 <appInitCommon>

    /* Loop forever */
	while(1)
	{
		processTimerScheduler();
 8002d50:	f001 fdfa 	bl	8004948 <processTimerScheduler>

		appStateManager(eCurrentState);
 8002d54:	4b02      	ldr	r3, [pc, #8]	; (8002d60 <main+0x18>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 f847 	bl	8002dec <appStateManager>
		processTimerScheduler();
 8002d5e:	e7f7      	b.n	8002d50 <main+0x8>
 8002d60:	20000415 	.word	0x20000415

08002d64 <appInitCommon>:
 * @param  None
 * @retval None
 */

static void appInitCommon(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 8002d68:	f000 ff96 	bl	8003c98 <SystemCoreClockUpdate>
	TimerInit();
 8002d6c:	f001 fd6e 	bl	800484c <TimerInit>
	lcdInit();
 8002d70:	f7ff fd44 	bl	80027fc <lcdInit>
	serialUartInit();
 8002d74:	f000 fdfe 	bl	8003974 <serialUartInit>
	buttonInit();
 8002d78:	f7fd fa3e 	bl	80001f8 <buttonInit>
	g_eRxState = RX_STATE_START_1_BYTE;
 8002d7c:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <appInitCommon+0x50>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
	eCurrentState = STATE_APP_STARTUP;
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <appInitCommon+0x54>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
	lcdClear();
 8002d88:	f7ff fe6c 	bl	8002a64 <lcdClear>
	lcdPrintText("IOT", 42, 30, ucg_font_ncenR10_hf);
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <appInitCommon+0x58>)
 8002d8e:	221e      	movs	r2, #30
 8002d90:	212a      	movs	r1, #42	; 0x2a
 8002d92:	480b      	ldr	r0, [pc, #44]	; (8002dc0 <appInitCommon+0x5c>)
 8002d94:	f7ff fea4 	bl	8002ae0 <lcdPrintText>
	lcdPrintText("Programming by", 6, 50, ucg_font_ncenR10_hf);
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <appInitCommon+0x58>)
 8002d9a:	2232      	movs	r2, #50	; 0x32
 8002d9c:	2106      	movs	r1, #6
 8002d9e:	4809      	ldr	r0, [pc, #36]	; (8002dc4 <appInitCommon+0x60>)
 8002da0:	f7ff fe9e 	bl	8002ae0 <lcdPrintText>
	lcdPrintText("Lumi Smarthome", 4, 75, ucg_font_ncenR10_hf);
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <appInitCommon+0x58>)
 8002da6:	224b      	movs	r2, #75	; 0x4b
 8002da8:	2104      	movs	r1, #4
 8002daa:	4807      	ldr	r0, [pc, #28]	; (8002dc8 <appInitCommon+0x64>)
 8002dac:	f7ff fe98 	bl	8002ae0 <lcdPrintText>
}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	200002a8 	.word	0x200002a8
 8002db8:	20000415 	.word	0x20000415
 8002dbc:	08008cbc 	.word	0x08008cbc
 8002dc0:	08007044 	.word	0x08007044
 8002dc4:	08007048 	.word	0x08007048
 8002dc8:	08007058 	.word	0x08007058

08002dcc <setStateApp>:
 * @param  state: State of application
 * @retval None
 */

static void setStateApp(StateApp_e state)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71fb      	strb	r3, [r7, #7]
	eCurrentState = state;
 8002dd6:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <setStateApp+0x1c>)
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	7013      	strb	r3, [r2, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	20000415 	.word	0x20000415

08002dec <appStateManager>:
 * @brief  Manager state application
 * @param  event: Su kien
 * @retval None
 */
static void appStateManager(StateApp_e event)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
	switch(event)
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d02c      	beq.n	8002e56 <appStateManager+0x6a>
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	dc33      	bgt.n	8002e68 <appStateManager+0x7c>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <appStateManager+0x20>
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d015      	beq.n	8002e34 <appStateManager+0x48>
	case STATE_APP_RESET:
		memset(g_pstrMACLast,0,sizeof(g_pstrMACLast));
		setStateApp(STATE_APP_STARTUP);
		break;
	default:
		break;
 8002e08:	e02e      	b.n	8002e68 <appStateManager+0x7c>
	case STATE_APP_STARTUP: //Su kien khi he thong bat dau duoc cap nguon
 8002e0a:	bf00      	nop
			modeTest = getModeTest();
 8002e0c:	f7fd fd54 	bl	80008b8 <getModeTest>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <appStateManager+0x88>)
 8002e16:	701a      	strb	r2, [r3, #0]
		while(modeTest == NONE);
 8002e18:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <appStateManager+0x88>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f4      	beq.n	8002e0a <appStateManager+0x1e>
		setStateApp(STATE_APP_IDLE);
 8002e20:	2001      	movs	r0, #1
 8002e22:	f7ff ffd3 	bl	8002dcc <setStateApp>
		USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);
 8002e26:	2201      	movs	r2, #1
 8002e28:	f240 5125 	movw	r1, #1317	; 0x525
 8002e2c:	4812      	ldr	r0, [pc, #72]	; (8002e78 <appStateManager+0x8c>)
 8002e2e:	f001 fc01 	bl	8004634 <USART_ITConfig>
		break;
 8002e32:	e01a      	b.n	8002e6a <appStateManager+0x7e>
		if(processEventButton() == RETURN)
 8002e34:	f7fd faa0 	bl	8000378 <processEventButton>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d108      	bne.n	8002e50 <appStateManager+0x64>
			USART_ITConfig(USART6, USART_IT_RXNE, DISABLE);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f240 5125 	movw	r1, #1317	; 0x525
 8002e44:	480c      	ldr	r0, [pc, #48]	; (8002e78 <appStateManager+0x8c>)
 8002e46:	f001 fbf5 	bl	8004634 <USART_ITConfig>
			setStateApp(STATE_APP_RESET);
 8002e4a:	2002      	movs	r0, #2
 8002e4c:	f7ff ffbe 	bl	8002dcc <setStateApp>
		processSerialUartReceiver();
 8002e50:	f000 fce6 	bl	8003820 <processSerialUartReceiver>
		break;
 8002e54:	e009      	b.n	8002e6a <appStateManager+0x7e>
		memset(g_pstrMACLast,0,sizeof(g_pstrMACLast));
 8002e56:	2211      	movs	r2, #17
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4808      	ldr	r0, [pc, #32]	; (8002e7c <appStateManager+0x90>)
 8002e5c:	f004 f8c2 	bl	8006fe4 <memset>
		setStateApp(STATE_APP_STARTUP);
 8002e60:	2000      	movs	r0, #0
 8002e62:	f7ff ffb3 	bl	8002dcc <setStateApp>
		break;
 8002e66:	e000      	b.n	8002e6a <appStateManager+0x7e>
		break;
 8002e68:	bf00      	nop

	}
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000414 	.word	0x20000414
 8002e78:	40011400 	.word	0x40011400
 8002e7c:	200003dc 	.word	0x200003dc

08002e80 <processUartReceiveMCUInformation>:
	}
	while(dwCalculatorTime(dwTimeInit, dwTimeCurrent)<ms);

}
static void processUartReceiveMCUInformation(McuInfor_t *pCmd)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	g_byEnpointCntMCU = pCmd->endpoint_cnt;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	799a      	ldrb	r2, [r3, #6]
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <processUartReceiveMCUInformation+0x1c>)
 8002e8e:	701a      	strb	r2, [r3, #0]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	200003af 	.word	0x200003af

08002ea0 <processUartReceiveCommandInformationFeedBack>:
 * @param  CmdData_t *pCmd
 * @retval None
 */

static void processUartReceiveCommandInformationFeedBack(CmdData_t *pCmd)
{
 8002ea0:	b5b0      	push	{r4, r5, r7, lr}
 8002ea2:	b09e      	sub	sp, #120	; 0x78
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	//0.Get mode

	//1. Khai bao chuoi chua thong tin in ra QR
	char byDataPrint[5+(LENGTH_OF_MAC+LENGTH_OF_VERSION*2 +LENGTH_OF_PID \
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8002eac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002eb0:	2223      	movs	r2, #35	; 0x23
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f004 f895 	bl	8006fe4 <memset>
			+ LENGTH_OF_DEVICE_TYPE)*2] = {0};

	//2. Chuoi chua thong tin hien tai
	char pstrMAC[LENGTH_OF_MAC * 2+1] = {0};
 8002eba:	2300      	movs	r3, #0
 8002ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ebe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	731a      	strb	r2, [r3, #12]
	char pstrDeviceType[LENGTH_OF_DEVICE_TYPE * 2 +1] = {0};
 8002ecc:	4bb9      	ldr	r3, [pc, #740]	; (80031b4 <processUartReceiveCommandInformationFeedBack+0x314>)
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	873b      	strh	r3, [r7, #56]	; 0x38
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	char pstrPID[LENGTH_OF_PID * 2 +1] = {0};
 8002ed8:	2300      	movs	r3, #0
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	//3. Xoa du lieu cu
	memset(byDataPrint,0,sizeof(byDataPrint));
 8002ee2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ee6:	2227      	movs	r2, #39	; 0x27
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f004 f87a 	bl	8006fe4 <memset>
	//4. Chuyen doi du lieu tu dang Hex sang ma ASCII
	hexToAscii( pstrMAC,pCmd->pbyMAC, LENGTH_OF_MAC);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	1d59      	adds	r1, r3, #5
 8002ef4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ef8:	2208      	movs	r2, #8
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fda0 	bl	8003a40 <hexToAscii>

	hexToAscii(pstrDeviceType, &(pCmd->deviceType), LENGTH_OF_DEVICE_TYPE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	1c99      	adds	r1, r3, #2
 8002f04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f08:	2201      	movs	r2, #1
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fd98 	bl	8003a40 <hexToAscii>

	hexToAscii( pstrPID,pCmd->pbyPID, LENGTH_OF_PID);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f103 0110 	add.w	r1, r3, #16
 8002f16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fd8f 	bl	8003a40 <hexToAscii>
	//5. Quet 2 lan de lay version cua zigbee va bluetooth
	static uint8_t byStatusTemp = 0;

	//Single mode
	//Dual mode
	if(pCmd->protocolType == PROTOCOL_TYPE_ZIGBEE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	785b      	ldrb	r3, [r3, #1]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d121      	bne.n	8002f6e <processUartReceiveCommandInformationFeedBack+0xce>
	{
		byStatusTemp ++;
 8002f2a:	4ba3      	ldr	r3, [pc, #652]	; (80031b8 <processUartReceiveCommandInformationFeedBack+0x318>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4ba1      	ldr	r3, [pc, #644]	; (80031b8 <processUartReceiveCommandInformationFeedBack+0x318>)
 8002f34:	701a      	strb	r2, [r3, #0]
		memset(g_pstrVersionZigBee,0,sizeof(g_pstrVersionZigBee));
 8002f36:	2207      	movs	r2, #7
 8002f38:	2100      	movs	r1, #0
 8002f3a:	48a0      	ldr	r0, [pc, #640]	; (80031bc <processUartReceiveCommandInformationFeedBack+0x31c>)
 8002f3c:	f004 f852 	bl	8006fe4 <memset>
		hexToAscii( g_pstrVersionZigBee,pCmd->pbyVersion, LENGTH_OF_VERSION);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	330d      	adds	r3, #13
 8002f44:	2203      	movs	r2, #3
 8002f46:	4619      	mov	r1, r3
 8002f48:	489c      	ldr	r0, [pc, #624]	; (80031bc <processUartReceiveCommandInformationFeedBack+0x31c>)
 8002f4a:	f000 fd79 	bl	8003a40 <hexToAscii>

		memset(g_pstrMACZigbee,0,sizeof(g_pstrMACZigbee));
 8002f4e:	2211      	movs	r2, #17
 8002f50:	2100      	movs	r1, #0
 8002f52:	489b      	ldr	r0, [pc, #620]	; (80031c0 <processUartReceiveCommandInformationFeedBack+0x320>)
 8002f54:	f004 f846 	bl	8006fe4 <memset>
		strcpy(g_pstrMACZigbee,pstrMAC);
 8002f58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4898      	ldr	r0, [pc, #608]	; (80031c0 <processUartReceiveCommandInformationFeedBack+0x320>)
 8002f60:	f004 f857 	bl	8007012 <strcpy>
		g_byEnpointCntZigBee = pCmd->byEndpointCnt;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	78da      	ldrb	r2, [r3, #3]
 8002f68:	4b96      	ldr	r3, [pc, #600]	; (80031c4 <processUartReceiveCommandInformationFeedBack+0x324>)
 8002f6a:	701a      	strb	r2, [r3, #0]
 8002f6c:	e024      	b.n	8002fb8 <processUartReceiveCommandInformationFeedBack+0x118>
	}
	else if(pCmd->protocolType == PROTOCOL_TYPE_BLUETOOTH)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d120      	bne.n	8002fb8 <processUartReceiveCommandInformationFeedBack+0x118>
	{
		byStatusTemp ++;
 8002f76:	4b90      	ldr	r3, [pc, #576]	; (80031b8 <processUartReceiveCommandInformationFeedBack+0x318>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b8e      	ldr	r3, [pc, #568]	; (80031b8 <processUartReceiveCommandInformationFeedBack+0x318>)
 8002f80:	701a      	strb	r2, [r3, #0]
		memset(g_pstrVersionBluetooth,0,sizeof(g_pstrVersionBluetooth));
 8002f82:	2207      	movs	r2, #7
 8002f84:	2100      	movs	r1, #0
 8002f86:	4890      	ldr	r0, [pc, #576]	; (80031c8 <processUartReceiveCommandInformationFeedBack+0x328>)
 8002f88:	f004 f82c 	bl	8006fe4 <memset>
		hexToAscii( g_pstrVersionBluetooth,pCmd->pbyVersion, LENGTH_OF_VERSION);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	330d      	adds	r3, #13
 8002f90:	2203      	movs	r2, #3
 8002f92:	4619      	mov	r1, r3
 8002f94:	488c      	ldr	r0, [pc, #560]	; (80031c8 <processUartReceiveCommandInformationFeedBack+0x328>)
 8002f96:	f000 fd53 	bl	8003a40 <hexToAscii>

		memset(g_pstrMACBle,0,sizeof(g_pstrMACBle));
 8002f9a:	2211      	movs	r2, #17
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	488b      	ldr	r0, [pc, #556]	; (80031cc <processUartReceiveCommandInformationFeedBack+0x32c>)
 8002fa0:	f004 f820 	bl	8006fe4 <memset>
		strcpy(g_pstrMACBle,pstrMAC);
 8002fa4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4888      	ldr	r0, [pc, #544]	; (80031cc <processUartReceiveCommandInformationFeedBack+0x32c>)
 8002fac:	f004 f831 	bl	8007012 <strcpy>
		g_byEnpointCntBLE = pCmd->byEndpointCnt;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	78da      	ldrb	r2, [r3, #3]
 8002fb4:	4b86      	ldr	r3, [pc, #536]	; (80031d0 <processUartReceiveCommandInformationFeedBack+0x330>)
 8002fb6:	701a      	strb	r2, [r3, #0]
	}

		//6.1 Reset buf khi mac thay doi
	static uint8_t byFlagOfBufReset = 0;
	uint8_t temp;
	if((strcmp(&g_pstrMACZigbee[4],&g_pstrMACLast[4])!=0)||(strcmp(&g_pstrMACBle[4],&g_pstrMACLast[4])!=0))
 8002fb8:	4986      	ldr	r1, [pc, #536]	; (80031d4 <processUartReceiveCommandInformationFeedBack+0x334>)
 8002fba:	4887      	ldr	r0, [pc, #540]	; (80031d8 <processUartReceiveCommandInformationFeedBack+0x338>)
 8002fbc:	f7fd f90a 	bl	80001d4 <strcmp>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <processUartReceiveCommandInformationFeedBack+0x134>
 8002fc6:	4983      	ldr	r1, [pc, #524]	; (80031d4 <processUartReceiveCommandInformationFeedBack+0x334>)
 8002fc8:	4884      	ldr	r0, [pc, #528]	; (80031dc <processUartReceiveCommandInformationFeedBack+0x33c>)
 8002fca:	f7fd f903 	bl	80001d4 <strcmp>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d02c      	beq.n	800302e <processUartReceiveCommandInformationFeedBack+0x18e>
	{
		USART_ITConfig(USART6, USART_IT_RXNE, DISABLE);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f240 5125 	movw	r1, #1317	; 0x525
 8002fda:	4881      	ldr	r0, [pc, #516]	; (80031e0 <processUartReceiveCommandInformationFeedBack+0x340>)
 8002fdc:	f001 fb2a 	bl	8004634 <USART_ITConfig>
		if(byFlagOfBufReset == 0)
 8002fe0:	4b80      	ldr	r3, [pc, #512]	; (80031e4 <processUartReceiveCommandInformationFeedBack+0x344>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d11c      	bne.n	8003022 <processUartReceiveCommandInformationFeedBack+0x182>
		{
			while((bufNumItems(&g_pUartRxQueue) !=0))
 8002fe8:	e005      	b.n	8002ff6 <processUartReceiveCommandInformationFeedBack+0x156>
			{

				bufDeDat(&g_pUartRxQueue, &temp);
 8002fea:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8002fee:	4619      	mov	r1, r3
 8002ff0:	487d      	ldr	r0, [pc, #500]	; (80031e8 <processUartReceiveCommandInformationFeedBack+0x348>)
 8002ff2:	f003 fa63 	bl	80064bc <bufDeDat>
			while((bufNumItems(&g_pUartRxQueue) !=0))
 8002ff6:	487c      	ldr	r0, [pc, #496]	; (80031e8 <processUartReceiveCommandInformationFeedBack+0x348>)
 8002ff8:	f003 f9c7 	bl	800638a <bufNumItems>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f3      	bne.n	8002fea <processUartReceiveCommandInformationFeedBack+0x14a>
			};
			g_byEnpointCntMCU = 0;
 8003002:	4b7a      	ldr	r3, [pc, #488]	; (80031ec <processUartReceiveCommandInformationFeedBack+0x34c>)
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
			memset(g_pstrVersionBluetooth,0,sizeof(g_pstrVersionBluetooth));
 8003008:	2207      	movs	r2, #7
 800300a:	2100      	movs	r1, #0
 800300c:	486e      	ldr	r0, [pc, #440]	; (80031c8 <processUartReceiveCommandInformationFeedBack+0x328>)
 800300e:	f003 ffe9 	bl	8006fe4 <memset>
			memset(g_pstrVersionZigBee,0,sizeof(g_pstrVersionZigBee));
 8003012:	2207      	movs	r2, #7
 8003014:	2100      	movs	r1, #0
 8003016:	4869      	ldr	r0, [pc, #420]	; (80031bc <processUartReceiveCommandInformationFeedBack+0x31c>)
 8003018:	f003 ffe4 	bl	8006fe4 <memset>
			byFlagOfBufReset = 1;
 800301c:	4b71      	ldr	r3, [pc, #452]	; (80031e4 <processUartReceiveCommandInformationFeedBack+0x344>)
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]

		}
		USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);
 8003022:	2201      	movs	r2, #1
 8003024:	f240 5125 	movw	r1, #1317	; 0x525
 8003028:	486d      	ldr	r0, [pc, #436]	; (80031e0 <processUartReceiveCommandInformationFeedBack+0x340>)
 800302a:	f001 fb03 	bl	8004634 <USART_ITConfig>
		//Gia tri dem so lan quet lai ban tin khi thay doi thiet bi co endpoint khac
	static uint8_t byCountTemp = 0;

	//7.1 Dual mode

	switch(modeTest)
 800302e:	4b70      	ldr	r3, [pc, #448]	; (80031f0 <processUartReceiveCommandInformationFeedBack+0x350>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b03      	cmp	r3, #3
 8003034:	f000 82c2 	beq.w	80035bc <processUartReceiveCommandInformationFeedBack+0x71c>
 8003038:	2b03      	cmp	r3, #3
 800303a:	f300 83a2 	bgt.w	8003782 <processUartReceiveCommandInformationFeedBack+0x8e2>
 800303e:	2b01      	cmp	r3, #1
 8003040:	d003      	beq.n	800304a <processUartReceiveCommandInformationFeedBack+0x1aa>
 8003042:	2b02      	cmp	r3, #2
 8003044:	f000 81ab 	beq.w	800339e <processUartReceiveCommandInformationFeedBack+0x4fe>
					}
				}
				break;
				break;
			default:
				break;
 8003048:	e39b      	b.n	8003782 <processUartReceiveCommandInformationFeedBack+0x8e2>
				if(strcmp(&g_pstrMACZigbee[4],&g_pstrMACLast[4])!=0 &&(byStatusTemp>=2))
 800304a:	4962      	ldr	r1, [pc, #392]	; (80031d4 <processUartReceiveCommandInformationFeedBack+0x334>)
 800304c:	4862      	ldr	r0, [pc, #392]	; (80031d8 <processUartReceiveCommandInformationFeedBack+0x338>)
 800304e:	f7fd f8c1 	bl	80001d4 <strcmp>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8396 	beq.w	8003786 <processUartReceiveCommandInformationFeedBack+0x8e6>
 800305a:	4b57      	ldr	r3, [pc, #348]	; (80031b8 <processUartReceiveCommandInformationFeedBack+0x318>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b01      	cmp	r3, #1
 8003060:	f240 8391 	bls.w	8003786 <processUartReceiveCommandInformationFeedBack+0x8e6>
					strcpy(g_pstrMACLast,pstrMAC);
 8003064:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003068:	4619      	mov	r1, r3
 800306a:	4862      	ldr	r0, [pc, #392]	; (80031f4 <processUartReceiveCommandInformationFeedBack+0x354>)
 800306c:	f003 ffd1 	bl	8007012 <strcpy>
					if((g_byEnpointCntMCU == g_byEnpointCntBLE)&&(g_byEnpointCntMCU == g_byEnpointCntZigBee))
 8003070:	4b5e      	ldr	r3, [pc, #376]	; (80031ec <processUartReceiveCommandInformationFeedBack+0x34c>)
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	4b56      	ldr	r3, [pc, #344]	; (80031d0 <processUartReceiveCommandInformationFeedBack+0x330>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	f040 8088 	bne.w	800318e <processUartReceiveCommandInformationFeedBack+0x2ee>
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <processUartReceiveCommandInformationFeedBack+0x34c>)
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	4b50      	ldr	r3, [pc, #320]	; (80031c4 <processUartReceiveCommandInformationFeedBack+0x324>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	f040 8081 	bne.w	800318e <processUartReceiveCommandInformationFeedBack+0x2ee>
						byCountTemp = 0;
 800308c:	4b5a      	ldr	r3, [pc, #360]	; (80031f8 <processUartReceiveCommandInformationFeedBack+0x358>)
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntMCU = 0;
 8003092:	4b56      	ldr	r3, [pc, #344]	; (80031ec <processUartReceiveCommandInformationFeedBack+0x34c>)
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntBLE = 0;
 8003098:	4b4d      	ldr	r3, [pc, #308]	; (80031d0 <processUartReceiveCommandInformationFeedBack+0x330>)
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntZigBee = 0;
 800309e:	4b49      	ldr	r3, [pc, #292]	; (80031c4 <processUartReceiveCommandInformationFeedBack+0x324>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
						strcat(byDataPrint,g_pstrMACZigbee);
 80030a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030a8:	4945      	ldr	r1, [pc, #276]	; (80031c0 <processUartReceiveCommandInformationFeedBack+0x320>)
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 ffa2 	bl	8006ff4 <strcat>
						strcat(byDataPrint,",");
 80030b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fd f897 	bl	80001e8 <strlen>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030c2:	4413      	add	r3, r2
 80030c4:	494d      	ldr	r1, [pc, #308]	; (80031fc <processUartReceiveCommandInformationFeedBack+0x35c>)
 80030c6:	461a      	mov	r2, r3
 80030c8:	460b      	mov	r3, r1
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,pstrDeviceType);
 80030ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f003 ff8b 	bl	8006ff4 <strcat>
						strcat(byDataPrint,",");
 80030de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fd f880 	bl	80001e8 <strlen>
 80030e8:	4603      	mov	r3, r0
 80030ea:	461a      	mov	r2, r3
 80030ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030f0:	4413      	add	r3, r2
 80030f2:	4942      	ldr	r1, [pc, #264]	; (80031fc <processUartReceiveCommandInformationFeedBack+0x35c>)
 80030f4:	461a      	mov	r2, r3
 80030f6:	460b      	mov	r3, r1
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,pstrPID);
 80030fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003100:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f003 ff74 	bl	8006ff4 <strcat>
						strcat(byDataPrint,",");
 800310c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd f869 	bl	80001e8 <strlen>
 8003116:	4603      	mov	r3, r0
 8003118:	461a      	mov	r2, r3
 800311a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800311e:	4413      	add	r3, r2
 8003120:	4936      	ldr	r1, [pc, #216]	; (80031fc <processUartReceiveCommandInformationFeedBack+0x35c>)
 8003122:	461a      	mov	r2, r3
 8003124:	460b      	mov	r3, r1
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,g_pstrVersionZigBee);
 800312a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800312e:	4923      	ldr	r1, [pc, #140]	; (80031bc <processUartReceiveCommandInformationFeedBack+0x31c>)
 8003130:	4618      	mov	r0, r3
 8003132:	f003 ff5f 	bl	8006ff4 <strcat>
						strcat(byDataPrint,",");
 8003136:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd f854 	bl	80001e8 <strlen>
 8003140:	4603      	mov	r3, r0
 8003142:	461a      	mov	r2, r3
 8003144:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003148:	4413      	add	r3, r2
 800314a:	492c      	ldr	r1, [pc, #176]	; (80031fc <processUartReceiveCommandInformationFeedBack+0x35c>)
 800314c:	461a      	mov	r2, r3
 800314e:	460b      	mov	r3, r1
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,g_pstrVersionBluetooth);
 8003154:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003158:	491b      	ldr	r1, [pc, #108]	; (80031c8 <processUartReceiveCommandInformationFeedBack+0x328>)
 800315a:	4618      	mov	r0, r3
 800315c:	f003 ff4a 	bl	8006ff4 <strcat>
						generateQRCode(byDataPrint,strlen(byDataPrint));
 8003160:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd f83f 	bl	80001e8 <strlen>
 800316a:	4603      	mov	r3, r0
 800316c:	b2da      	uxtb	r2, r3
 800316e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fb69 	bl	800284c <generateQRCode>
						printMACLcd(g_pstrMACZigbee,8,120,ucg_font_5x7_mf);
 800317a:	4b21      	ldr	r3, [pc, #132]	; (8003200 <processUartReceiveCommandInformationFeedBack+0x360>)
 800317c:	2278      	movs	r2, #120	; 0x78
 800317e:	2108      	movs	r1, #8
 8003180:	480f      	ldr	r0, [pc, #60]	; (80031c0 <processUartReceiveCommandInformationFeedBack+0x320>)
 8003182:	f000 fca1 	bl	8003ac8 <printMACLcd>
						byFlagOfBufReset = 0;
 8003186:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <processUartReceiveCommandInformationFeedBack+0x344>)
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
				break;
 800318c:	e2fb      	b.n	8003786 <processUartReceiveCommandInformationFeedBack+0x8e6>
							if(byCountTemp == 0)
 800318e:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <processUartReceiveCommandInformationFeedBack+0x358>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d136      	bne.n	8003204 <processUartReceiveCommandInformationFeedBack+0x364>
								memset(g_pstrMACLast,0,sizeof(g_pstrMACLast));
 8003196:	2211      	movs	r2, #17
 8003198:	2100      	movs	r1, #0
 800319a:	4816      	ldr	r0, [pc, #88]	; (80031f4 <processUartReceiveCommandInformationFeedBack+0x354>)
 800319c:	f003 ff22 	bl	8006fe4 <memset>
								byStatusTemp =0;
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <processUartReceiveCommandInformationFeedBack+0x318>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
								byCountTemp ++;
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <processUartReceiveCommandInformationFeedBack+0x358>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	3301      	adds	r3, #1
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <processUartReceiveCommandInformationFeedBack+0x358>)
 80031b0:	701a      	strb	r2, [r3, #0]
				break;
 80031b2:	e2e8      	b.n	8003786 <processUartReceiveCommandInformationFeedBack+0x8e6>
 80031b4:	08007100 	.word	0x08007100
 80031b8:	20000416 	.word	0x20000416
 80031bc:	200003f8 	.word	0x200003f8
 80031c0:	200003b4 	.word	0x200003b4
 80031c4:	200003b1 	.word	0x200003b1
 80031c8:	200003f0 	.word	0x200003f0
 80031cc:	200003c8 	.word	0x200003c8
 80031d0:	200003b0 	.word	0x200003b0
 80031d4:	200003e0 	.word	0x200003e0
 80031d8:	200003b8 	.word	0x200003b8
 80031dc:	200003cc 	.word	0x200003cc
 80031e0:	40011400 	.word	0x40011400
 80031e4:	20000417 	.word	0x20000417
 80031e8:	20000298 	.word	0x20000298
 80031ec:	200003af 	.word	0x200003af
 80031f0:	20000414 	.word	0x20000414
 80031f4:	200003dc 	.word	0x200003dc
 80031f8:	20000418 	.word	0x20000418
 80031fc:	080070b8 	.word	0x080070b8
 8003200:	08007bd4 	.word	0x08007bd4
							}else if(byCountTemp>=1)
 8003204:	4bbb      	ldr	r3, [pc, #748]	; (80034f4 <processUartReceiveCommandInformationFeedBack+0x654>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 82bc 	beq.w	8003786 <processUartReceiveCommandInformationFeedBack+0x8e6>
								if((g_byEnpointCntMCU != g_byEnpointCntBLE))
 800320e:	4bba      	ldr	r3, [pc, #744]	; (80034f8 <processUartReceiveCommandInformationFeedBack+0x658>)
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	4bba      	ldr	r3, [pc, #744]	; (80034fc <processUartReceiveCommandInformationFeedBack+0x65c>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d05c      	beq.n	80032d4 <processUartReceiveCommandInformationFeedBack+0x434>
									lcdClearAxisY(20,128);
 800321a:	2180      	movs	r1, #128	; 0x80
 800321c:	2014      	movs	r0, #20
 800321e:	f7ff fc2b 	bl	8002a78 <lcdClearAxisY>
									lcdPrintText("Firmware BLE",20,30,ucg_font_6x10_mf);
 8003222:	4bb7      	ldr	r3, [pc, #732]	; (8003500 <processUartReceiveCommandInformationFeedBack+0x660>)
 8003224:	221e      	movs	r2, #30
 8003226:	2114      	movs	r1, #20
 8003228:	48b6      	ldr	r0, [pc, #728]	; (8003504 <processUartReceiveCommandInformationFeedBack+0x664>)
 800322a:	f7ff fc59 	bl	8002ae0 <lcdPrintText>
									lcdPrintText("ERROR!!!",50,50,ucg_font_6x10_mf);
 800322e:	4bb4      	ldr	r3, [pc, #720]	; (8003500 <processUartReceiveCommandInformationFeedBack+0x660>)
 8003230:	2232      	movs	r2, #50	; 0x32
 8003232:	2132      	movs	r1, #50	; 0x32
 8003234:	48b4      	ldr	r0, [pc, #720]	; (8003508 <processUartReceiveCommandInformationFeedBack+0x668>)
 8003236:	f7ff fc53 	bl	8002ae0 <lcdPrintText>
									lcdPrintText("ECntZigBee:",0,70,ucg_font_6x10_mf);
 800323a:	4bb1      	ldr	r3, [pc, #708]	; (8003500 <processUartReceiveCommandInformationFeedBack+0x660>)
 800323c:	2246      	movs	r2, #70	; 0x46
 800323e:	2100      	movs	r1, #0
 8003240:	48b2      	ldr	r0, [pc, #712]	; (800350c <processUartReceiveCommandInformationFeedBack+0x66c>)
 8003242:	f7ff fc4d 	bl	8002ae0 <lcdPrintText>
									memset(byText,0,sizeof(byText));
 8003246:	2214      	movs	r2, #20
 8003248:	2100      	movs	r1, #0
 800324a:	48b1      	ldr	r0, [pc, #708]	; (8003510 <processUartReceiveCommandInformationFeedBack+0x670>)
 800324c:	f003 feca 	bl	8006fe4 <memset>
									hexToAscii( byText,&g_byEnpointCntZigBee, 1);
 8003250:	2201      	movs	r2, #1
 8003252:	49b0      	ldr	r1, [pc, #704]	; (8003514 <processUartReceiveCommandInformationFeedBack+0x674>)
 8003254:	48ae      	ldr	r0, [pc, #696]	; (8003510 <processUartReceiveCommandInformationFeedBack+0x670>)
 8003256:	f000 fbf3 	bl	8003a40 <hexToAscii>
									lcdPrintText(byText,100,70,ucg_font_6x10_mf);
 800325a:	4ba9      	ldr	r3, [pc, #676]	; (8003500 <processUartReceiveCommandInformationFeedBack+0x660>)
 800325c:	2246      	movs	r2, #70	; 0x46
 800325e:	2164      	movs	r1, #100	; 0x64
 8003260:	48ab      	ldr	r0, [pc, #684]	; (8003510 <processUartReceiveCommandInformationFeedBack+0x670>)
 8003262:	f7ff fc3d 	bl	8002ae0 <lcdPrintText>
									lcdPrintText("ECntBLE:",0,90,ucg_font_6x10_mf);
 8003266:	4ba6      	ldr	r3, [pc, #664]	; (8003500 <processUartReceiveCommandInformationFeedBack+0x660>)
 8003268:	225a      	movs	r2, #90	; 0x5a
 800326a:	2100      	movs	r1, #0
 800326c:	48aa      	ldr	r0, [pc, #680]	; (8003518 <processUartReceiveCommandInformationFeedBack+0x678>)
 800326e:	f7ff fc37 	bl	8002ae0 <lcdPrintText>
									memset(byText,0,sizeof(byText));
 8003272:	2214      	movs	r2, #20
 8003274:	2100      	movs	r1, #0
 8003276:	48a6      	ldr	r0, [pc, #664]	; (8003510 <processUartReceiveCommandInformationFeedBack+0x670>)
 8003278:	f003 feb4 	bl	8006fe4 <memset>
									hexToAscii( byText,&g_byEnpointCntBLE, 1);
 800327c:	2201      	movs	r2, #1
 800327e:	499f      	ldr	r1, [pc, #636]	; (80034fc <processUartReceiveCommandInformationFeedBack+0x65c>)
 8003280:	48a3      	ldr	r0, [pc, #652]	; (8003510 <processUartReceiveCommandInformationFeedBack+0x670>)
 8003282:	f000 fbdd 	bl	8003a40 <hexToAscii>
									lcdPrintText(byText,100,90,ucg_font_6x10_mf);
 8003286:	4b9e      	ldr	r3, [pc, #632]	; (8003500 <processUartReceiveCommandInformationFeedBack+0x660>)
 8003288:	225a      	movs	r2, #90	; 0x5a
 800328a:	2164      	movs	r1, #100	; 0x64
 800328c:	48a0      	ldr	r0, [pc, #640]	; (8003510 <processUartReceiveCommandInformationFeedBack+0x670>)
 800328e:	f7ff fc27 	bl	8002ae0 <lcdPrintText>
									printMACLcd(g_pstrMACZigbee,8,110,ucg_font_5x7_mf);
 8003292:	4ba2      	ldr	r3, [pc, #648]	; (800351c <processUartReceiveCommandInformationFeedBack+0x67c>)
 8003294:	226e      	movs	r2, #110	; 0x6e
 8003296:	2108      	movs	r1, #8
 8003298:	48a1      	ldr	r0, [pc, #644]	; (8003520 <processUartReceiveCommandInformationFeedBack+0x680>)
 800329a:	f000 fc15 	bl	8003ac8 <printMACLcd>
									memset(g_pstrVersionBluetooth,0,sizeof(g_pstrVersionBluetooth));
 800329e:	2207      	movs	r2, #7
 80032a0:	2100      	movs	r1, #0
 80032a2:	48a0      	ldr	r0, [pc, #640]	; (8003524 <processUartReceiveCommandInformationFeedBack+0x684>)
 80032a4:	f003 fe9e 	bl	8006fe4 <memset>
									memset(g_pstrVersionZigBee,0,sizeof(g_pstrVersionZigBee));
 80032a8:	2207      	movs	r2, #7
 80032aa:	2100      	movs	r1, #0
 80032ac:	489e      	ldr	r0, [pc, #632]	; (8003528 <processUartReceiveCommandInformationFeedBack+0x688>)
 80032ae:	f003 fe99 	bl	8006fe4 <memset>
									memset(pstrPID,0,sizeof(pstrPID));
 80032b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032b6:	2205      	movs	r2, #5
 80032b8:	2100      	movs	r1, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f003 fe92 	bl	8006fe4 <memset>
									memset(pstrDeviceType,0,sizeof(pstrDeviceType));
 80032c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032c4:	2203      	movs	r2, #3
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f003 fe8b 	bl	8006fe4 <memset>
									byCountTemp = 0;
 80032ce:	4b89      	ldr	r3, [pc, #548]	; (80034f4 <processUartReceiveCommandInformationFeedBack+0x654>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
								if(g_byEnpointCntMCU != g_byEnpointCntZigBee)
 80032d4:	4b88      	ldr	r3, [pc, #544]	; (80034f8 <processUartReceiveCommandInformationFeedBack+0x658>)
 80032d6:	781a      	ldrb	r2, [r3, #0]
 80032d8:	4b8e      	ldr	r3, [pc, #568]	; (8003514 <processUartReceiveCommandInformationFeedBack+0x674>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	f000 8252 	beq.w	8003786 <processUartReceiveCommandInformationFeedBack+0x8e6>
									lcdClearAxisY(20,128);
 80032e2:	2180      	movs	r1, #128	; 0x80
 80032e4:	2014      	movs	r0, #20
 80032e6:	f7ff fbc7 	bl	8002a78 <lcdClearAxisY>
									lcdPrintText("Firmware ZigBee",20,30,ucg_font_6x10_mf);
 80032ea:	4b85      	ldr	r3, [pc, #532]	; (8003500 <processUartReceiveCommandInformationFeedBack+0x660>)
 80032ec:	221e      	movs	r2, #30
 80032ee:	2114      	movs	r1, #20
 80032f0:	488e      	ldr	r0, [pc, #568]	; (800352c <processUartReceiveCommandInformationFeedBack+0x68c>)
 80032f2:	f7ff fbf5 	bl	8002ae0 <lcdPrintText>
									lcdPrintText("ERROR!!!",50,50,ucg_font_6x10_mf);
 80032f6:	4b82      	ldr	r3, [pc, #520]	; (8003500 <processUartReceiveCommandInformationFeedBack+0x660>)
 80032f8:	2232      	movs	r2, #50	; 0x32
 80032fa:	2132      	movs	r1, #50	; 0x32
 80032fc:	4882      	ldr	r0, [pc, #520]	; (8003508 <processUartReceiveCommandInformationFeedBack+0x668>)
 80032fe:	f7ff fbef 	bl	8002ae0 <lcdPrintText>
									lcdPrintText("ECntZigBee:",0,70,ucg_font_6x10_mf);
 8003302:	4b7f      	ldr	r3, [pc, #508]	; (8003500 <processUartReceiveCommandInformationFeedBack+0x660>)
 8003304:	2246      	movs	r2, #70	; 0x46
 8003306:	2100      	movs	r1, #0
 8003308:	4880      	ldr	r0, [pc, #512]	; (800350c <processUartReceiveCommandInformationFeedBack+0x66c>)
 800330a:	f7ff fbe9 	bl	8002ae0 <lcdPrintText>
									memset(byText,0,sizeof(byText));
 800330e:	2214      	movs	r2, #20
 8003310:	2100      	movs	r1, #0
 8003312:	487f      	ldr	r0, [pc, #508]	; (8003510 <processUartReceiveCommandInformationFeedBack+0x670>)
 8003314:	f003 fe66 	bl	8006fe4 <memset>
									hexToAscii( byText,&g_byEnpointCntZigBee, 1);
 8003318:	2201      	movs	r2, #1
 800331a:	497e      	ldr	r1, [pc, #504]	; (8003514 <processUartReceiveCommandInformationFeedBack+0x674>)
 800331c:	487c      	ldr	r0, [pc, #496]	; (8003510 <processUartReceiveCommandInformationFeedBack+0x670>)
 800331e:	f000 fb8f 	bl	8003a40 <hexToAscii>
									lcdPrintText(byText,100,70,ucg_font_6x10_mf);
 8003322:	4b77      	ldr	r3, [pc, #476]	; (8003500 <processUartReceiveCommandInformationFeedBack+0x660>)
 8003324:	2246      	movs	r2, #70	; 0x46
 8003326:	2164      	movs	r1, #100	; 0x64
 8003328:	4879      	ldr	r0, [pc, #484]	; (8003510 <processUartReceiveCommandInformationFeedBack+0x670>)
 800332a:	f7ff fbd9 	bl	8002ae0 <lcdPrintText>
									lcdPrintText("ECntBLE:",0,90,ucg_font_6x10_mf);
 800332e:	4b74      	ldr	r3, [pc, #464]	; (8003500 <processUartReceiveCommandInformationFeedBack+0x660>)
 8003330:	225a      	movs	r2, #90	; 0x5a
 8003332:	2100      	movs	r1, #0
 8003334:	4878      	ldr	r0, [pc, #480]	; (8003518 <processUartReceiveCommandInformationFeedBack+0x678>)
 8003336:	f7ff fbd3 	bl	8002ae0 <lcdPrintText>
									memset(byText,0,sizeof(byText));
 800333a:	2214      	movs	r2, #20
 800333c:	2100      	movs	r1, #0
 800333e:	4874      	ldr	r0, [pc, #464]	; (8003510 <processUartReceiveCommandInformationFeedBack+0x670>)
 8003340:	f003 fe50 	bl	8006fe4 <memset>
									hexToAscii( byText,&g_byEnpointCntBLE, 1);
 8003344:	2201      	movs	r2, #1
 8003346:	496d      	ldr	r1, [pc, #436]	; (80034fc <processUartReceiveCommandInformationFeedBack+0x65c>)
 8003348:	4871      	ldr	r0, [pc, #452]	; (8003510 <processUartReceiveCommandInformationFeedBack+0x670>)
 800334a:	f000 fb79 	bl	8003a40 <hexToAscii>
									lcdPrintText(byText,100,90,ucg_font_6x10_mf);
 800334e:	4b6c      	ldr	r3, [pc, #432]	; (8003500 <processUartReceiveCommandInformationFeedBack+0x660>)
 8003350:	225a      	movs	r2, #90	; 0x5a
 8003352:	2164      	movs	r1, #100	; 0x64
 8003354:	486e      	ldr	r0, [pc, #440]	; (8003510 <processUartReceiveCommandInformationFeedBack+0x670>)
 8003356:	f7ff fbc3 	bl	8002ae0 <lcdPrintText>
									printMACLcd(g_pstrMACZigbee,8,110,ucg_font_5x7_mf);
 800335a:	4b70      	ldr	r3, [pc, #448]	; (800351c <processUartReceiveCommandInformationFeedBack+0x67c>)
 800335c:	226e      	movs	r2, #110	; 0x6e
 800335e:	2108      	movs	r1, #8
 8003360:	486f      	ldr	r0, [pc, #444]	; (8003520 <processUartReceiveCommandInformationFeedBack+0x680>)
 8003362:	f000 fbb1 	bl	8003ac8 <printMACLcd>
									memset(g_pstrVersionBluetooth,0,sizeof(g_pstrVersionBluetooth));
 8003366:	2207      	movs	r2, #7
 8003368:	2100      	movs	r1, #0
 800336a:	486e      	ldr	r0, [pc, #440]	; (8003524 <processUartReceiveCommandInformationFeedBack+0x684>)
 800336c:	f003 fe3a 	bl	8006fe4 <memset>
									memset(g_pstrVersionZigBee,0,sizeof(g_pstrVersionZigBee));
 8003370:	2207      	movs	r2, #7
 8003372:	2100      	movs	r1, #0
 8003374:	486c      	ldr	r0, [pc, #432]	; (8003528 <processUartReceiveCommandInformationFeedBack+0x688>)
 8003376:	f003 fe35 	bl	8006fe4 <memset>
									memset(pstrPID,0,sizeof(pstrPID));
 800337a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800337e:	2205      	movs	r2, #5
 8003380:	2100      	movs	r1, #0
 8003382:	4618      	mov	r0, r3
 8003384:	f003 fe2e 	bl	8006fe4 <memset>
									memset(pstrDeviceType,0,sizeof(pstrDeviceType));
 8003388:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800338c:	2203      	movs	r2, #3
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f003 fe27 	bl	8006fe4 <memset>
									byCountTemp = 0;
 8003396:	4b57      	ldr	r3, [pc, #348]	; (80034f4 <processUartReceiveCommandInformationFeedBack+0x654>)
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
				break;
 800339c:	e1f3      	b.n	8003786 <processUartReceiveCommandInformationFeedBack+0x8e6>
				if(strcmp(&g_pstrMACZigbee[4],&g_pstrMACLast[4])!=0 &&(byStatusTemp>=2))
 800339e:	4964      	ldr	r1, [pc, #400]	; (8003530 <processUartReceiveCommandInformationFeedBack+0x690>)
 80033a0:	4864      	ldr	r0, [pc, #400]	; (8003534 <processUartReceiveCommandInformationFeedBack+0x694>)
 80033a2:	f7fc ff17 	bl	80001d4 <strcmp>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 81ee 	beq.w	800378a <processUartReceiveCommandInformationFeedBack+0x8ea>
 80033ae:	4b62      	ldr	r3, [pc, #392]	; (8003538 <processUartReceiveCommandInformationFeedBack+0x698>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	f240 81e9 	bls.w	800378a <processUartReceiveCommandInformationFeedBack+0x8ea>
					strcpy(g_pstrMACLast,pstrMAC);
 80033b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033bc:	4619      	mov	r1, r3
 80033be:	485f      	ldr	r0, [pc, #380]	; (800353c <processUartReceiveCommandInformationFeedBack+0x69c>)
 80033c0:	f003 fe27 	bl	8007012 <strcpy>
					if(g_byEnpointCntMCU == g_byEnpointCntZigBee)
 80033c4:	4b4c      	ldr	r3, [pc, #304]	; (80034f8 <processUartReceiveCommandInformationFeedBack+0x658>)
 80033c6:	781a      	ldrb	r2, [r3, #0]
 80033c8:	4b52      	ldr	r3, [pc, #328]	; (8003514 <processUartReceiveCommandInformationFeedBack+0x674>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d17d      	bne.n	80034cc <processUartReceiveCommandInformationFeedBack+0x62c>
						byCountTemp = 0;
 80033d0:	4b48      	ldr	r3, [pc, #288]	; (80034f4 <processUartReceiveCommandInformationFeedBack+0x654>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntMCU = 0;
 80033d6:	4b48      	ldr	r3, [pc, #288]	; (80034f8 <processUartReceiveCommandInformationFeedBack+0x658>)
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntZigBee = 0;
 80033dc:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <processUartReceiveCommandInformationFeedBack+0x674>)
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
						strcat(byDataPrint,g_pstrMACZigbee);
 80033e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033e6:	494e      	ldr	r1, [pc, #312]	; (8003520 <processUartReceiveCommandInformationFeedBack+0x680>)
 80033e8:	4618      	mov	r0, r3
 80033ea:	f003 fe03 	bl	8006ff4 <strcat>
						strcat(byDataPrint,",");
 80033ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fc fef8 	bl	80001e8 <strlen>
 80033f8:	4603      	mov	r3, r0
 80033fa:	461a      	mov	r2, r3
 80033fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003400:	4413      	add	r3, r2
 8003402:	494f      	ldr	r1, [pc, #316]	; (8003540 <processUartReceiveCommandInformationFeedBack+0x6a0>)
 8003404:	461a      	mov	r2, r3
 8003406:	460b      	mov	r3, r1
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,pstrDeviceType);
 800340c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003410:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f003 fdec 	bl	8006ff4 <strcat>
						strcat(byDataPrint,",");
 800341c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003420:	4618      	mov	r0, r3
 8003422:	f7fc fee1 	bl	80001e8 <strlen>
 8003426:	4603      	mov	r3, r0
 8003428:	461a      	mov	r2, r3
 800342a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800342e:	4413      	add	r3, r2
 8003430:	4943      	ldr	r1, [pc, #268]	; (8003540 <processUartReceiveCommandInformationFeedBack+0x6a0>)
 8003432:	461a      	mov	r2, r3
 8003434:	460b      	mov	r3, r1
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,pstrPID);
 800343a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800343e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003442:	4611      	mov	r1, r2
 8003444:	4618      	mov	r0, r3
 8003446:	f003 fdd5 	bl	8006ff4 <strcat>
						strcat(byDataPrint,",");
 800344a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800344e:	4618      	mov	r0, r3
 8003450:	f7fc feca 	bl	80001e8 <strlen>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800345c:	4413      	add	r3, r2
 800345e:	4938      	ldr	r1, [pc, #224]	; (8003540 <processUartReceiveCommandInformationFeedBack+0x6a0>)
 8003460:	461a      	mov	r2, r3
 8003462:	460b      	mov	r3, r1
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,g_pstrVersionZigBee);
 8003468:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800346c:	492e      	ldr	r1, [pc, #184]	; (8003528 <processUartReceiveCommandInformationFeedBack+0x688>)
 800346e:	4618      	mov	r0, r3
 8003470:	f003 fdc0 	bl	8006ff4 <strcat>
						strcat(byDataPrint,",");
 8003474:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003478:	4618      	mov	r0, r3
 800347a:	f7fc feb5 	bl	80001e8 <strlen>
 800347e:	4603      	mov	r3, r0
 8003480:	461a      	mov	r2, r3
 8003482:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003486:	4413      	add	r3, r2
 8003488:	492d      	ldr	r1, [pc, #180]	; (8003540 <processUartReceiveCommandInformationFeedBack+0x6a0>)
 800348a:	461a      	mov	r2, r3
 800348c:	460b      	mov	r3, r1
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,g_pstrVersionBluetooth);
 8003492:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003496:	4923      	ldr	r1, [pc, #140]	; (8003524 <processUartReceiveCommandInformationFeedBack+0x684>)
 8003498:	4618      	mov	r0, r3
 800349a:	f003 fdab 	bl	8006ff4 <strcat>
						generateQRCode(byDataPrint,strlen(byDataPrint));
 800349e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fc fea0 	bl	80001e8 <strlen>
 80034a8:	4603      	mov	r3, r0
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff f9ca 	bl	800284c <generateQRCode>
						printMACLcd(g_pstrMACZigbee,8,120,ucg_font_5x7_mf);
 80034b8:	4b18      	ldr	r3, [pc, #96]	; (800351c <processUartReceiveCommandInformationFeedBack+0x67c>)
 80034ba:	2278      	movs	r2, #120	; 0x78
 80034bc:	2108      	movs	r1, #8
 80034be:	4818      	ldr	r0, [pc, #96]	; (8003520 <processUartReceiveCommandInformationFeedBack+0x680>)
 80034c0:	f000 fb02 	bl	8003ac8 <printMACLcd>
						byFlagOfBufReset = 0;
 80034c4:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <processUartReceiveCommandInformationFeedBack+0x6a4>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	701a      	strb	r2, [r3, #0]
				break;
 80034ca:	e15e      	b.n	800378a <processUartReceiveCommandInformationFeedBack+0x8ea>
							if(byCountTemp == 0)
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <processUartReceiveCommandInformationFeedBack+0x654>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d139      	bne.n	8003548 <processUartReceiveCommandInformationFeedBack+0x6a8>
								memset(g_pstrMACLast,0,sizeof(g_pstrMACLast));
 80034d4:	2211      	movs	r2, #17
 80034d6:	2100      	movs	r1, #0
 80034d8:	4818      	ldr	r0, [pc, #96]	; (800353c <processUartReceiveCommandInformationFeedBack+0x69c>)
 80034da:	f003 fd83 	bl	8006fe4 <memset>
								byStatusTemp =0;
 80034de:	4b16      	ldr	r3, [pc, #88]	; (8003538 <processUartReceiveCommandInformationFeedBack+0x698>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
								byCountTemp ++;
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <processUartReceiveCommandInformationFeedBack+0x654>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	4b01      	ldr	r3, [pc, #4]	; (80034f4 <processUartReceiveCommandInformationFeedBack+0x654>)
 80034ee:	701a      	strb	r2, [r3, #0]
				break;
 80034f0:	e14b      	b.n	800378a <processUartReceiveCommandInformationFeedBack+0x8ea>
 80034f2:	bf00      	nop
 80034f4:	20000418 	.word	0x20000418
 80034f8:	200003af 	.word	0x200003af
 80034fc:	200003b0 	.word	0x200003b0
 8003500:	0800834c 	.word	0x0800834c
 8003504:	080070bc 	.word	0x080070bc
 8003508:	080070cc 	.word	0x080070cc
 800350c:	080070d8 	.word	0x080070d8
 8003510:	20000400 	.word	0x20000400
 8003514:	200003b1 	.word	0x200003b1
 8003518:	080070e4 	.word	0x080070e4
 800351c:	08007bd4 	.word	0x08007bd4
 8003520:	200003b4 	.word	0x200003b4
 8003524:	200003f0 	.word	0x200003f0
 8003528:	200003f8 	.word	0x200003f8
 800352c:	080070f0 	.word	0x080070f0
 8003530:	200003e0 	.word	0x200003e0
 8003534:	200003b8 	.word	0x200003b8
 8003538:	20000416 	.word	0x20000416
 800353c:	200003dc 	.word	0x200003dc
 8003540:	080070b8 	.word	0x080070b8
 8003544:	20000417 	.word	0x20000417
							}else if(byCountTemp>=1)
 8003548:	4b97      	ldr	r3, [pc, #604]	; (80037a8 <processUartReceiveCommandInformationFeedBack+0x908>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 811c 	beq.w	800378a <processUartReceiveCommandInformationFeedBack+0x8ea>
								char byText[] = "Firmware ERROR!!!";
 8003552:	4b96      	ldr	r3, [pc, #600]	; (80037ac <processUartReceiveCommandInformationFeedBack+0x90c>)
 8003554:	f107 041c 	add.w	r4, r7, #28
 8003558:	461d      	mov	r5, r3
 800355a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800355c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800355e:	682b      	ldr	r3, [r5, #0]
 8003560:	8023      	strh	r3, [r4, #0]
								lcdClearAxisY(20,128);
 8003562:	2180      	movs	r1, #128	; 0x80
 8003564:	2014      	movs	r0, #20
 8003566:	f7ff fa87 	bl	8002a78 <lcdClearAxisY>
								lcdPrintText(byText,20,50,ucg_font_6x10_mf);
 800356a:	f107 001c 	add.w	r0, r7, #28
 800356e:	4b90      	ldr	r3, [pc, #576]	; (80037b0 <processUartReceiveCommandInformationFeedBack+0x910>)
 8003570:	2232      	movs	r2, #50	; 0x32
 8003572:	2114      	movs	r1, #20
 8003574:	f7ff fab4 	bl	8002ae0 <lcdPrintText>
								printMACLcd(g_pstrMACZigbee,8,70,ucg_font_5x7_mf);
 8003578:	4b8e      	ldr	r3, [pc, #568]	; (80037b4 <processUartReceiveCommandInformationFeedBack+0x914>)
 800357a:	2246      	movs	r2, #70	; 0x46
 800357c:	2108      	movs	r1, #8
 800357e:	488e      	ldr	r0, [pc, #568]	; (80037b8 <processUartReceiveCommandInformationFeedBack+0x918>)
 8003580:	f000 faa2 	bl	8003ac8 <printMACLcd>
								memset(g_pstrVersionBluetooth,0,sizeof(g_pstrVersionBluetooth));
 8003584:	2207      	movs	r2, #7
 8003586:	2100      	movs	r1, #0
 8003588:	488c      	ldr	r0, [pc, #560]	; (80037bc <processUartReceiveCommandInformationFeedBack+0x91c>)
 800358a:	f003 fd2b 	bl	8006fe4 <memset>
								memset(g_pstrVersionZigBee,0,sizeof(g_pstrVersionZigBee));
 800358e:	2207      	movs	r2, #7
 8003590:	2100      	movs	r1, #0
 8003592:	488b      	ldr	r0, [pc, #556]	; (80037c0 <processUartReceiveCommandInformationFeedBack+0x920>)
 8003594:	f003 fd26 	bl	8006fe4 <memset>
								memset(pstrPID,0,sizeof(pstrPID));
 8003598:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800359c:	2205      	movs	r2, #5
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f003 fd1f 	bl	8006fe4 <memset>
								memset(pstrDeviceType,0,sizeof(pstrDeviceType));
 80035a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80035aa:	2203      	movs	r2, #3
 80035ac:	2100      	movs	r1, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	f003 fd18 	bl	8006fe4 <memset>
								byCountTemp = 0;
 80035b4:	4b7c      	ldr	r3, [pc, #496]	; (80037a8 <processUartReceiveCommandInformationFeedBack+0x908>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
				break;
 80035ba:	e0e6      	b.n	800378a <processUartReceiveCommandInformationFeedBack+0x8ea>
				if(strcmp(&g_pstrMACBle[4],&g_pstrMACLast[4])!=0 &&(byStatusTemp>=2))
 80035bc:	4981      	ldr	r1, [pc, #516]	; (80037c4 <processUartReceiveCommandInformationFeedBack+0x924>)
 80035be:	4882      	ldr	r0, [pc, #520]	; (80037c8 <processUartReceiveCommandInformationFeedBack+0x928>)
 80035c0:	f7fc fe08 	bl	80001d4 <strcmp>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80e1 	beq.w	800378e <processUartReceiveCommandInformationFeedBack+0x8ee>
 80035cc:	4b7f      	ldr	r3, [pc, #508]	; (80037cc <processUartReceiveCommandInformationFeedBack+0x92c>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	f240 80dc 	bls.w	800378e <processUartReceiveCommandInformationFeedBack+0x8ee>
					strcpy(g_pstrMACLast,pstrMAC);
 80035d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035da:	4619      	mov	r1, r3
 80035dc:	487c      	ldr	r0, [pc, #496]	; (80037d0 <processUartReceiveCommandInformationFeedBack+0x930>)
 80035de:	f003 fd18 	bl	8007012 <strcpy>
					if(g_byEnpointCntMCU == g_byEnpointCntBLE)
 80035e2:	4b7c      	ldr	r3, [pc, #496]	; (80037d4 <processUartReceiveCommandInformationFeedBack+0x934>)
 80035e4:	781a      	ldrb	r2, [r3, #0]
 80035e6:	4b7c      	ldr	r3, [pc, #496]	; (80037d8 <processUartReceiveCommandInformationFeedBack+0x938>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d17d      	bne.n	80036ea <processUartReceiveCommandInformationFeedBack+0x84a>
						byCountTemp = 0;
 80035ee:	4b6e      	ldr	r3, [pc, #440]	; (80037a8 <processUartReceiveCommandInformationFeedBack+0x908>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntMCU = 0;
 80035f4:	4b77      	ldr	r3, [pc, #476]	; (80037d4 <processUartReceiveCommandInformationFeedBack+0x934>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntBLE = 0;
 80035fa:	4b77      	ldr	r3, [pc, #476]	; (80037d8 <processUartReceiveCommandInformationFeedBack+0x938>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
						strcat(byDataPrint,g_pstrMACBle);
 8003600:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003604:	4975      	ldr	r1, [pc, #468]	; (80037dc <processUartReceiveCommandInformationFeedBack+0x93c>)
 8003606:	4618      	mov	r0, r3
 8003608:	f003 fcf4 	bl	8006ff4 <strcat>
						strcat(byDataPrint,",");
 800360c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003610:	4618      	mov	r0, r3
 8003612:	f7fc fde9 	bl	80001e8 <strlen>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800361e:	4413      	add	r3, r2
 8003620:	496f      	ldr	r1, [pc, #444]	; (80037e0 <processUartReceiveCommandInformationFeedBack+0x940>)
 8003622:	461a      	mov	r2, r3
 8003624:	460b      	mov	r3, r1
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,pstrDeviceType);
 800362a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800362e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f003 fcdd 	bl	8006ff4 <strcat>
						strcat(byDataPrint,",");
 800363a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800363e:	4618      	mov	r0, r3
 8003640:	f7fc fdd2 	bl	80001e8 <strlen>
 8003644:	4603      	mov	r3, r0
 8003646:	461a      	mov	r2, r3
 8003648:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800364c:	4413      	add	r3, r2
 800364e:	4964      	ldr	r1, [pc, #400]	; (80037e0 <processUartReceiveCommandInformationFeedBack+0x940>)
 8003650:	461a      	mov	r2, r3
 8003652:	460b      	mov	r3, r1
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,pstrPID);
 8003658:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800365c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f003 fcc6 	bl	8006ff4 <strcat>
						strcat(byDataPrint,",");
 8003668:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800366c:	4618      	mov	r0, r3
 800366e:	f7fc fdbb 	bl	80001e8 <strlen>
 8003672:	4603      	mov	r3, r0
 8003674:	461a      	mov	r2, r3
 8003676:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800367a:	4413      	add	r3, r2
 800367c:	4958      	ldr	r1, [pc, #352]	; (80037e0 <processUartReceiveCommandInformationFeedBack+0x940>)
 800367e:	461a      	mov	r2, r3
 8003680:	460b      	mov	r3, r1
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,g_pstrVersionZigBee);
 8003686:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800368a:	494d      	ldr	r1, [pc, #308]	; (80037c0 <processUartReceiveCommandInformationFeedBack+0x920>)
 800368c:	4618      	mov	r0, r3
 800368e:	f003 fcb1 	bl	8006ff4 <strcat>
						strcat(byDataPrint,",");
 8003692:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003696:	4618      	mov	r0, r3
 8003698:	f7fc fda6 	bl	80001e8 <strlen>
 800369c:	4603      	mov	r3, r0
 800369e:	461a      	mov	r2, r3
 80036a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036a4:	4413      	add	r3, r2
 80036a6:	494e      	ldr	r1, [pc, #312]	; (80037e0 <processUartReceiveCommandInformationFeedBack+0x940>)
 80036a8:	461a      	mov	r2, r3
 80036aa:	460b      	mov	r3, r1
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,g_pstrVersionBluetooth);
 80036b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036b4:	4941      	ldr	r1, [pc, #260]	; (80037bc <processUartReceiveCommandInformationFeedBack+0x91c>)
 80036b6:	4618      	mov	r0, r3
 80036b8:	f003 fc9c 	bl	8006ff4 <strcat>
						generateQRCode(byDataPrint,strlen(byDataPrint));
 80036bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fc fd91 	bl	80001e8 <strlen>
 80036c6:	4603      	mov	r3, r0
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036ce:	4611      	mov	r1, r2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff f8bb 	bl	800284c <generateQRCode>
						printMACLcd(g_pstrMACBle,8,120,ucg_font_5x7_mf);
 80036d6:	4b37      	ldr	r3, [pc, #220]	; (80037b4 <processUartReceiveCommandInformationFeedBack+0x914>)
 80036d8:	2278      	movs	r2, #120	; 0x78
 80036da:	2108      	movs	r1, #8
 80036dc:	483f      	ldr	r0, [pc, #252]	; (80037dc <processUartReceiveCommandInformationFeedBack+0x93c>)
 80036de:	f000 f9f3 	bl	8003ac8 <printMACLcd>
						byFlagOfBufReset = 0;
 80036e2:	4b40      	ldr	r3, [pc, #256]	; (80037e4 <processUartReceiveCommandInformationFeedBack+0x944>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
				break;
 80036e8:	e051      	b.n	800378e <processUartReceiveCommandInformationFeedBack+0x8ee>
							if(byCountTemp == 0)
 80036ea:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <processUartReceiveCommandInformationFeedBack+0x908>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10e      	bne.n	8003710 <processUartReceiveCommandInformationFeedBack+0x870>
								memset(g_pstrMACLast,0,sizeof(g_pstrMACLast));
 80036f2:	2211      	movs	r2, #17
 80036f4:	2100      	movs	r1, #0
 80036f6:	4836      	ldr	r0, [pc, #216]	; (80037d0 <processUartReceiveCommandInformationFeedBack+0x930>)
 80036f8:	f003 fc74 	bl	8006fe4 <memset>
								byStatusTemp =0;
 80036fc:	4b33      	ldr	r3, [pc, #204]	; (80037cc <processUartReceiveCommandInformationFeedBack+0x92c>)
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
								byCountTemp ++;
 8003702:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <processUartReceiveCommandInformationFeedBack+0x908>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	3301      	adds	r3, #1
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <processUartReceiveCommandInformationFeedBack+0x908>)
 800370c:	701a      	strb	r2, [r3, #0]
				break;
 800370e:	e03e      	b.n	800378e <processUartReceiveCommandInformationFeedBack+0x8ee>
							}else if(byCountTemp>=1)
 8003710:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <processUartReceiveCommandInformationFeedBack+0x908>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d03a      	beq.n	800378e <processUartReceiveCommandInformationFeedBack+0x8ee>
								char byText[] = "Firmware ERROR!!!";
 8003718:	4b24      	ldr	r3, [pc, #144]	; (80037ac <processUartReceiveCommandInformationFeedBack+0x90c>)
 800371a:	f107 0408 	add.w	r4, r7, #8
 800371e:	461d      	mov	r5, r3
 8003720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	8023      	strh	r3, [r4, #0]
								lcdClearAxisY(20,128);
 8003728:	2180      	movs	r1, #128	; 0x80
 800372a:	2014      	movs	r0, #20
 800372c:	f7ff f9a4 	bl	8002a78 <lcdClearAxisY>
								lcdPrintText(byText,20,50,ucg_font_6x10_mf);
 8003730:	f107 0008 	add.w	r0, r7, #8
 8003734:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <processUartReceiveCommandInformationFeedBack+0x910>)
 8003736:	2232      	movs	r2, #50	; 0x32
 8003738:	2114      	movs	r1, #20
 800373a:	f7ff f9d1 	bl	8002ae0 <lcdPrintText>
								printMACLcd(g_pstrMACBle,8,70,ucg_font_5x7_mf);
 800373e:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <processUartReceiveCommandInformationFeedBack+0x914>)
 8003740:	2246      	movs	r2, #70	; 0x46
 8003742:	2108      	movs	r1, #8
 8003744:	4825      	ldr	r0, [pc, #148]	; (80037dc <processUartReceiveCommandInformationFeedBack+0x93c>)
 8003746:	f000 f9bf 	bl	8003ac8 <printMACLcd>
								memset(g_pstrVersionBluetooth,0,sizeof(g_pstrVersionBluetooth));
 800374a:	2207      	movs	r2, #7
 800374c:	2100      	movs	r1, #0
 800374e:	481b      	ldr	r0, [pc, #108]	; (80037bc <processUartReceiveCommandInformationFeedBack+0x91c>)
 8003750:	f003 fc48 	bl	8006fe4 <memset>
								memset(g_pstrVersionZigBee,0,sizeof(g_pstrVersionZigBee));
 8003754:	2207      	movs	r2, #7
 8003756:	2100      	movs	r1, #0
 8003758:	4819      	ldr	r0, [pc, #100]	; (80037c0 <processUartReceiveCommandInformationFeedBack+0x920>)
 800375a:	f003 fc43 	bl	8006fe4 <memset>
								memset(pstrPID,0,sizeof(pstrPID));
 800375e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003762:	2205      	movs	r2, #5
 8003764:	2100      	movs	r1, #0
 8003766:	4618      	mov	r0, r3
 8003768:	f003 fc3c 	bl	8006fe4 <memset>
								memset(pstrDeviceType,0,sizeof(pstrDeviceType));
 800376c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003770:	2203      	movs	r2, #3
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f003 fc35 	bl	8006fe4 <memset>
								byCountTemp = 0;
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <processUartReceiveCommandInformationFeedBack+0x908>)
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
				break;
 8003780:	e005      	b.n	800378e <processUartReceiveCommandInformationFeedBack+0x8ee>
				break;
 8003782:	bf00      	nop
 8003784:	e004      	b.n	8003790 <processUartReceiveCommandInformationFeedBack+0x8f0>
				break;
 8003786:	bf00      	nop
 8003788:	e002      	b.n	8003790 <processUartReceiveCommandInformationFeedBack+0x8f0>
				break;
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <processUartReceiveCommandInformationFeedBack+0x8f0>
				break;
 800378e:	bf00      	nop
			}

	if(byStatusTemp >=2)
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <processUartReceiveCommandInformationFeedBack+0x92c>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d902      	bls.n	800379e <processUartReceiveCommandInformationFeedBack+0x8fe>
	{
		byStatusTemp =0;
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <processUartReceiveCommandInformationFeedBack+0x92c>)
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
	}


}
 800379e:	bf00      	nop
 80037a0:	3778      	adds	r7, #120	; 0x78
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bdb0      	pop	{r4, r5, r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000418 	.word	0x20000418
 80037ac:	08007104 	.word	0x08007104
 80037b0:	0800834c 	.word	0x0800834c
 80037b4:	08007bd4 	.word	0x08007bd4
 80037b8:	200003b4 	.word	0x200003b4
 80037bc:	200003f0 	.word	0x200003f0
 80037c0:	200003f8 	.word	0x200003f8
 80037c4:	200003e0 	.word	0x200003e0
 80037c8:	200003cc 	.word	0x200003cc
 80037cc:	20000416 	.word	0x20000416
 80037d0:	200003dc 	.word	0x200003dc
 80037d4:	200003af 	.word	0x200003af
 80037d8:	200003b0 	.word	0x200003b0
 80037dc:	200003c8 	.word	0x200003c8
 80037e0:	080070b8 	.word	0x080070b8
 80037e4:	20000417 	.word	0x20000417

080037e8 <procUartCmd>:
 * @brief  Xu ly truong CMD_ID cua thiet bi
 * @param  void *arg
 * @retval None
 */
static void procUartCmd(void *arg)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]

	CmdData_t *CmdData = (CmdData_t*)arg;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	60fb      	str	r3, [r7, #12]
	McuInfor_t * McuInfor = (McuInfor_t*)arg;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	60bb      	str	r3, [r7, #8]
	switch(CmdData->byCmdId)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2bab      	cmp	r3, #171	; 0xab
 80037fe:	d005      	beq.n	800380c <procUartCmd+0x24>
 8003800:	2bff      	cmp	r3, #255	; 0xff
 8003802:	d107      	bne.n	8003814 <procUartCmd+0x2c>
	{
	case CMD_ID_INFORMATION_FEEDBACK:
		processUartReceiveCommandInformationFeedBack(CmdData);
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f7ff fb4b 	bl	8002ea0 <processUartReceiveCommandInformationFeedBack>
		break;
 800380a:	e004      	b.n	8003816 <procUartCmd+0x2e>
	case CMD_ID_MCU_INFORMATION:
		processUartReceiveMCUInformation(McuInfor);
 800380c:	68b8      	ldr	r0, [r7, #8]
 800380e:	f7ff fb37 	bl	8002e80 <processUartReceiveMCUInformation>
		break;
 8003812:	e000      	b.n	8003816 <procUartCmd+0x2e>
	default:
			break;
 8003814:	bf00      	nop
	}

}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <processSerialUartReceiver>:
 * @brief  Xu ly ban tin nhan duoc tu UART
 * @param  None
 * @retval None
 */
static void processSerialUartReceiver(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
	static uint8_t uartState;
	uartState = PollRxBuff();
 8003824:	f000 f826 	bl	8003874 <PollRxBuff>
 8003828:	4603      	mov	r3, r0
 800382a:	461a      	mov	r2, r3
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <processSerialUartReceiver+0x48>)
 800382e:	701a      	strb	r2, [r3, #0]

	if(uartState != UART_STATE_IDLE)
 8003830:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <processSerialUartReceiver+0x48>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d014      	beq.n	8003862 <processSerialUartReceiver+0x42>
	{
		switch(uartState)
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <processSerialUartReceiver+0x48>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d002      	beq.n	8003846 <processSerialUartReceiver+0x26>
 8003840:	2b04      	cmp	r3, #4
 8003842:	d007      	beq.n	8003854 <processSerialUartReceiver+0x34>
		case UART_STATE_ERROR:
			uartState = UART_STATE_IDLE;
			g_eRxState = RX_STATE_START_1_BYTE;
			break;
		default:
			break;
 8003844:	e00e      	b.n	8003864 <processSerialUartReceiver+0x44>
			procUartCmd((void*)&g_pbyRxDataByte[1]);
 8003846:	4809      	ldr	r0, [pc, #36]	; (800386c <processSerialUartReceiver+0x4c>)
 8003848:	f7ff ffce 	bl	80037e8 <procUartCmd>
			g_eRxState = RX_STATE_START_1_BYTE;
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <processSerialUartReceiver+0x50>)
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
			break;
 8003852:	e007      	b.n	8003864 <processSerialUartReceiver+0x44>
			uartState = UART_STATE_IDLE;
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <processSerialUartReceiver+0x48>)
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]
			g_eRxState = RX_STATE_START_1_BYTE;
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <processSerialUartReceiver+0x50>)
 800385c:	2200      	movs	r2, #0
 800385e:	701a      	strb	r2, [r3, #0]
			break;
 8003860:	e000      	b.n	8003864 <processSerialUartReceiver+0x44>
		}
	}
 8003862:	bf00      	nop
}
 8003864:	bf00      	nop
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000419 	.word	0x20000419
 800386c:	200002ad 	.word	0x200002ad
 8003870:	200002a8 	.word	0x200002a8

08003874 <PollRxBuff>:
 * @brief  Phan tich ban tin UART nhan duoc, loai bo cac ban tin loi.
 * @param  void *arg
 * @retval None
 */
static uint8_t PollRxBuff(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
	//1. Khai bao bien chua dÃ†Â° lieu lay tu hang doi
	uint8_t RxDataTemp;
	uint8_t UartState = (uint8_t)UART_STATE_IDLE;
 800387a:	2300      	movs	r3, #0
 800387c:	71fb      	strb	r3, [r7, #7]

	//2. Tao vong lap den khi het du lieu trong hang doi
	while((bufNumItems(&g_pUartRxQueue) !=0) && (UartState == UART_STATE_IDLE)){
 800387e:	e061      	b.n	8003944 <PollRxBuff+0xd0>
		//2.0 Lay 1 phan tu trong hang doi
		bufDeDat(&g_pUartRxQueue, &RxDataTemp);
 8003880:	1dbb      	adds	r3, r7, #6
 8003882:	4619      	mov	r1, r3
 8003884:	4836      	ldr	r0, [pc, #216]	; (8003960 <PollRxBuff+0xec>)
 8003886:	f002 fe19 	bl	80064bc <bufDeDat>
		switch(g_eRxState)
 800388a:	4b36      	ldr	r3, [pc, #216]	; (8003964 <PollRxBuff+0xf0>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b03      	cmp	r3, #3
 8003890:	d854      	bhi.n	800393c <PollRxBuff+0xc8>
 8003892:	a201      	add	r2, pc, #4	; (adr r2, 8003898 <PollRxBuff+0x24>)
 8003894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003898:	080038a9 	.word	0x080038a9
 800389c:	080038bd 	.word	0x080038bd
 80038a0:	080038e3 	.word	0x080038e3
 80038a4:	08003925 	.word	0x08003925
		{
		//2.1 Uart state- Start byte: 0xb1
		case RX_STATE_START_1_BYTE:
		{
			//2.1.1 TH: byte du lieu lay ra la byte start 0xb1
			if(RxDataTemp == BYTE_START_1)
 80038a8:	79bb      	ldrb	r3, [r7, #6]
 80038aa:	2b4c      	cmp	r3, #76	; 0x4c
 80038ac:	d103      	bne.n	80038b6 <PollRxBuff+0x42>
				 * Neu la byte start thi se khoi tao
				 * 1. Bien check xor = 0xff
				 * 2. Khoi tao so byte data doc duoc
				 * 3. Khoi tao g_eRxState sang trang thai bat dau doc du lieu
				 */
				g_eRxState = RX_STATE_START_2_BYTE;
 80038ae:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <PollRxBuff+0xf0>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
 80038b4:	e046      	b.n	8003944 <PollRxBuff+0xd0>
			}
			//2.1.4 TH: con lai
			else
			{
				UartState = UART_STATE_ERROR;
 80038b6:	2304      	movs	r3, #4
 80038b8:	71fb      	strb	r3, [r7, #7]
			}
			break;
 80038ba:	e043      	b.n	8003944 <PollRxBuff+0xd0>
		}
		case RX_STATE_START_2_BYTE:
				{
					//2.1.1 TH: byte du lieu lay ra la byte start 0xb1
					if(RxDataTemp == BYTE_START_2)
 80038bc:	79bb      	ldrb	r3, [r7, #6]
 80038be:	2b4d      	cmp	r3, #77	; 0x4d
 80038c0:	d109      	bne.n	80038d6 <PollRxBuff+0x62>
						 * Neu la byte start thi se khoi tao
						 * 1. Bien check xor = 0xff
						 * 2. Khoi tao so byte data doc duoc
						 * 3. Khoi tao g_eRxState sang trang thai bat dau doc du lieu
						 */
						g_byRxCheckXor = 0;
 80038c2:	4b29      	ldr	r3, [pc, #164]	; (8003968 <PollRxBuff+0xf4>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
						g_byRxIndexByte = 0;
 80038c8:	4b28      	ldr	r3, [pc, #160]	; (800396c <PollRxBuff+0xf8>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	701a      	strb	r2, [r3, #0]
						g_eRxState = RX_STATE_DATA_BYTES;
 80038ce:	4b25      	ldr	r3, [pc, #148]	; (8003964 <PollRxBuff+0xf0>)
 80038d0:	2202      	movs	r2, #2
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	e036      	b.n	8003944 <PollRxBuff+0xd0>
					}
					//2.1.4 TH: con lai
					else
					{
						g_eRxState = RX_STATE_START_1_BYTE;
 80038d6:	4b23      	ldr	r3, [pc, #140]	; (8003964 <PollRxBuff+0xf0>)
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
						UartState = UART_STATE_ERROR;
 80038dc:	2304      	movs	r3, #4
 80038de:	71fb      	strb	r3, [r7, #7]
					}
					break;
 80038e0:	e030      	b.n	8003944 <PollRxBuff+0xd0>
			 * 2. Tinh toan check Xor de xac nhan toan ven cua data da nhan duoc
			 * 3. Neu so byte doc duoc lon hon gia tri ma mang co the luu thi reset va bao loi
			 */
			if(g_byRxIndexByte < RX_MAX_INDEX_BYTE)
			{
				g_pbyRxDataByte[g_byRxIndexByte] = RxDataTemp;
 80038e2:	4b22      	ldr	r3, [pc, #136]	; (800396c <PollRxBuff+0xf8>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	79b9      	ldrb	r1, [r7, #6]
 80038ea:	4b21      	ldr	r3, [pc, #132]	; (8003970 <PollRxBuff+0xfc>)
 80038ec:	5499      	strb	r1, [r3, r2]
				if(g_byRxIndexByte >0)
 80038ee:	4b1f      	ldr	r3, [pc, #124]	; (800396c <PollRxBuff+0xf8>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d006      	beq.n	8003904 <PollRxBuff+0x90>
				{
					g_byRxCheckXor ^= RxDataTemp;
 80038f6:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <PollRxBuff+0xf4>)
 80038f8:	781a      	ldrb	r2, [r3, #0]
 80038fa:	79bb      	ldrb	r3, [r7, #6]
 80038fc:	4053      	eors	r3, r2
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	4b19      	ldr	r3, [pc, #100]	; (8003968 <PollRxBuff+0xf4>)
 8003902:	701a      	strb	r2, [r3, #0]
				}
				// Neu la byte cuoi cung thi se chuyen sang check xor
				// Sau byte start la byte chua do dai du lieu
				if(++g_byRxIndexByte == g_pbyRxDataByte[0])
 8003904:	4b19      	ldr	r3, [pc, #100]	; (800396c <PollRxBuff+0xf8>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	3301      	adds	r3, #1
 800390a:	b2da      	uxtb	r2, r3
 800390c:	4b17      	ldr	r3, [pc, #92]	; (800396c <PollRxBuff+0xf8>)
 800390e:	701a      	strb	r2, [r3, #0]
 8003910:	4b16      	ldr	r3, [pc, #88]	; (800396c <PollRxBuff+0xf8>)
 8003912:	781a      	ldrb	r2, [r3, #0]
 8003914:	4b16      	ldr	r3, [pc, #88]	; (8003970 <PollRxBuff+0xfc>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d113      	bne.n	8003944 <PollRxBuff+0xd0>
				{
					g_eRxState = RX_STATE_CXOR_BYTE;
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <PollRxBuff+0xf0>)
 800391e:	2203      	movs	r2, #3
 8003920:	701a      	strb	r2, [r3, #0]
			}else
			{
				g_eRxState = RX_STATE_START_1_BYTE;
				UartState = UART_STATE_ERROR;
			}
			break;
 8003922:	e00f      	b.n	8003944 <PollRxBuff+0xd0>
			 * Neu byte check xor gui toi bang gia tri tinh duoc thi data duoc chap nhan
			 * Nguoc lai thi bao loi
			 */
			//USART_SendData(USARTx, RxDataTemp);
			//USART_SendData(USARTx, g_byRxCheckXor);
			if(RxDataTemp == g_byRxCheckXor) {
 8003924:	79ba      	ldrb	r2, [r7, #6]
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <PollRxBuff+0xf4>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d103      	bne.n	8003936 <PollRxBuff+0xc2>
				UartState = UART_STATE_DATA_RECEIVED;
 800392e:	2301      	movs	r3, #1
 8003930:	71fb      	strb	r3, [r7, #7]
				return UartState;
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	e010      	b.n	8003958 <PollRxBuff+0xe4>
			} else {
				UartState = UART_STATE_ERROR;
 8003936:	2304      	movs	r3, #4
 8003938:	71fb      	strb	r3, [r7, #7]
			}

			break;
 800393a:	e003      	b.n	8003944 <PollRxBuff+0xd0>
		//2.1 Default
		default:
			g_eRxState = RX_STATE_START_1_BYTE;
 800393c:	4b09      	ldr	r3, [pc, #36]	; (8003964 <PollRxBuff+0xf0>)
 800393e:	2200      	movs	r2, #0
 8003940:	701a      	strb	r2, [r3, #0]
			break;
 8003942:	bf00      	nop
	while((bufNumItems(&g_pUartRxQueue) !=0) && (UartState == UART_STATE_IDLE)){
 8003944:	4806      	ldr	r0, [pc, #24]	; (8003960 <PollRxBuff+0xec>)
 8003946:	f002 fd20 	bl	800638a <bufNumItems>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <PollRxBuff+0xe2>
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d094      	beq.n	8003880 <PollRxBuff+0xc>
		}

	}
	return UartState;
 8003956:	79fb      	ldrb	r3, [r7, #7]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000298 	.word	0x20000298
 8003964:	200002a8 	.word	0x200002a8
 8003968:	200003ac 	.word	0x200003ac
 800396c:	200003ad 	.word	0x200003ad
 8003970:	200002ac 	.word	0x200002ac

08003974 <serialUartInit>:
 * @brief  Usart & Buffer initialization
 * @param  None
 * @retval None
 */
static void serialUartInit(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
	//1. Khoi tao bo dem chua du lieu gui ve
	bufInit(g_pBuffDataRx, &g_pUartRxQueue, sizeof(g_pBuffDataRx[0]), SIZE_BUFF_DATA_RX);
 8003978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800397c:	2201      	movs	r2, #1
 800397e:	4904      	ldr	r1, [pc, #16]	; (8003990 <serialUartInit+0x1c>)
 8003980:	4804      	ldr	r0, [pc, #16]	; (8003994 <serialUartInit+0x20>)
 8003982:	f002 fce7 	bl	8006354 <bufInit>

	//2. Khoi tao ket noi USART2
	usartInit();
 8003986:	f000 f807 	bl	8003998 <usartInit>
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000298 	.word	0x20000298
 8003994:	20000198 	.word	0x20000198

08003998 <usartInit>:
 * @brief  Usart initialization
 * @param  None
 * @retval None
 */
static void usartInit(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef	GPIO_InitStruct;
		USART_InitTypeDef	USART_InitStruct;
		NVIC_InitTypeDef	NVIC_InitStruct;

		//1. Configuare GPIO & AF
		RCC_AHB1PeriphClockCmd(USART6_GPIO_RCC, ENABLE);
 800399e:	2101      	movs	r1, #1
 80039a0:	2001      	movs	r0, #1
 80039a2:	f000 fcdb 	bl	800435c <RCC_AHB1PeriphClockCmd>

		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80039a6:	2302      	movs	r3, #2
 80039a8:	773b      	strb	r3, [r7, #28]
		GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80039aa:	2300      	movs	r3, #0
 80039ac:	77bb      	strb	r3, [r7, #30]
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80039ae:	2301      	movs	r3, #1
 80039b0:	77fb      	strb	r3, [r7, #31]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80039b2:	2303      	movs	r3, #3
 80039b4:	777b      	strb	r3, [r7, #29]

		GPIO_InitStruct.GPIO_Pin = USART6_PIN_RX;
 80039b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ba:	61bb      	str	r3, [r7, #24]
		GPIO_Init(USART6_PORT, &GPIO_InitStruct);
 80039bc:	f107 0318 	add.w	r3, r7, #24
 80039c0:	4619      	mov	r1, r3
 80039c2:	481d      	ldr	r0, [pc, #116]	; (8003a38 <usartInit+0xa0>)
 80039c4:	f000 fb18 	bl	8003ff8 <GPIO_Init>

		GPIO_PinAFConfig(USART6_PORT, USART6_PINSOURCE_RX, USART6_AF);
 80039c8:	2208      	movs	r2, #8
 80039ca:	210c      	movs	r1, #12
 80039cc:	481a      	ldr	r0, [pc, #104]	; (8003a38 <usartInit+0xa0>)
 80039ce:	f000 fbd3 	bl	8004178 <GPIO_PinAFConfig>
		//2. Configuare USART6: Bus APB2
		RCC_APB2PeriphClockCmd(USART6_RCC, ENABLE);
 80039d2:	2101      	movs	r1, #1
 80039d4:	2020      	movs	r0, #32
 80039d6:	f000 fce1 	bl	800439c <RCC_APB2PeriphClockCmd>

		USART_InitStruct.USART_BaudRate = USART6_BAUDRATE;
 80039da:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80039de:	60bb      	str	r3, [r7, #8]
		USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80039e0:	2300      	movs	r3, #0
 80039e2:	82bb      	strh	r3, [r7, #20]
		USART_InitStruct.USART_Mode = USART_Mode_Rx;
 80039e4:	2304      	movs	r3, #4
 80039e6:	827b      	strh	r3, [r7, #18]
		USART_InitStruct.USART_Parity = USART_Parity_No;
 80039e8:	2300      	movs	r3, #0
 80039ea:	823b      	strh	r3, [r7, #16]
		USART_InitStruct.USART_StopBits = USART_StopBits_1;
 80039ec:	2300      	movs	r3, #0
 80039ee:	81fb      	strh	r3, [r7, #14]
		USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 80039f0:	2300      	movs	r3, #0
 80039f2:	81bb      	strh	r3, [r7, #12]

		USART_Init(USART6,&USART_InitStruct);
 80039f4:	f107 0308 	add.w	r3, r7, #8
 80039f8:	4619      	mov	r1, r3
 80039fa:	4810      	ldr	r0, [pc, #64]	; (8003a3c <usartInit+0xa4>)
 80039fc:	f000 fd30 	bl	8004460 <USART_Init>

		//3. Enable USART6 Receive intterupt
		USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);
 8003a00:	2201      	movs	r2, #1
 8003a02:	f240 5125 	movw	r1, #1317	; 0x525
 8003a06:	480d      	ldr	r0, [pc, #52]	; (8003a3c <usartInit+0xa4>)
 8003a08:	f000 fe14 	bl	8004634 <USART_ITConfig>

		//4. Configuare NVIC
		NVIC_InitStruct.NVIC_IRQChannel = USART6_IRQn;
 8003a0c:	2347      	movs	r3, #71	; 0x47
 8003a0e:	713b      	strb	r3, [r7, #4]
		NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8003a10:	2301      	movs	r3, #1
 8003a12:	71fb      	strb	r3, [r7, #7]
		NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 1;
 8003a14:	2301      	movs	r3, #1
 8003a16:	717b      	strb	r3, [r7, #5]
		NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	71bb      	strb	r3, [r7, #6]

		NVIC_InitStruct.NVIC_IRQChannel = USART6_IRQn;
 8003a1c:	2347      	movs	r3, #71	; 0x47
 8003a1e:	713b      	strb	r3, [r7, #4]
		NVIC_Init(&NVIC_InitStruct);
 8003a20:	1d3b      	adds	r3, r7, #4
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fa04 	bl	8003e30 <NVIC_Init>

		USART_Cmd(USART6, ENABLE);
 8003a28:	2101      	movs	r1, #1
 8003a2a:	4804      	ldr	r0, [pc, #16]	; (8003a3c <usartInit+0xa4>)
 8003a2c:	f000 fdd2 	bl	80045d4 <USART_Cmd>
}
 8003a30:	bf00      	nop
 8003a32:	3720      	adds	r7, #32
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40020000 	.word	0x40020000
 8003a3c:	40011400 	.word	0x40011400

08003a40 <hexToAscii>:

static void hexToAscii(char *pByDataOutPut,uint8_t *pByDataInPut,uint8_t byDataLength)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	71fb      	strb	r3, [r7, #7]
	uint8_t byMsb,byLsb;

	static char str[2]={0};
	for(uint8_t i = 0; i<byDataLength; i++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	757b      	strb	r3, [r7, #21]
 8003a52:	e02d      	b.n	8003ab0 <hexToAscii+0x70>
	{
		byMsb = (pByDataInPut[i]>>4);
 8003a54:	7d7b      	ldrb	r3, [r7, #21]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	4413      	add	r3, r2
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	75fb      	strb	r3, [r7, #23]
		byLsb = pByDataInPut[i] & 0x0F;
 8003a60:	7d7b      	ldrb	r3, [r7, #21]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4413      	add	r3, r2
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	75bb      	strb	r3, [r7, #22]
		if((byMsb>=0)&&(byMsb<=9))
 8003a6e:	7dfb      	ldrb	r3, [r7, #23]
 8003a70:	2b09      	cmp	r3, #9
 8003a72:	d803      	bhi.n	8003a7c <hexToAscii+0x3c>
		{
			byMsb += 48;
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	3330      	adds	r3, #48	; 0x30
 8003a78:	75fb      	strb	r3, [r7, #23]
 8003a7a:	e002      	b.n	8003a82 <hexToAscii+0x42>
		}else
		{
			byMsb += 55;
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	3337      	adds	r3, #55	; 0x37
 8003a80:	75fb      	strb	r3, [r7, #23]
		}
		if((byLsb>=0)&&(byLsb<=9))
 8003a82:	7dbb      	ldrb	r3, [r7, #22]
 8003a84:	2b09      	cmp	r3, #9
 8003a86:	d803      	bhi.n	8003a90 <hexToAscii+0x50>
		{
			byLsb += 48;
 8003a88:	7dbb      	ldrb	r3, [r7, #22]
 8003a8a:	3330      	adds	r3, #48	; 0x30
 8003a8c:	75bb      	strb	r3, [r7, #22]
 8003a8e:	e002      	b.n	8003a96 <hexToAscii+0x56>
		}else
		{
			byLsb += 55;
 8003a90:	7dbb      	ldrb	r3, [r7, #22]
 8003a92:	3337      	adds	r3, #55	; 0x37
 8003a94:	75bb      	strb	r3, [r7, #22]
		}
		str[0] = (char)byMsb;
 8003a96:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <hexToAscii+0x84>)
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	7013      	strb	r3, [r2, #0]
		str[1] = (char)byLsb;
 8003a9c:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <hexToAscii+0x84>)
 8003a9e:	7dbb      	ldrb	r3, [r7, #22]
 8003aa0:	7053      	strb	r3, [r2, #1]
		strcat(pByDataOutPut,str);
 8003aa2:	4908      	ldr	r1, [pc, #32]	; (8003ac4 <hexToAscii+0x84>)
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f003 faa5 	bl	8006ff4 <strcat>
	for(uint8_t i = 0; i<byDataLength; i++)
 8003aaa:	7d7b      	ldrb	r3, [r7, #21]
 8003aac:	3301      	adds	r3, #1
 8003aae:	757b      	strb	r3, [r7, #21]
 8003ab0:	7d7a      	ldrb	r2, [r7, #21]
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d3cd      	bcc.n	8003a54 <hexToAscii+0x14>
	}
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	2000041c 	.word	0x2000041c

08003ac8 <printMACLcd>:
 * @brief  In ra man hinh MAC cua thiet bi theo form XX:XX:XX:XX
 * @param
 * @retval None
 */
void printMACLcd(char *pTextMAC,uint8_t x,uint8_t y,const ucg_fntpgm_uint8_t *font)
{
 8003ac8:	b590      	push	{r4, r7, lr}
 8003aca:	b08d      	sub	sp, #52	; 0x34
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	72fb      	strb	r3, [r7, #11]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	72bb      	strb	r3, [r7, #10]

	char strTemp[24];

	char strTemp2[] = ":";
 8003ada:	233a      	movs	r3, #58	; 0x3a
 8003adc:	823b      	strh	r3, [r7, #16]

	memset(strTemp,0,sizeof(strTemp));
 8003ade:	f107 0314 	add.w	r3, r7, #20
 8003ae2:	2218      	movs	r2, #24
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f003 fa7c 	bl	8006fe4 <memset>

	uint8_t j = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t i = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for(i = 0; i<strlen(pTextMAC); i++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003afe:	e02c      	b.n	8003b5a <printMACLcd+0x92>
	{
			if((i%2 == 0)&&(i !=0))
 8003b00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d110      	bne.n	8003b30 <printMACLcd+0x68>
 8003b0e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00c      	beq.n	8003b30 <printMACLcd+0x68>
			{
				j++;
 8003b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				strcat(strTemp,strTemp2);
 8003b20:	f107 0210 	add.w	r2, r7, #16
 8003b24:	f107 0314 	add.w	r3, r7, #20
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f003 fa62 	bl	8006ff4 <strcat>
			}
			strTemp[j] = pTextMAC[i];
 8003b30:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	441a      	add	r2, r3
 8003b38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b3c:	7812      	ldrb	r2, [r2, #0]
 8003b3e:	3330      	adds	r3, #48	; 0x30
 8003b40:	443b      	add	r3, r7
 8003b42:	f803 2c1c 	strb.w	r2, [r3, #-28]
			j++;
 8003b46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(i = 0; i<strlen(pTextMAC); i++)
 8003b50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003b54:	3301      	adds	r3, #1
 8003b56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003b5a:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f7fc fb42 	bl	80001e8 <strlen>
 8003b64:	4603      	mov	r3, r0
 8003b66:	429c      	cmp	r4, r3
 8003b68:	d3ca      	bcc.n	8003b00 <printMACLcd+0x38>
	}
	lcdPrintText(strTemp,x,y,font);
 8003b6a:	7aba      	ldrb	r2, [r7, #10]
 8003b6c:	7af9      	ldrb	r1, [r7, #11]
 8003b6e:	f107 0014 	add.w	r0, r7, #20
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f7fe ffb4 	bl	8002ae0 <lcdPrintText>

}
 8003b78:	bf00      	nop
 8003b7a:	3734      	adds	r7, #52	; 0x34
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd90      	pop	{r4, r7, pc}

08003b80 <USART6x_IRQHandler>:
 * @brief
 * @param  None
 * @retval None
 */
void USART6x_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
	uint8_t byData;
	if((USART_GetITStatus(USART6, USART_IT_RXNE) == SET))
 8003b86:	f240 5125 	movw	r1, #1317	; 0x525
 8003b8a:	4810      	ldr	r0, [pc, #64]	; (8003bcc <USART6x_IRQHandler+0x4c>)
 8003b8c:	f000 fd9a 	bl	80046c4 <USART_GetITStatus>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d110      	bne.n	8003bb8 <USART6x_IRQHandler+0x38>
	{
		byData = USART_ReceiveData(USART6);
 8003b96:	480d      	ldr	r0, [pc, #52]	; (8003bcc <USART6x_IRQHandler+0x4c>)
 8003b98:	f000 fd3c 	bl	8004614 <USART_ReceiveData>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	71fb      	strb	r3, [r7, #7]
		g_byRxNumByte++;
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <USART6x_IRQHandler+0x50>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <USART6x_IRQHandler+0x50>)
 8003bac:	701a      	strb	r2, [r3, #0]
		bufEnDat(&g_pUartRxQueue,&byData);
 8003bae:	1dfb      	adds	r3, r7, #7
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4808      	ldr	r0, [pc, #32]	; (8003bd4 <USART6x_IRQHandler+0x54>)
 8003bb4:	f002 fc34 	bl	8006420 <bufEnDat>
	}
	USART_ClearITPendingBit(USART6, USART_IT_RXNE);
 8003bb8:	f240 5125 	movw	r1, #1317	; 0x525
 8003bbc:	4803      	ldr	r0, [pc, #12]	; (8003bcc <USART6x_IRQHandler+0x4c>)
 8003bbe:	f000 fddc 	bl	800477a <USART_ClearITPendingBit>
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40011400 	.word	0x40011400
 8003bd0:	200003ae 	.word	0x200003ae
 8003bd4:	20000298 	.word	0x20000298

08003bd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003bd8:	480d      	ldr	r0, [pc, #52]	; (8003c10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003bda:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003bdc:	f000 f826 	bl	8003c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003be0:	480c      	ldr	r0, [pc, #48]	; (8003c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8003be2:	490d      	ldr	r1, [pc, #52]	; (8003c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003be4:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <LoopForever+0xe>)
  movs r3, #0
 8003be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003be8:	e002      	b.n	8003bf0 <LoopCopyDataInit>

08003bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bee:	3304      	adds	r3, #4

08003bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bf4:	d3f9      	bcc.n	8003bea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003bf8:	4c0a      	ldr	r4, [pc, #40]	; (8003c24 <LoopForever+0x16>)
  movs r3, #0
 8003bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bfc:	e001      	b.n	8003c02 <LoopFillZerobss>

08003bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c00:	3204      	adds	r2, #4

08003c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c04:	d3fb      	bcc.n	8003bfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003c06:	f003 f9bb 	bl	8006f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c0a:	f7ff f89d 	bl	8002d48 <main>

08003c0e <LoopForever>:

LoopForever:
    b LoopForever
 8003c0e:	e7fe      	b.n	8003c0e <LoopForever>
  ldr   r0, =_estack
 8003c10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c18:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003c1c:	0800a3e4 	.word	0x0800a3e4
  ldr r2, =_sbss
 8003c20:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003c24:	200015b4 	.word	0x200015b4

08003c28 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c28:	e7fe      	b.n	8003c28 <ADC_IRQHandler>
	...

08003c2c <SystemInit>:
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <SystemInit+0x60>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <SystemInit+0x60>)
 8003c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003c40:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <SystemInit+0x64>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a12      	ldr	r2, [pc, #72]	; (8003c90 <SystemInit+0x64>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <SystemInit+0x64>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <SystemInit+0x64>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a0e      	ldr	r2, [pc, #56]	; (8003c90 <SystemInit+0x64>)
 8003c58:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <SystemInit+0x64>)
 8003c64:	4a0b      	ldr	r2, [pc, #44]	; (8003c94 <SystemInit+0x68>)
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <SystemInit+0x64>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a08      	ldr	r2, [pc, #32]	; (8003c90 <SystemInit+0x64>)
 8003c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <SystemInit+0x64>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	f000 f889 	bl	8003d90 <SetSysClock>
 8003c7e:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <SystemInit+0x60>)
 8003c80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c84:	609a      	str	r2, [r3, #8]
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	e000ed00 	.word	0xe000ed00
 8003c90:	40023800 	.word	0x40023800
 8003c94:	24003010 	.word	0x24003010

08003c98 <SystemCoreClockUpdate>:
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	2302      	movs	r3, #2
 8003cb0:	607b      	str	r3, [r7, #4]
 8003cb2:	4b32      	ldr	r3, [pc, #200]	; (8003d7c <SystemCoreClockUpdate+0xe4>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d007      	beq.n	8003cd2 <SystemCoreClockUpdate+0x3a>
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d009      	beq.n	8003cda <SystemCoreClockUpdate+0x42>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d13d      	bne.n	8003d46 <SystemCoreClockUpdate+0xae>
 8003cca:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <SystemCoreClockUpdate+0xe8>)
 8003ccc:	4a2d      	ldr	r2, [pc, #180]	; (8003d84 <SystemCoreClockUpdate+0xec>)
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	e03d      	b.n	8003d4e <SystemCoreClockUpdate+0xb6>
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <SystemCoreClockUpdate+0xe8>)
 8003cd4:	4a2c      	ldr	r2, [pc, #176]	; (8003d88 <SystemCoreClockUpdate+0xf0>)
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	e039      	b.n	8003d4e <SystemCoreClockUpdate+0xb6>
 8003cda:	4b28      	ldr	r3, [pc, #160]	; (8003d7c <SystemCoreClockUpdate+0xe4>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	0d9b      	lsrs	r3, r3, #22
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <SystemCoreClockUpdate+0xe4>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cee:	607b      	str	r3, [r7, #4]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00c      	beq.n	8003d10 <SystemCoreClockUpdate+0x78>
 8003cf6:	4a24      	ldr	r2, [pc, #144]	; (8003d88 <SystemCoreClockUpdate+0xf0>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfe:	4a1f      	ldr	r2, [pc, #124]	; (8003d7c <SystemCoreClockUpdate+0xe4>)
 8003d00:	6852      	ldr	r2, [r2, #4]
 8003d02:	0992      	lsrs	r2, r2, #6
 8003d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d08:	fb02 f303 	mul.w	r3, r2, r3
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e00b      	b.n	8003d28 <SystemCoreClockUpdate+0x90>
 8003d10:	4a1c      	ldr	r2, [pc, #112]	; (8003d84 <SystemCoreClockUpdate+0xec>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <SystemCoreClockUpdate+0xe4>)
 8003d1a:	6852      	ldr	r2, [r2, #4]
 8003d1c:	0992      	lsrs	r2, r2, #6
 8003d1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	4b14      	ldr	r3, [pc, #80]	; (8003d7c <SystemCoreClockUpdate+0xe4>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	3301      	adds	r3, #1
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	4a0f      	ldr	r2, [pc, #60]	; (8003d80 <SystemCoreClockUpdate+0xe8>)
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	e003      	b.n	8003d4e <SystemCoreClockUpdate+0xb6>
 8003d46:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <SystemCoreClockUpdate+0xe8>)
 8003d48:	4a0e      	ldr	r2, [pc, #56]	; (8003d84 <SystemCoreClockUpdate+0xec>)
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	bf00      	nop
 8003d4e:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <SystemCoreClockUpdate+0xe4>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	091b      	lsrs	r3, r3, #4
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	4a0c      	ldr	r2, [pc, #48]	; (8003d8c <SystemCoreClockUpdate+0xf4>)
 8003d5a:	5cd3      	ldrb	r3, [r2, r3]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <SystemCoreClockUpdate+0xe8>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6a:	4a05      	ldr	r2, [pc, #20]	; (8003d80 <SystemCoreClockUpdate+0xe8>)
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	20000054 	.word	0x20000054
 8003d84:	00f42400 	.word	0x00f42400
 8003d88:	017d7840 	.word	0x017d7840
 8003d8c:	20000058 	.word	0x20000058

08003d90 <SetSysClock>:
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <SetSysClock+0x90>)
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	4a21      	ldr	r2, [pc, #132]	; (8003e20 <SetSysClock+0x90>)
 8003d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003da0:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <SetSysClock+0x94>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <SetSysClock+0x94>)
 8003da6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <SetSysClock+0x90>)
 8003dae:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <SetSysClock+0x90>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	6093      	str	r3, [r2, #8]
 8003db4:	4b1a      	ldr	r3, [pc, #104]	; (8003e20 <SetSysClock+0x90>)
 8003db6:	4a1a      	ldr	r2, [pc, #104]	; (8003e20 <SetSysClock+0x90>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	6093      	str	r3, [r2, #8]
 8003dbc:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <SetSysClock+0x90>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <SetSysClock+0x90>)
 8003dc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dc6:	6093      	str	r3, [r2, #8]
 8003dc8:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <SetSysClock+0x90>)
 8003dca:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <SetSysClock+0x98>)
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	4b14      	ldr	r3, [pc, #80]	; (8003e20 <SetSysClock+0x90>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a13      	ldr	r2, [pc, #76]	; (8003e20 <SetSysClock+0x90>)
 8003dd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	bf00      	nop
 8003ddc:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <SetSysClock+0x90>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f9      	beq.n	8003ddc <SetSysClock+0x4c>
 8003de8:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <SetSysClock+0x9c>)
 8003dea:	f240 6202 	movw	r2, #1538	; 0x602
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <SetSysClock+0x90>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <SetSysClock+0x90>)
 8003df6:	f023 0303 	bic.w	r3, r3, #3
 8003dfa:	6093      	str	r3, [r2, #8]
 8003dfc:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <SetSysClock+0x90>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	4a07      	ldr	r2, [pc, #28]	; (8003e20 <SetSysClock+0x90>)
 8003e02:	f043 0302 	orr.w	r3, r3, #2
 8003e06:	6093      	str	r3, [r2, #8]
 8003e08:	bf00      	nop
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <SetSysClock+0x90>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d1f9      	bne.n	8003e0a <SetSysClock+0x7a>
 8003e16:	bf00      	nop
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	40023800 	.word	0x40023800
 8003e24:	40007000 	.word	0x40007000
 8003e28:	08015410 	.word	0x08015410
 8003e2c:	40023c00 	.word	0x40023c00

08003e30 <NVIC_Init>:
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	73fb      	strb	r3, [r7, #15]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	73bb      	strb	r3, [r7, #14]
 8003e40:	230f      	movs	r3, #15
 8003e42:	737b      	strb	r3, [r7, #13]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	78db      	ldrb	r3, [r3, #3]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d039      	beq.n	8003ec0 <NVIC_Init+0x90>
 8003e4c:	4b27      	ldr	r3, [pc, #156]	; (8003eec <NVIC_Init+0xbc>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	43db      	mvns	r3, r3
 8003e52:	0a1b      	lsrs	r3, r3, #8
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	73fb      	strb	r3, [r7, #15]
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	f1c3 0304 	rsb	r3, r3, #4
 8003e62:	73bb      	strb	r3, [r7, #14]
 8003e64:	7b7a      	ldrb	r2, [r7, #13]
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	fa42 f303 	asr.w	r3, r2, r3
 8003e6c:	737b      	strb	r3, [r7, #13]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	785b      	ldrb	r3, [r3, #1]
 8003e72:	461a      	mov	r2, r3
 8003e74:	7bbb      	ldrb	r3, [r7, #14]
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	73fb      	strb	r3, [r7, #15]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	789a      	ldrb	r2, [r3, #2]
 8003e80:	7b7b      	ldrb	r3, [r7, #13]
 8003e82:	4013      	ands	r3, r2
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	73fb      	strb	r3, [r7, #15]
 8003e92:	4a17      	ldr	r2, [pc, #92]	; (8003ef0 <NVIC_Init+0xc0>)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	7bfa      	ldrb	r2, [r7, #15]
 8003e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	4911      	ldr	r1, [pc, #68]	; (8003ef0 <NVIC_Init+0xc0>)
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	7812      	ldrb	r2, [r2, #0]
 8003eae:	0952      	lsrs	r2, r2, #5
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 8003ebe:	e00f      	b.n	8003ee0 <NVIC_Init+0xb0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	4909      	ldr	r1, [pc, #36]	; (8003ef0 <NVIC_Init+0xc0>)
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	7812      	ldrb	r2, [r2, #0]
 8003ece:	0952      	lsrs	r2, r2, #5
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	f100 0320 	add.w	r3, r0, #32
 8003edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	e000ed00 	.word	0xe000ed00
 8003ef0:	e000e100 	.word	0xe000e100

08003ef4 <EXTI_Init>:
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	4b34      	ldr	r3, [pc, #208]	; (8003fd4 <EXTI_Init+0xe0>)
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	799b      	ldrb	r3, [r3, #6]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d04f      	beq.n	8003fac <EXTI_Init+0xb8>
 8003f0c:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <EXTI_Init+0xe0>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	492f      	ldr	r1, [pc, #188]	; (8003fd4 <EXTI_Init+0xe0>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	600b      	str	r3, [r1, #0]
 8003f1c:	4b2d      	ldr	r3, [pc, #180]	; (8003fd4 <EXTI_Init+0xe0>)
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	492b      	ldr	r1, [pc, #172]	; (8003fd4 <EXTI_Init+0xe0>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	791b      	ldrb	r3, [r3, #4]
 8003f30:	461a      	mov	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6819      	ldr	r1, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <EXTI_Init+0xe0>)
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	4920      	ldr	r1, [pc, #128]	; (8003fd4 <EXTI_Init+0xe0>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
 8003f56:	4b1f      	ldr	r3, [pc, #124]	; (8003fd4 <EXTI_Init+0xe0>)
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	491c      	ldr	r1, [pc, #112]	; (8003fd4 <EXTI_Init+0xe0>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	60cb      	str	r3, [r1, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	795b      	ldrb	r3, [r3, #5]
 8003f6a:	2b10      	cmp	r3, #16
 8003f6c:	d10e      	bne.n	8003f8c <EXTI_Init+0x98>
 8003f6e:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <EXTI_Init+0xe0>)
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4917      	ldr	r1, [pc, #92]	; (8003fd4 <EXTI_Init+0xe0>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	608b      	str	r3, [r1, #8]
 8003f7c:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <EXTI_Init+0xe0>)
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4913      	ldr	r1, [pc, #76]	; (8003fd4 <EXTI_Init+0xe0>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60cb      	str	r3, [r1, #12]
 8003f8a:	e01d      	b.n	8003fc8 <EXTI_Init+0xd4>
 8003f8c:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <EXTI_Init+0xe0>)
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	795b      	ldrb	r3, [r3, #5]
 8003f94:	461a      	mov	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4413      	add	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6819      	ldr	r1, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e00d      	b.n	8003fc8 <EXTI_Init+0xd4>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	791b      	ldrb	r3, [r3, #4]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6819      	ldr	r1, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	43da      	mvns	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	400a      	ands	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	40013c00 	.word	0x40013c00

08003fd8 <EXTI_ClearITPendingBit>:
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	4a04      	ldr	r2, [pc, #16]	; (8003ff4 <EXTI_ClearITPendingBit+0x1c>)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6153      	str	r3, [r2, #20]
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40013c00 	.word	0x40013c00

08003ff8 <GPIO_Init>:
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	2300      	movs	r3, #0
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	e076      	b.n	8004102 <GPIO_Init+0x10a>
 8004014:	2201      	movs	r2, #1
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4013      	ands	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	429a      	cmp	r2, r3
 800402e:	d165      	bne.n	80040fc <GPIO_Init+0x104>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	2103      	movs	r1, #3
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	401a      	ands	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	791b      	ldrb	r3, [r3, #4]
 800404e:	4619      	mov	r1, r3
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	791b      	ldrb	r3, [r3, #4]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d003      	beq.n	800406e <GPIO_Init+0x76>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	791b      	ldrb	r3, [r3, #4]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d12e      	bne.n	80040cc <GPIO_Init+0xd4>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	2103      	movs	r1, #3
 8004078:	fa01 f303 	lsl.w	r3, r1, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	401a      	ands	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	795b      	ldrb	r3, [r3, #5]
 800408c:	4619      	mov	r1, r3
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	fa01 f303 	lsl.w	r3, r1, r3
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	4619      	mov	r1, r3
 80040a6:	2301      	movs	r3, #1
 80040a8:	408b      	lsls	r3, r1
 80040aa:	43db      	mvns	r3, r3
 80040ac:	401a      	ands	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	7992      	ldrb	r2, [r2, #6]
 80040ba:	4611      	mov	r1, r2
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	b292      	uxth	r2, r2
 80040c0:	fa01 f202 	lsl.w	r2, r1, r2
 80040c4:	b292      	uxth	r2, r2
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	2103      	movs	r1, #3
 80040d8:	fa01 f303 	lsl.w	r3, r1, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	401a      	ands	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	60da      	str	r2, [r3, #12]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	79db      	ldrb	r3, [r3, #7]
 80040ec:	4619      	mov	r1, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	fa01 f303 	lsl.w	r3, r1, r3
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	60da      	str	r2, [r3, #12]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	3301      	adds	r3, #1
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b0f      	cmp	r3, #15
 8004106:	d985      	bls.n	8004014 <GPIO_Init+0x1c>
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <GPIO_ReadInputDataBit>:
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
 8004120:	2300      	movs	r3, #0
 8004122:	73fb      	strb	r3, [r7, #15]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	887b      	ldrh	r3, [r7, #2]
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <GPIO_ReadInputDataBit+0x22>
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
 8004134:	e001      	b.n	800413a <GPIO_ReadInputDataBit+0x26>
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <GPIO_WriteBit>:
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	807b      	strh	r3, [r7, #2]
 8004154:	4613      	mov	r3, r2
 8004156:	707b      	strb	r3, [r7, #1]
 8004158:	787b      	ldrb	r3, [r7, #1]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <GPIO_WriteBit+0x1e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	887a      	ldrh	r2, [r7, #2]
 8004162:	831a      	strh	r2, [r3, #24]
 8004164:	e002      	b.n	800416c <GPIO_WriteBit+0x24>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	887a      	ldrh	r2, [r7, #2]
 800416a:	835a      	strh	r2, [r3, #26]
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <GPIO_PinAFConfig>:
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	807b      	strh	r3, [r7, #2]
 8004184:	4613      	mov	r3, r2
 8004186:	707b      	strb	r3, [r7, #1]
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	2300      	movs	r3, #0
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	787a      	ldrb	r2, [r7, #1]
 8004192:	887b      	ldrh	r3, [r7, #2]
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	887b      	ldrh	r3, [r7, #2]
 80041a2:	08db      	lsrs	r3, r3, #3
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3208      	adds	r2, #8
 80041ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	210f      	movs	r1, #15
 80041ba:	fa01 f303 	lsl.w	r3, r1, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	8879      	ldrh	r1, [r7, #2]
 80041c2:	08c9      	lsrs	r1, r1, #3
 80041c4:	b289      	uxth	r1, r1
 80041c6:	4608      	mov	r0, r1
 80041c8:	ea02 0103 	and.w	r1, r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f100 0208 	add.w	r2, r0, #8
 80041d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80041d6:	887b      	ldrh	r3, [r7, #2]
 80041d8:	08db      	lsrs	r3, r3, #3
 80041da:	b29b      	uxth	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3208      	adds	r2, #8
 80041e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	887b      	ldrh	r3, [r7, #2]
 80041ee:	08db      	lsrs	r3, r3, #3
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3208      	adds	r2, #8
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80041fe:	bf00      	nop
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
	...

0800420c <RCC_GetClocksFreq>:
 800420c:	b480      	push	{r7}
 800420e:	b089      	sub	sp, #36	; 0x24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	2300      	movs	r3, #0
 8004216:	61bb      	str	r3, [r7, #24]
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	2300      	movs	r3, #0
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	2302      	movs	r3, #2
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	2302      	movs	r3, #2
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	4b47      	ldr	r3, [pc, #284]	; (800434c <RCC_GetClocksFreq+0x140>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 030c 	and.w	r3, r3, #12
 8004234:	61bb      	str	r3, [r7, #24]
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b04      	cmp	r3, #4
 800423a:	d007      	beq.n	800424c <RCC_GetClocksFreq+0x40>
 800423c:	2b08      	cmp	r3, #8
 800423e:	d009      	beq.n	8004254 <RCC_GetClocksFreq+0x48>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d13d      	bne.n	80042c0 <RCC_GetClocksFreq+0xb4>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a42      	ldr	r2, [pc, #264]	; (8004350 <RCC_GetClocksFreq+0x144>)
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e03d      	b.n	80042c8 <RCC_GetClocksFreq+0xbc>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a41      	ldr	r2, [pc, #260]	; (8004354 <RCC_GetClocksFreq+0x148>)
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e039      	b.n	80042c8 <RCC_GetClocksFreq+0xbc>
 8004254:	4b3d      	ldr	r3, [pc, #244]	; (800434c <RCC_GetClocksFreq+0x140>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	0d9b      	lsrs	r3, r3, #22
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	4b3a      	ldr	r3, [pc, #232]	; (800434c <RCC_GetClocksFreq+0x140>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00c      	beq.n	800428a <RCC_GetClocksFreq+0x7e>
 8004270:	4a38      	ldr	r2, [pc, #224]	; (8004354 <RCC_GetClocksFreq+0x148>)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	4a34      	ldr	r2, [pc, #208]	; (800434c <RCC_GetClocksFreq+0x140>)
 800427a:	6852      	ldr	r2, [r2, #4]
 800427c:	0992      	lsrs	r2, r2, #6
 800427e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004282:	fb02 f303 	mul.w	r3, r2, r3
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	e00b      	b.n	80042a2 <RCC_GetClocksFreq+0x96>
 800428a:	4a31      	ldr	r2, [pc, #196]	; (8004350 <RCC_GetClocksFreq+0x144>)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004292:	4a2e      	ldr	r2, [pc, #184]	; (800434c <RCC_GetClocksFreq+0x140>)
 8004294:	6852      	ldr	r2, [r2, #4]
 8004296:	0992      	lsrs	r2, r2, #6
 8004298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800429c:	fb02 f303 	mul.w	r3, r2, r3
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	4b2a      	ldr	r3, [pc, #168]	; (800434c <RCC_GetClocksFreq+0x140>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	3301      	adds	r3, #1
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e003      	b.n	80042c8 <RCC_GetClocksFreq+0xbc>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a23      	ldr	r2, [pc, #140]	; (8004350 <RCC_GetClocksFreq+0x144>)
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	bf00      	nop
 80042c8:	4b20      	ldr	r3, [pc, #128]	; (800434c <RCC_GetClocksFreq+0x140>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	4a1f      	ldr	r2, [pc, #124]	; (8004358 <RCC_GetClocksFreq+0x14c>)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	4413      	add	r3, r2
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	40da      	lsrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	605a      	str	r2, [r3, #4]
 80042f0:	4b16      	ldr	r3, [pc, #88]	; (800434c <RCC_GetClocksFreq+0x140>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80042f8:	61bb      	str	r3, [r7, #24]
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	0a9b      	lsrs	r3, r3, #10
 80042fe:	61bb      	str	r3, [r7, #24]
 8004300:	4a15      	ldr	r2, [pc, #84]	; (8004358 <RCC_GetClocksFreq+0x14c>)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	4413      	add	r3, r2
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	40da      	lsrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	609a      	str	r2, [r3, #8]
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <RCC_GetClocksFreq+0x140>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	0b5b      	lsrs	r3, r3, #13
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	4a0b      	ldr	r2, [pc, #44]	; (8004358 <RCC_GetClocksFreq+0x14c>)
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	4413      	add	r3, r2
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	40da      	lsrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	60da      	str	r2, [r3, #12]
 8004340:	bf00      	nop
 8004342:	3724      	adds	r7, #36	; 0x24
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	40023800 	.word	0x40023800
 8004350:	00f42400 	.word	0x00f42400
 8004354:	017d7840 	.word	0x017d7840
 8004358:	20000068 	.word	0x20000068

0800435c <RCC_AHB1PeriphClockCmd>:
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	70fb      	strb	r3, [r7, #3]
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d006      	beq.n	800437c <RCC_AHB1PeriphClockCmd+0x20>
 800436e:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <RCC_AHB1PeriphClockCmd+0x3c>)
 8004370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004372:	4909      	ldr	r1, [pc, #36]	; (8004398 <RCC_AHB1PeriphClockCmd+0x3c>)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4313      	orrs	r3, r2
 8004378:	630b      	str	r3, [r1, #48]	; 0x30
 800437a:	e006      	b.n	800438a <RCC_AHB1PeriphClockCmd+0x2e>
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <RCC_AHB1PeriphClockCmd+0x3c>)
 800437e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	43db      	mvns	r3, r3
 8004384:	4904      	ldr	r1, [pc, #16]	; (8004398 <RCC_AHB1PeriphClockCmd+0x3c>)
 8004386:	4013      	ands	r3, r2
 8004388:	630b      	str	r3, [r1, #48]	; 0x30
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40023800 	.word	0x40023800

0800439c <RCC_APB2PeriphClockCmd>:
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	70fb      	strb	r3, [r7, #3]
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d006      	beq.n	80043bc <RCC_APB2PeriphClockCmd+0x20>
 80043ae:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <RCC_APB2PeriphClockCmd+0x3c>)
 80043b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b2:	4909      	ldr	r1, [pc, #36]	; (80043d8 <RCC_APB2PeriphClockCmd+0x3c>)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	644b      	str	r3, [r1, #68]	; 0x44
 80043ba:	e006      	b.n	80043ca <RCC_APB2PeriphClockCmd+0x2e>
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <RCC_APB2PeriphClockCmd+0x3c>)
 80043be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	4904      	ldr	r1, [pc, #16]	; (80043d8 <RCC_APB2PeriphClockCmd+0x3c>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	644b      	str	r3, [r1, #68]	; 0x44
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40023800 	.word	0x40023800

080043dc <SYSCFG_EXTILineConfig>:
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	460a      	mov	r2, r1
 80043e6:	71fb      	strb	r3, [r7, #7]
 80043e8:	4613      	mov	r3, r2
 80043ea:	71bb      	strb	r3, [r7, #6]
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	79bb      	ldrb	r3, [r7, #6]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	220f      	movs	r2, #15
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	4a16      	ldr	r2, [pc, #88]	; (800445c <SYSCFG_EXTILineConfig+0x80>)
 8004402:	79bb      	ldrb	r3, [r7, #6]
 8004404:	089b      	lsrs	r3, r3, #2
 8004406:	b2db      	uxtb	r3, r3
 8004408:	3302      	adds	r3, #2
 800440a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	43db      	mvns	r3, r3
 8004412:	4812      	ldr	r0, [pc, #72]	; (800445c <SYSCFG_EXTILineConfig+0x80>)
 8004414:	79b9      	ldrb	r1, [r7, #6]
 8004416:	0889      	lsrs	r1, r1, #2
 8004418:	b2c9      	uxtb	r1, r1
 800441a:	401a      	ands	r2, r3
 800441c:	1c8b      	adds	r3, r1, #2
 800441e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8004422:	4a0e      	ldr	r2, [pc, #56]	; (800445c <SYSCFG_EXTILineConfig+0x80>)
 8004424:	79bb      	ldrb	r3, [r7, #6]
 8004426:	089b      	lsrs	r3, r3, #2
 8004428:	b2db      	uxtb	r3, r3
 800442a:	3302      	adds	r3, #2
 800442c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004430:	79f9      	ldrb	r1, [r7, #7]
 8004432:	79bb      	ldrb	r3, [r7, #6]
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	fa01 f303 	lsl.w	r3, r1, r3
 800443e:	4807      	ldr	r0, [pc, #28]	; (800445c <SYSCFG_EXTILineConfig+0x80>)
 8004440:	79b9      	ldrb	r1, [r7, #6]
 8004442:	0889      	lsrs	r1, r1, #2
 8004444:	b2c9      	uxtb	r1, r1
 8004446:	431a      	orrs	r2, r3
 8004448:	1c8b      	adds	r3, r1, #2
 800444a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40013800 	.word	0x40013800

08004460 <USART_Init>:
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	; 0x28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
 800446a:	2300      	movs	r3, #0
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
 800446e:	2300      	movs	r3, #0
 8004470:	623b      	str	r3, [r7, #32]
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	2300      	movs	r3, #0
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8a1b      	ldrh	r3, [r3, #16]
 800447e:	b29b      	uxth	r3, r3
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	88db      	ldrh	r3, [r3, #6]
 800448e:	461a      	mov	r2, r3
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	4313      	orrs	r3, r2
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	821a      	strh	r2, [r3, #16]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	899b      	ldrh	r3, [r3, #12]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044ac:	f023 030c 	bic.w	r3, r3, #12
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	889a      	ldrh	r2, [r3, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	891b      	ldrh	r3, [r3, #8]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	b29a      	uxth	r2, r3
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	895b      	ldrh	r3, [r3, #10]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	4313      	orrs	r3, r2
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	819a      	strh	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	8a9b      	ldrh	r3, [r3, #20]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	899b      	ldrh	r3, [r3, #12]
 80044ea:	461a      	mov	r2, r3
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	4313      	orrs	r3, r2
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	829a      	strh	r2, [r3, #20]
 80044fa:	f107 0308 	add.w	r3, r7, #8
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fe84 	bl	800420c <RCC_GetClocksFreq>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a30      	ldr	r2, [pc, #192]	; (80045c8 <USART_Init+0x168>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d003      	beq.n	8004514 <USART_Init+0xb4>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a2f      	ldr	r2, [pc, #188]	; (80045cc <USART_Init+0x16c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d102      	bne.n	800451a <USART_Init+0xba>
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	623b      	str	r3, [r7, #32]
 8004518:	e001      	b.n	800451e <USART_Init+0xbe>
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	623b      	str	r3, [r7, #32]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	899b      	ldrh	r3, [r3, #12]
 8004522:	b29b      	uxth	r3, r3
 8004524:	b21b      	sxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	da0c      	bge.n	8004544 <USART_Init+0xe4>
 800452a:	6a3a      	ldr	r2, [r7, #32]
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	009a      	lsls	r2, r3, #2
 8004534:	441a      	add	r2, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	e00b      	b.n	800455c <USART_Init+0xfc>
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	009a      	lsls	r2, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	fbb2 f3f3 	udiv	r3, r2, r3
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	4a1c      	ldr	r2, [pc, #112]	; (80045d0 <USART_Init+0x170>)
 8004560:	fba2 2303 	umull	r2, r3, r2, r3
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	2264      	movs	r2, #100	; 0x64
 8004570:	fb02 f303 	mul.w	r3, r2, r3
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	899b      	ldrh	r3, [r3, #12]
 800457e:	b29b      	uxth	r3, r3
 8004580:	b21b      	sxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	da0c      	bge.n	80045a0 <USART_Init+0x140>
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	3332      	adds	r3, #50	; 0x32
 800458c:	4a10      	ldr	r2, [pc, #64]	; (80045d0 <USART_Init+0x170>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459a:	4313      	orrs	r3, r2
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
 800459e:	e00b      	b.n	80045b8 <USART_Init+0x158>
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	3332      	adds	r3, #50	; 0x32
 80045a6:	4a0a      	ldr	r2, [pc, #40]	; (80045d0 <USART_Init+0x170>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b4:	4313      	orrs	r3, r2
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	811a      	strh	r2, [r3, #8]
 80045c0:	bf00      	nop
 80045c2:	3728      	adds	r7, #40	; 0x28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40011000 	.word	0x40011000
 80045cc:	40011400 	.word	0x40011400
 80045d0:	51eb851f 	.word	0x51eb851f

080045d4 <USART_Cmd>:
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	70fb      	strb	r3, [r7, #3]
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <USART_Cmd+0x24>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	899b      	ldrh	r3, [r3, #12]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	819a      	strh	r2, [r3, #12]
 80045f6:	e007      	b.n	8004608 <USART_Cmd+0x34>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	899b      	ldrh	r3, [r3, #12]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004602:	b29a      	uxth	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	819a      	strh	r2, [r3, #12]
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <USART_ReceiveData>:
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	889b      	ldrh	r3, [r3, #4]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	b29b      	uxth	r3, r3
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <USART_ITConfig>:
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	807b      	strh	r3, [r7, #2]
 8004640:	4613      	mov	r3, r2
 8004642:	707b      	strb	r3, [r7, #1]
 8004644:	2300      	movs	r3, #0
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	2300      	movs	r3, #0
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	887b      	ldrh	r3, [r7, #2]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	b2db      	uxtb	r3, r3
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	887b      	ldrh	r3, [r7, #2]
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d103      	bne.n	8004682 <USART_ITConfig+0x4e>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	330c      	adds	r3, #12
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e009      	b.n	8004696 <USART_ITConfig+0x62>
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d103      	bne.n	8004690 <USART_ITConfig+0x5c>
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	3310      	adds	r3, #16
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	e002      	b.n	8004696 <USART_ITConfig+0x62>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	3314      	adds	r3, #20
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	787b      	ldrb	r3, [r7, #1]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d006      	beq.n	80046aa <USART_ITConfig+0x76>
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	6819      	ldr	r1, [r3, #0]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e006      	b.n	80046b8 <USART_ITConfig+0x84>
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	6819      	ldr	r1, [r3, #0]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	43da      	mvns	r2, r3
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	400a      	ands	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	bf00      	nop
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <USART_GetITStatus>:
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	807b      	strh	r3, [r7, #2]
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	2300      	movs	r3, #0
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	2300      	movs	r3, #0
 80046de:	74fb      	strb	r3, [r7, #19]
 80046e0:	887b      	ldrh	r3, [r7, #2]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	887b      	ldrh	r3, [r7, #2]
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	2201      	movs	r2, #1
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d107      	bne.n	8004712 <USART_GetITStatus+0x4e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	899b      	ldrh	r3, [r3, #12]
 8004706:	b29b      	uxth	r3, r3
 8004708:	461a      	mov	r2, r3
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	4013      	ands	r3, r2
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	e011      	b.n	8004736 <USART_GetITStatus+0x72>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b02      	cmp	r3, #2
 8004716:	d107      	bne.n	8004728 <USART_GetITStatus+0x64>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8a1b      	ldrh	r3, [r3, #16]
 800471c:	b29b      	uxth	r3, r3
 800471e:	461a      	mov	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	4013      	ands	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e006      	b.n	8004736 <USART_GetITStatus+0x72>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8a9b      	ldrh	r3, [r3, #20]
 800472c:	b29b      	uxth	r3, r3
 800472e:	461a      	mov	r2, r3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	4013      	ands	r3, r2
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	887b      	ldrh	r3, [r7, #2]
 8004738:	0a1b      	lsrs	r3, r3, #8
 800473a:	b29b      	uxth	r3, r3
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4013      	ands	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <USART_GetITStatus+0xa4>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <USART_GetITStatus+0xa4>
 8004762:	2301      	movs	r3, #1
 8004764:	74fb      	strb	r3, [r7, #19]
 8004766:	e001      	b.n	800476c <USART_GetITStatus+0xa8>
 8004768:	2300      	movs	r3, #0
 800476a:	74fb      	strb	r3, [r7, #19]
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	4618      	mov	r0, r3
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <USART_ClearITPendingBit>:
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	460b      	mov	r3, r1
 8004784:	807b      	strh	r3, [r7, #2]
 8004786:	2300      	movs	r3, #0
 8004788:	81fb      	strh	r3, [r7, #14]
 800478a:	2300      	movs	r3, #0
 800478c:	81bb      	strh	r3, [r7, #12]
 800478e:	887b      	ldrh	r3, [r7, #2]
 8004790:	0a1b      	lsrs	r3, r3, #8
 8004792:	81fb      	strh	r3, [r7, #14]
 8004794:	89fb      	ldrh	r3, [r7, #14]
 8004796:	2201      	movs	r2, #1
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	81bb      	strh	r3, [r7, #12]
 800479e:	89bb      	ldrh	r3, [r7, #12]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	801a      	strh	r2, [r3, #0]
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <NVIC_SetPriority>:
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	6039      	str	r1, [r7, #0]
 80047be:	71fb      	strb	r3, [r7, #7]
 80047c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	da0b      	bge.n	80047e0 <NVIC_SetPriority+0x2c>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	490c      	ldr	r1, [pc, #48]	; (8004800 <NVIC_SetPriority+0x4c>)
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	f003 030f 	and.w	r3, r3, #15
 80047d4:	3b04      	subs	r3, #4
 80047d6:	0112      	lsls	r2, r2, #4
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	440b      	add	r3, r1
 80047dc:	761a      	strb	r2, [r3, #24]
 80047de:	e009      	b.n	80047f4 <NVIC_SetPriority+0x40>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	4907      	ldr	r1, [pc, #28]	; (8004804 <NVIC_SetPriority+0x50>)
 80047e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ea:	0112      	lsls	r2, r2, #4
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	440b      	add	r3, r1
 80047f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	e000ed00 	.word	0xe000ed00
 8004804:	e000e100 	.word	0xe000e100

08004808 <SysTick_Config>:
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3b01      	subs	r3, #1
 8004814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004818:	d301      	bcc.n	800481e <SysTick_Config+0x16>
 800481a:	2301      	movs	r3, #1
 800481c:	e00f      	b.n	800483e <SysTick_Config+0x36>
 800481e:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <SysTick_Config+0x40>)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3b01      	subs	r3, #1
 8004824:	6053      	str	r3, [r2, #4]
 8004826:	210f      	movs	r1, #15
 8004828:	f04f 30ff 	mov.w	r0, #4294967295
 800482c:	f7ff ffc2 	bl	80047b4 <NVIC_SetPriority>
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <SysTick_Config+0x40>)
 8004832:	2200      	movs	r2, #0
 8004834:	609a      	str	r2, [r3, #8]
 8004836:	4b04      	ldr	r3, [pc, #16]	; (8004848 <SysTick_Config+0x40>)
 8004838:	2207      	movs	r2, #7
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	2300      	movs	r3, #0
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	e000e010 	.word	0xe000e010

0800484c <TimerInit>:
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	463b      	mov	r3, r7
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff fcd9 	bl	800420c <RCC_GetClocksFreq>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <TimerInit+0x3c>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	099b      	lsrs	r3, r3, #6
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff ffcf 	bl	8004808 <SysTick_Config>
 800486a:	2101      	movs	r1, #1
 800486c:	f04f 30ff 	mov.w	r0, #4294967295
 8004870:	f7ff ffa0 	bl	80047b4 <NVIC_SetPriority>
 8004874:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004878:	2100      	movs	r1, #0
 800487a:	4804      	ldr	r0, [pc, #16]	; (800488c <TimerInit+0x40>)
 800487c:	f001 fe60 	bl	8006540 <memsetl>
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	10624dd3 	.word	0x10624dd3
 800488c:	20000420 	.word	0x20000420

08004890 <TimerStop>:
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	71fb      	strb	r3, [r7, #7]
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	2b0f      	cmp	r3, #15
 800489e:	d80a      	bhi.n	80048b6 <TimerStop+0x26>
 80048a0:	79fa      	ldrb	r2, [r7, #7]
 80048a2:	4922      	ldr	r1, [pc, #136]	; (800492c <TimerStop+0x9c>)
 80048a4:	4613      	mov	r3, r2
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	4413      	add	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	440b      	add	r3, r1
 80048ae:	3310      	adds	r3, #16
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <TimerStop+0x2a>
 80048b6:	2300      	movs	r3, #0
 80048b8:	e031      	b.n	800491e <TimerStop+0x8e>
 80048ba:	79fa      	ldrb	r2, [r7, #7]
 80048bc:	491b      	ldr	r1, [pc, #108]	; (800492c <TimerStop+0x9c>)
 80048be:	4613      	mov	r3, r2
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	4413      	add	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	440b      	add	r3, r1
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	79fa      	ldrb	r2, [r7, #7]
 80048ce:	4917      	ldr	r1, [pc, #92]	; (800492c <TimerStop+0x9c>)
 80048d0:	4613      	mov	r3, r2
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	4413      	add	r3, r2
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	440b      	add	r3, r1
 80048da:	3310      	adds	r3, #16
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	79fa      	ldrb	r2, [r7, #7]
 80048e2:	4912      	ldr	r1, [pc, #72]	; (800492c <TimerStop+0x9c>)
 80048e4:	4613      	mov	r3, r2
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	4413      	add	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	440b      	add	r3, r1
 80048ee:	330c      	adds	r3, #12
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	79fa      	ldrb	r2, [r7, #7]
 80048f6:	490d      	ldr	r1, [pc, #52]	; (800492c <TimerStop+0x9c>)
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	440b      	add	r3, r1
 8004902:	3308      	adds	r3, #8
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	79fa      	ldrb	r2, [r7, #7]
 800490a:	4908      	ldr	r1, [pc, #32]	; (800492c <TimerStop+0x9c>)
 800490c:	4613      	mov	r3, r2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	4413      	add	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	440b      	add	r3, r1
 8004916:	3304      	adds	r3, #4
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	2301      	movs	r3, #1
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000420 	.word	0x20000420

08004930 <GetMilSecTick>:
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <GetMilSecTick+0x14>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	200005a0 	.word	0x200005a0

08004948 <processTimerScheduler>:
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	2300      	movs	r3, #0
 8004950:	73fb      	strb	r3, [r7, #15]
 8004952:	e068      	b.n	8004a26 <processTimerScheduler+0xde>
 8004954:	7bfa      	ldrb	r2, [r7, #15]
 8004956:	4937      	ldr	r1, [pc, #220]	; (8004a34 <processTimerScheduler+0xec>)
 8004958:	4613      	mov	r3, r2
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	4413      	add	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	440b      	add	r3, r1
 8004962:	3310      	adds	r3, #16
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d05a      	beq.n	8004a20 <processTimerScheduler+0xd8>
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	4618      	mov	r0, r3
 800496e:	f000 f863 	bl	8004a38 <TimeExpired>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d053      	beq.n	8004a20 <processTimerScheduler+0xd8>
 8004978:	7bfa      	ldrb	r2, [r7, #15]
 800497a:	492e      	ldr	r1, [pc, #184]	; (8004a34 <processTimerScheduler+0xec>)
 800497c:	4613      	mov	r3, r2
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	4413      	add	r3, r2
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	440b      	add	r3, r1
 8004986:	3310      	adds	r3, #16
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	7bfa      	ldrb	r2, [r7, #15]
 800498e:	4929      	ldr	r1, [pc, #164]	; (8004a34 <processTimerScheduler+0xec>)
 8004990:	4613      	mov	r3, r2
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	4413      	add	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	440b      	add	r3, r1
 800499a:	3314      	adds	r3, #20
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	7bfa      	ldrb	r2, [r7, #15]
 80049a2:	4924      	ldr	r1, [pc, #144]	; (8004a34 <processTimerScheduler+0xec>)
 80049a4:	4613      	mov	r3, r2
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	4413      	add	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	440b      	add	r3, r1
 80049ae:	330c      	adds	r3, #12
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2bff      	cmp	r3, #255	; 0xff
 80049b6:	d020      	beq.n	80049fa <processTimerScheduler+0xb2>
 80049b8:	7bfa      	ldrb	r2, [r7, #15]
 80049ba:	491e      	ldr	r1, [pc, #120]	; (8004a34 <processTimerScheduler+0xec>)
 80049bc:	4613      	mov	r3, r2
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	4413      	add	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	440b      	add	r3, r1
 80049c6:	330c      	adds	r3, #12
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d014      	beq.n	80049fa <processTimerScheduler+0xb2>
 80049d0:	7bfa      	ldrb	r2, [r7, #15]
 80049d2:	4918      	ldr	r1, [pc, #96]	; (8004a34 <processTimerScheduler+0xec>)
 80049d4:	4613      	mov	r3, r2
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	4413      	add	r3, r2
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	440b      	add	r3, r1
 80049de:	330c      	adds	r3, #12
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b2d8      	uxtb	r0, r3
 80049e8:	4912      	ldr	r1, [pc, #72]	; (8004a34 <processTimerScheduler+0xec>)
 80049ea:	4613      	mov	r3, r2
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	4413      	add	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	440b      	add	r3, r1
 80049f4:	330c      	adds	r3, #12
 80049f6:	4602      	mov	r2, r0
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	7bfa      	ldrb	r2, [r7, #15]
 80049fc:	490d      	ldr	r1, [pc, #52]	; (8004a34 <processTimerScheduler+0xec>)
 80049fe:	4613      	mov	r3, r2
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	4413      	add	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	440b      	add	r3, r1
 8004a08:	330c      	adds	r3, #12
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d103      	bne.n	8004a1a <processTimerScheduler+0xd2>
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff ff3b 	bl	8004890 <TimerStop>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	4798      	blx	r3
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	3301      	adds	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	2b0f      	cmp	r3, #15
 8004a2a:	d993      	bls.n	8004954 <processTimerScheduler+0xc>
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000420 	.word	0x20000420

08004a38 <TimeExpired>:
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	71fb      	strb	r3, [r7, #7]
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	b672      	cpsid	i
 8004a48:	f7ff ff72 	bl	8004930 <GetMilSecTick>
 8004a4c:	60b8      	str	r0, [r7, #8]
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	2b0f      	cmp	r3, #15
 8004a52:	d80a      	bhi.n	8004a6a <TimeExpired+0x32>
 8004a54:	79fa      	ldrb	r2, [r7, #7]
 8004a56:	492a      	ldr	r1, [pc, #168]	; (8004b00 <TimeExpired+0xc8>)
 8004a58:	4613      	mov	r3, r2
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	4413      	add	r3, r2
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	440b      	add	r3, r1
 8004a62:	3310      	adds	r3, #16
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d102      	bne.n	8004a70 <TimeExpired+0x38>
 8004a6a:	b662      	cpsie	i
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e042      	b.n	8004af6 <TimeExpired+0xbe>
 8004a70:	79fa      	ldrb	r2, [r7, #7]
 8004a72:	4923      	ldr	r1, [pc, #140]	; (8004b00 <TimeExpired+0xc8>)
 8004a74:	4613      	mov	r3, r2
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	4413      	add	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	440b      	add	r3, r1
 8004a7e:	3304      	adds	r3, #4
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d30c      	bcc.n	8004aa2 <TimeExpired+0x6a>
 8004a88:	79fa      	ldrb	r2, [r7, #7]
 8004a8a:	491d      	ldr	r1, [pc, #116]	; (8004b00 <TimeExpired+0xc8>)
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	4413      	add	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	440b      	add	r3, r1
 8004a96:	3304      	adds	r3, #4
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	e00e      	b.n	8004ac0 <TimeExpired+0x88>
 8004aa2:	79fa      	ldrb	r2, [r7, #7]
 8004aa4:	4916      	ldr	r1, [pc, #88]	; (8004b00 <TimeExpired+0xc8>)
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	4413      	add	r3, r2
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	440b      	add	r3, r1
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	43db      	mvns	r3, r3
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	79fa      	ldrb	r2, [r7, #7]
 8004ac2:	490f      	ldr	r1, [pc, #60]	; (8004b00 <TimeExpired+0xc8>)
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	4413      	add	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	440b      	add	r3, r1
 8004ace:	3308      	adds	r3, #8
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d202      	bcs.n	8004ade <TimeExpired+0xa6>
 8004ad8:	b662      	cpsie	i
 8004ada:	2300      	movs	r3, #0
 8004adc:	e00b      	b.n	8004af6 <TimeExpired+0xbe>
 8004ade:	79fa      	ldrb	r2, [r7, #7]
 8004ae0:	4907      	ldr	r1, [pc, #28]	; (8004b00 <TimeExpired+0xc8>)
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4413      	add	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	440b      	add	r3, r1
 8004aec:	3304      	adds	r3, #4
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	b662      	cpsie	i
 8004af4:	2301      	movs	r3, #1
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000420 	.word	0x20000420

08004b04 <SysTick_Handler>:
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <SysTick_Handler+0x18>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	4a03      	ldr	r2, [pc, #12]	; (8004b1c <SysTick_Handler+0x18>)
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	bf00      	nop
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	200005a0 	.word	0x200005a0

08004b20 <delayMicroseconds>:
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <ucg_gpio_init>:
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	2007      	movs	r0, #7
 8004b3e:	f7ff fc0d 	bl	800435c <RCC_AHB1PeriphClockCmd>
 8004b42:	2301      	movs	r3, #1
 8004b44:	713b      	strb	r3, [r7, #4]
 8004b46:	2303      	movs	r3, #3
 8004b48:	717b      	strb	r3, [r7, #5]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	71bb      	strb	r3, [r7, #6]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	71fb      	strb	r3, [r7, #7]
 8004b52:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	463b      	mov	r3, r7
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	480a      	ldr	r0, [pc, #40]	; (8004b88 <ucg_gpio_init+0x54>)
 8004b5e:	f7ff fa4b 	bl	8003ff8 <GPIO_Init>
 8004b62:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	463b      	mov	r3, r7
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4807      	ldr	r0, [pc, #28]	; (8004b8c <ucg_gpio_init+0x58>)
 8004b6e:	f7ff fa43 	bl	8003ff8 <GPIO_Init>
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	463b      	mov	r3, r7
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4805      	ldr	r0, [pc, #20]	; (8004b90 <ucg_gpio_init+0x5c>)
 8004b7c:	f7ff fa3c 	bl	8003ff8 <GPIO_Init>
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40020000 	.word	0x40020000
 8004b8c:	40020400 	.word	0x40020400
 8004b90:	40020800 	.word	0x40020800

08004b94 <ucg_com_arduino_send_generic_SW_SPI>:
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	73fb      	strb	r3, [r7, #15]
 8004ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	da05      	bge.n	8004bb8 <ucg_com_arduino_send_generic_SW_SPI+0x24>
 8004bac:	2201      	movs	r2, #1
 8004bae:	2180      	movs	r1, #128	; 0x80
 8004bb0:	4814      	ldr	r0, [pc, #80]	; (8004c04 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8004bb2:	f7ff fac9 	bl	8004148 <GPIO_WriteBit>
 8004bb6:	e004      	b.n	8004bc2 <ucg_com_arduino_send_generic_SW_SPI+0x2e>
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2180      	movs	r1, #128	; 0x80
 8004bbc:	4811      	ldr	r0, [pc, #68]	; (8004c04 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8004bbe:	f7ff fac3 	bl	8004148 <GPIO_WriteBit>
 8004bc2:	2001      	movs	r0, #1
 8004bc4:	f7ff ffac 	bl	8004b20 <delayMicroseconds>
 8004bc8:	2201      	movs	r2, #1
 8004bca:	2120      	movs	r1, #32
 8004bcc:	480d      	ldr	r0, [pc, #52]	; (8004c04 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8004bce:	f7ff fabb 	bl	8004148 <GPIO_WriteBit>
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	f7ff ffa4 	bl	8004b20 <delayMicroseconds>
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	73fb      	strb	r3, [r7, #15]
 8004bde:	2200      	movs	r2, #0
 8004be0:	2120      	movs	r1, #32
 8004be2:	4808      	ldr	r0, [pc, #32]	; (8004c04 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8004be4:	f7ff fab0 	bl	8004148 <GPIO_WriteBit>
 8004be8:	2001      	movs	r0, #1
 8004bea:	f7ff ff99 	bl	8004b20 <delayMicroseconds>
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	70fb      	strb	r3, [r7, #3]
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1d4      	bne.n	8004ba4 <ucg_com_arduino_send_generic_SW_SPI+0x10>
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40020000 	.word	0x40020000

08004c08 <ucg_com_arduino_generic_SW_SPI>:
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	607b      	str	r3, [r7, #4]
 8004c12:	460b      	mov	r3, r1
 8004c14:	817b      	strh	r3, [r7, #10]
 8004c16:	4613      	mov	r3, r2
 8004c18:	813b      	strh	r3, [r7, #8]
 8004c1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004c1e:	3b0a      	subs	r3, #10
 8004c20:	2b0b      	cmp	r3, #11
 8004c22:	f200 80dc 	bhi.w	8004dde <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8004c26:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <ucg_com_arduino_generic_SW_SPI+0x24>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c5d 	.word	0x08004c5d
 8004c30:	08004ddf 	.word	0x08004ddf
 8004c34:	08004caf 	.word	0x08004caf
 8004c38:	08004cb9 	.word	0x08004cb9
 8004c3c:	08004cc9 	.word	0x08004cc9
 8004c40:	08004cd9 	.word	0x08004cd9
 8004c44:	08004ceb 	.word	0x08004ceb
 8004c48:	08004d0b 	.word	0x08004d0b
 8004c4c:	08004d33 	.word	0x08004d33
 8004c50:	08004d69 	.word	0x08004d69
 8004c54:	08004d87 	.word	0x08004d87
 8004c58:	08004dd7 	.word	0x08004dd7
 8004c5c:	f7ff ff6a 	bl	8004b34 <ucg_gpio_init>
 8004c60:	2201      	movs	r2, #1
 8004c62:	2180      	movs	r1, #128	; 0x80
 8004c64:	4860      	ldr	r0, [pc, #384]	; (8004de8 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8004c66:	f7ff fa6f 	bl	8004148 <GPIO_WriteBit>
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	2140      	movs	r1, #64	; 0x40
 8004c6e:	485f      	ldr	r0, [pc, #380]	; (8004dec <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8004c70:	f7ff fa6a 	bl	8004148 <GPIO_WriteBit>
 8004c74:	2201      	movs	r2, #1
 8004c76:	2180      	movs	r1, #128	; 0x80
 8004c78:	485d      	ldr	r0, [pc, #372]	; (8004df0 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8004c7a:	f7ff fa65 	bl	8004148 <GPIO_WriteBit>
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c84:	4858      	ldr	r0, [pc, #352]	; (8004de8 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8004c86:	f7ff fa5f 	bl	8004148 <GPIO_WriteBit>
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2120      	movs	r1, #32
 8004c8e:	4856      	ldr	r0, [pc, #344]	; (8004de8 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8004c90:	f7ff fa5a 	bl	8004148 <GPIO_WriteBit>
 8004c94:	2201      	movs	r2, #1
 8004c96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c9a:	4854      	ldr	r0, [pc, #336]	; (8004dec <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8004c9c:	f7ff fa54 	bl	8004148 <GPIO_WriteBit>
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ca6:	4850      	ldr	r0, [pc, #320]	; (8004de8 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8004ca8:	f7ff fa4e 	bl	8004148 <GPIO_WriteBit>
 8004cac:	e097      	b.n	8004dde <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8004cae:	893b      	ldrh	r3, [r7, #8]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff ff35 	bl	8004b20 <delayMicroseconds>
 8004cb6:	e092      	b.n	8004dde <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8004cb8:	893b      	ldrh	r3, [r7, #8]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	2180      	movs	r1, #128	; 0x80
 8004cc0:	484b      	ldr	r0, [pc, #300]	; (8004df0 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8004cc2:	f7ff fa41 	bl	8004148 <GPIO_WriteBit>
 8004cc6:	e08a      	b.n	8004dde <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8004cc8:	893b      	ldrh	r3, [r7, #8]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	2140      	movs	r1, #64	; 0x40
 8004cd0:	4846      	ldr	r0, [pc, #280]	; (8004dec <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8004cd2:	f7ff fa39 	bl	8004148 <GPIO_WriteBit>
 8004cd6:	e082      	b.n	8004dde <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8004cd8:	893b      	ldrh	r3, [r7, #8]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ce2:	4841      	ldr	r0, [pc, #260]	; (8004de8 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8004ce4:	f7ff fa30 	bl	8004148 <GPIO_WriteBit>
 8004ce8:	e079      	b.n	8004dde <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8004cea:	893b      	ldrh	r3, [r7, #8]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	4619      	mov	r1, r3
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7ff ff4f 	bl	8004b94 <ucg_com_arduino_send_generic_SW_SPI>
 8004cf6:	e072      	b.n	8004dde <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff ff48 	bl	8004b94 <ucg_com_arduino_send_generic_SW_SPI>
 8004d04:	893b      	ldrh	r3, [r7, #8]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	813b      	strh	r3, [r7, #8]
 8004d0a:	893b      	ldrh	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f3      	bne.n	8004cf8 <ucg_com_arduino_generic_SW_SPI+0xf0>
 8004d10:	e065      	b.n	8004dde <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	4619      	mov	r1, r3
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7ff ff3b 	bl	8004b94 <ucg_com_arduino_send_generic_SW_SPI>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3301      	adds	r3, #1
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	4619      	mov	r1, r3
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7ff ff34 	bl	8004b94 <ucg_com_arduino_send_generic_SW_SPI>
 8004d2c:	893b      	ldrh	r3, [r7, #8]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	813b      	strh	r3, [r7, #8]
 8004d32:	893b      	ldrh	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1ec      	bne.n	8004d12 <ucg_com_arduino_generic_SW_SPI+0x10a>
 8004d38:	e051      	b.n	8004dde <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff ff27 	bl	8004b94 <ucg_com_arduino_send_generic_SW_SPI>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f7ff ff20 	bl	8004b94 <ucg_com_arduino_send_generic_SW_SPI>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3302      	adds	r3, #2
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff ff19 	bl	8004b94 <ucg_com_arduino_send_generic_SW_SPI>
 8004d62:	893b      	ldrh	r3, [r7, #8]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	813b      	strh	r3, [r7, #8]
 8004d68:	893b      	ldrh	r3, [r7, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1e5      	bne.n	8004d3a <ucg_com_arduino_generic_SW_SPI+0x132>
 8004d6e:	e036      	b.n	8004dde <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	607a      	str	r2, [r7, #4]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f7ff ff0a 	bl	8004b94 <ucg_com_arduino_send_generic_SW_SPI>
 8004d80:	893b      	ldrh	r3, [r7, #8]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	813b      	strh	r3, [r7, #8]
 8004d86:	893b      	ldrh	r3, [r7, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f1      	bne.n	8004d70 <ucg_com_arduino_generic_SW_SPI+0x168>
 8004d8c:	e027      	b.n	8004dde <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d010      	beq.n	8004db8 <ucg_com_arduino_generic_SW_SPI+0x1b0>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d106      	bne.n	8004dac <ucg_com_arduino_generic_SW_SPI+0x1a4>
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004da4:	4810      	ldr	r0, [pc, #64]	; (8004de8 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8004da6:	f7ff f9cf 	bl	8004148 <GPIO_WriteBit>
 8004daa:	e005      	b.n	8004db8 <ucg_com_arduino_generic_SW_SPI+0x1b0>
 8004dac:	2201      	movs	r2, #1
 8004dae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004db2:	480d      	ldr	r0, [pc, #52]	; (8004de8 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8004db4:	f7ff f9c8 	bl	8004148 <GPIO_WriteBit>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	607b      	str	r3, [r7, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f7ff fee5 	bl	8004b94 <ucg_com_arduino_send_generic_SW_SPI>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	893b      	ldrh	r3, [r7, #8]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	813b      	strh	r3, [r7, #8]
 8004dd6:	893b      	ldrh	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1d8      	bne.n	8004d8e <ucg_com_arduino_generic_SW_SPI+0x186>
 8004ddc:	bf00      	nop
 8004dde:	2301      	movs	r3, #1
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40020000 	.word	0x40020000
 8004dec:	40020400 	.word	0x40020400
 8004df0:	40020800 	.word	0x40020800

08004df4 <Ucglib4WireSWSPI_begin>:
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	70fb      	strb	r3, [r7, #3]
 8004e00:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <Ucglib4WireSWSPI_begin+0x2c>)
 8004e02:	4a08      	ldr	r2, [pc, #32]	; (8004e24 <Ucglib4WireSWSPI_begin+0x30>)
 8004e04:	4908      	ldr	r1, [pc, #32]	; (8004e28 <Ucglib4WireSWSPI_begin+0x34>)
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f001 f8d8 	bl	8005fbc <ucg_Init>
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 ff94 	bl	8005d3e <ucg_SetFontMode>
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	08004c09 	.word	0x08004c09
 8004e24:	08005461 	.word	0x08005461
 8004e28:	080055a5 	.word	0x080055a5

08004e2c <ucg_DrawBox>:
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	4608      	mov	r0, r1
 8004e36:	4611      	mov	r1, r2
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	817b      	strh	r3, [r7, #10]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	813b      	strh	r3, [r7, #8]
 8004e42:	4613      	mov	r3, r2
 8004e44:	80fb      	strh	r3, [r7, #6]
 8004e46:	e014      	b.n	8004e72 <ucg_DrawBox+0x46>
 8004e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e4c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004e50:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f001 f923 	bl	80060a0 <ucg_DrawHLine>
 8004e5a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	833b      	strh	r3, [r7, #24]
 8004e66:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	813b      	strh	r3, [r7, #8]
 8004e72:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	dce6      	bgt.n	8004e48 <ucg_DrawBox+0x1c>
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <ucg_ClearScreen>:
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af02      	add	r7, sp, #8
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2200      	movs	r2, #0
 8004e92:	2100      	movs	r1, #0
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f001 f922 	bl	80060de <ucg_SetColor>
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fb3b 	bl	8005516 <ucg_SetMaxClipRange>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff ffb9 	bl	8004e2c <ucg_DrawBox>
 8004eba:	23ff      	movs	r3, #255	; 0xff
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	23ff      	movs	r3, #255	; 0xff
 8004ec0:	22ff      	movs	r2, #255	; 0xff
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f001 f90a 	bl	80060de <ucg_SetColor>
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <ucg_ccs_init>:
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	4608      	mov	r0, r1
 8004edc:	4611      	mov	r1, r2
 8004ede:	461a      	mov	r2, r3
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	70fb      	strb	r3, [r7, #3]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	70bb      	strb	r3, [r7, #2]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	803b      	strh	r3, [r7, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	78fa      	ldrb	r2, [r7, #3]
 8004ef0:	705a      	strb	r2, [r3, #1]
 8004ef2:	78bb      	ldrb	r3, [r7, #2]
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	78fb      	ldrb	r3, [r7, #3]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	b21a      	sxth	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	809a      	strh	r2, [r3, #4]
 8004f04:	883b      	ldrh	r3, [r7, #0]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	b21a      	sxth	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	811a      	strh	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	805a      	strh	r2, [r3, #2]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f24:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f28:	b21a      	sxth	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	80da      	strh	r2, [r3, #6]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	da0c      	bge.n	8004f52 <ucg_ccs_init+0x80>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	425b      	negs	r3, r3
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	b21a      	sxth	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	809a      	strh	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f50:	805a      	strh	r2, [r3, #2]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8004f5e:	fb93 f1f2 	sdiv	r1, r3, r2
 8004f62:	fb02 f201 	mul.w	r2, r2, r1
 8004f66:	1a9b      	subs	r3, r3, r2
 8004f68:	b21a      	sxth	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	815a      	strh	r2, [r3, #10]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f74:	0fda      	lsrs	r2, r3, #31
 8004f76:	4413      	add	r3, r2
 8004f78:	105b      	asrs	r3, r3, #1
 8004f7a:	b21a      	sxth	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	819a      	strh	r2, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <ucg_ccs_step>:
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	781a      	ldrb	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	4413      	add	r3, r2
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	b21a      	sxth	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	819a      	strh	r2, [r3, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	db16      	blt.n	8005006 <ucg_ccs_step+0x74>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	781a      	ldrb	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	4413      	add	r3, r2
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	b21a      	sxth	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	819a      	strh	r2, [r3, #12]
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <ucg_ccs_seek>:
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	460b      	mov	r3, r1
 800501c:	807b      	strh	r3, [r7, #2]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005024:	b2da      	uxtb	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	887b      	ldrh	r3, [r7, #2]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	fb12 f303 	smulbb	r3, r2, r3
 8005036:	b2da      	uxtb	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	701a      	strb	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005042:	b29a      	uxth	r2, r3
 8005044:	887b      	ldrh	r3, [r7, #2]
 8005046:	fb12 f303 	smulbb	r3, r2, r3
 800504a:	b29a      	uxth	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005052:	0fd9      	lsrs	r1, r3, #31
 8005054:	440b      	add	r3, r1
 8005056:	105b      	asrs	r3, r3, #1
 8005058:	b21b      	sxth	r3, r3
 800505a:	b29b      	uxth	r3, r3
 800505c:	4413      	add	r3, r2
 800505e:	b29b      	uxth	r3, r3
 8005060:	81fb      	strh	r3, [r7, #14]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005068:	2b00      	cmp	r3, #0
 800506a:	db0e      	blt.n	800508a <ucg_ccs_seek+0x78>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	781a      	ldrb	r2, [r3, #0]
 8005070:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800507a:	fb93 f3f1 	sdiv	r3, r3, r1
 800507e:	b2db      	uxtb	r3, r3
 8005080:	4413      	add	r3, r2
 8005082:	b2da      	uxtb	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	e00d      	b.n	80050a6 <ucg_ccs_seek+0x94>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	781a      	ldrb	r2, [r3, #0]
 800508e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8005098:	fb93 f3f1 	sdiv	r3, r3, r1
 800509c:	b2db      	uxtb	r3, r3
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80050b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80050b4:	fb02 f201 	mul.w	r2, r2, r1
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	b21a      	sxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	819a      	strh	r2, [r3, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	781a      	ldrb	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	4413      	add	r3, r2
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	701a      	strb	r2, [r3, #0]
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <ucg_dev_default_cb>:
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	460b      	mov	r3, r1
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	817b      	strh	r3, [r7, #10]
 80050ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050ee:	2b0c      	cmp	r3, #12
 80050f0:	d00a      	beq.n	8005108 <ucg_dev_default_cb+0x2c>
 80050f2:	2b17      	cmp	r3, #23
 80050f4:	d10f      	bne.n	8005116 <ucg_dev_default_cb+0x3a>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	4798      	blx	r3
 8005104:	4603      	mov	r3, r0
 8005106:	e007      	b.n	8005118 <ucg_dev_default_cb+0x3c>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	3370      	adds	r3, #112	; 0x70
 800510e:	6810      	ldr	r0, [r2, #0]
 8005110:	6851      	ldr	r1, [r2, #4]
 8005112:	c303      	stmia	r3!, {r0, r1}
 8005114:	bf00      	nop
 8005116:	2301      	movs	r3, #1
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <ucg_ext_none>:
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	460b      	mov	r3, r1
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	817b      	strh	r3, [r7, #10]
 800512e:	2301      	movs	r3, #1
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <ucg_handle_st7735_l90fx>:
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f001 fab1 	bl	80066ac <ucg_clip_l90fx>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d053      	beq.n	80051f8 <ucg_handle_st7735_l90fx+0xbc>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005156:	2b01      	cmp	r3, #1
 8005158:	d008      	beq.n	800516c <ucg_handle_st7735_l90fx+0x30>
 800515a:	2b02      	cmp	r3, #2
 800515c:	d00b      	beq.n	8005176 <ucg_handle_st7735_l90fx+0x3a>
 800515e:	2b00      	cmp	r3, #0
 8005160:	d11b      	bne.n	800519a <ucg_handle_st7735_l90fx+0x5e>
 8005162:	4928      	ldr	r1, [pc, #160]	; (8005204 <ucg_handle_st7735_l90fx+0xc8>)
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f001 fdcf 	bl	8006d08 <ucg_com_SendCmdSeq>
 800516a:	e028      	b.n	80051be <ucg_handle_st7735_l90fx+0x82>
 800516c:	4926      	ldr	r1, [pc, #152]	; (8005208 <ucg_handle_st7735_l90fx+0xcc>)
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f001 fdca 	bl	8006d08 <ucg_com_SendCmdSeq>
 8005174:	e023      	b.n	80051be <ucg_handle_st7735_l90fx+0x82>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800517a:	81fb      	strh	r3, [r7, #14]
 800517c:	89fb      	ldrh	r3, [r7, #14]
 800517e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8005182:	b29b      	uxth	r3, r3
 8005184:	b21a      	sxth	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	849a      	strh	r2, [r3, #36]	; 0x24
 800518a:	4920      	ldr	r1, [pc, #128]	; (800520c <ucg_handle_st7735_l90fx+0xd0>)
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f001 fdbb 	bl	8006d08 <ucg_com_SendCmdSeq>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	89fa      	ldrh	r2, [r7, #14]
 8005196:	849a      	strh	r2, [r3, #36]	; 0x24
 8005198:	e011      	b.n	80051be <ucg_handle_st7735_l90fx+0x82>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800519e:	81fb      	strh	r3, [r7, #14]
 80051a0:	89fb      	ldrh	r3, [r7, #14]
 80051a2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	b21a      	sxth	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	84da      	strh	r2, [r3, #38]	; 0x26
 80051ae:	4918      	ldr	r1, [pc, #96]	; (8005210 <ucg_handle_st7735_l90fx+0xd4>)
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f001 fda9 	bl	8006d08 <ucg_com_SendCmdSeq>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	89fa      	ldrh	r2, [r7, #14]
 80051ba:	84da      	strh	r2, [r3, #38]	; 0x26
 80051bc:	bf00      	nop
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051c4:	723b      	strb	r3, [r7, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80051cc:	727b      	strb	r3, [r7, #9]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80051d4:	72bb      	strb	r3, [r7, #10]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69dc      	ldr	r4, [r3, #28]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	f107 0308 	add.w	r3, r7, #8
 80051e6:	2113      	movs	r1, #19
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	47a0      	blx	r4
 80051ec:	2101      	movs	r1, #1
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f001 fcd6 	bl	8006ba0 <ucg_com_SetCSLineStatus>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <ucg_handle_st7735_l90fx+0xbe>
 80051f8:	2300      	movs	r3, #0
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd90      	pop	{r4, r7, pc}
 8005202:	bf00      	nop
 8005204:	08007368 	.word	0x08007368
 8005208:	08007388 	.word	0x08007388
 800520c:	080073ac 	.word	0x080073ac
 8005210:	080073d0 	.word	0x080073d0

08005214 <ucg_handle_st7735_l90se>:
 8005214:	b590      	push	{r4, r7, lr}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	2300      	movs	r3, #0
 800521e:	75fb      	strb	r3, [r7, #23]
 8005220:	e01a      	b.n	8005258 <ucg_handle_st7735_l90se+0x44>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8005228:	7dfa      	ldrb	r2, [r7, #23]
 800522a:	4613      	mov	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	18c8      	adds	r0, r1, r3
 8005234:	7dfb      	ldrb	r3, [r7, #23]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	4413      	add	r3, r2
 800523a:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 800523e:	7dfb      	ldrb	r3, [r7, #23]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	4413      	add	r3, r2
 8005244:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800524e:	f7ff fe40 	bl	8004ed2 <ucg_ccs_init>
 8005252:	7dfb      	ldrb	r3, [r7, #23]
 8005254:	3301      	adds	r3, #1
 8005256:	75fb      	strb	r3, [r7, #23]
 8005258:	7dfb      	ldrb	r3, [r7, #23]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d9e1      	bls.n	8005222 <ucg_handle_st7735_l90se+0xe>
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f001 fba4 	bl	80069ac <ucg_clip_l90se>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d071      	beq.n	800534e <ucg_handle_st7735_l90se+0x13a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005270:	2b01      	cmp	r3, #1
 8005272:	d008      	beq.n	8005286 <ucg_handle_st7735_l90se+0x72>
 8005274:	2b02      	cmp	r3, #2
 8005276:	d00b      	beq.n	8005290 <ucg_handle_st7735_l90se+0x7c>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d11b      	bne.n	80052b4 <ucg_handle_st7735_l90se+0xa0>
 800527c:	4936      	ldr	r1, [pc, #216]	; (8005358 <ucg_handle_st7735_l90se+0x144>)
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f001 fd42 	bl	8006d08 <ucg_com_SendCmdSeq>
 8005284:	e028      	b.n	80052d8 <ucg_handle_st7735_l90se+0xc4>
 8005286:	4935      	ldr	r1, [pc, #212]	; (800535c <ucg_handle_st7735_l90se+0x148>)
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f001 fd3d 	bl	8006d08 <ucg_com_SendCmdSeq>
 800528e:	e023      	b.n	80052d8 <ucg_handle_st7735_l90se+0xc4>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005294:	827b      	strh	r3, [r7, #18]
 8005296:	8a7b      	ldrh	r3, [r7, #18]
 8005298:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800529c:	b29b      	uxth	r3, r3
 800529e:	b21a      	sxth	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	849a      	strh	r2, [r3, #36]	; 0x24
 80052a4:	492e      	ldr	r1, [pc, #184]	; (8005360 <ucg_handle_st7735_l90se+0x14c>)
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f001 fd2e 	bl	8006d08 <ucg_com_SendCmdSeq>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8a7a      	ldrh	r2, [r7, #18]
 80052b0:	849a      	strh	r2, [r3, #36]	; 0x24
 80052b2:	e011      	b.n	80052d8 <ucg_handle_st7735_l90se+0xc4>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052b8:	827b      	strh	r3, [r7, #18]
 80052ba:	8a7b      	ldrh	r3, [r7, #18]
 80052bc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	b21a      	sxth	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	84da      	strh	r2, [r3, #38]	; 0x26
 80052c8:	4926      	ldr	r1, [pc, #152]	; (8005364 <ucg_handle_st7735_l90se+0x150>)
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f001 fd1c 	bl	8006d08 <ucg_com_SendCmdSeq>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	8a7a      	ldrh	r2, [r7, #18]
 80052d4:	84da      	strh	r2, [r3, #38]	; 0x26
 80052d6:	bf00      	nop
 80052d8:	2300      	movs	r3, #0
 80052da:	82bb      	strh	r3, [r7, #20]
 80052dc:	e02a      	b.n	8005334 <ucg_handle_st7735_l90se+0x120>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80052e4:	733b      	strb	r3, [r7, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80052ec:	737b      	strb	r3, [r7, #13]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80052f4:	73bb      	strb	r3, [r7, #14]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69dc      	ldr	r4, [r3, #28]
 80052fa:	f107 030c 	add.w	r3, r7, #12
 80052fe:	2201      	movs	r2, #1
 8005300:	2113      	movs	r1, #19
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	47a0      	blx	r4
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3346      	adds	r3, #70	; 0x46
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff fe41 	bl	8004f92 <ucg_ccs_step>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3346      	adds	r3, #70	; 0x46
 8005314:	330e      	adds	r3, #14
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff fe3b 	bl	8004f92 <ucg_ccs_step>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3346      	adds	r3, #70	; 0x46
 8005320:	331c      	adds	r3, #28
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff fe35 	bl	8004f92 <ucg_ccs_step>
 8005328:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800532c:	b29b      	uxth	r3, r3
 800532e:	3301      	adds	r3, #1
 8005330:	b29b      	uxth	r3, r3
 8005332:	82bb      	strh	r3, [r7, #20]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800533a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800533e:	429a      	cmp	r2, r3
 8005340:	dbcd      	blt.n	80052de <ucg_handle_st7735_l90se+0xca>
 8005342:	2101      	movs	r1, #1
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f001 fc2b 	bl	8006ba0 <ucg_com_SetCSLineStatus>
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <ucg_handle_st7735_l90se+0x13c>
 800534e:	2300      	movs	r3, #0
 8005350:	4618      	mov	r0, r3
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	bd90      	pop	{r4, r7, pc}
 8005358:	08007368 	.word	0x08007368
 800535c:	08007388 	.word	0x08007388
 8005360:	080073ac 	.word	0x080073ac
 8005364:	080073d0 	.word	0x080073d0

08005368 <ucg_dev_ic_st7735_18>:
 8005368:	b590      	push	{r4, r7, lr}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	460b      	mov	r3, r1
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	817b      	strh	r3, [r7, #10]
 8005376:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800537a:	3b0a      	subs	r3, #10
 800537c:	2b0b      	cmp	r3, #11
 800537e:	d85f      	bhi.n	8005440 <ucg_dev_ic_st7735_18+0xd8>
 8005380:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <ucg_dev_ic_st7735_18+0x20>)
 8005382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005386:	bf00      	nop
 8005388:	080053b9 	.word	0x080053b9
 800538c:	080053d3 	.word	0x080053d3
 8005390:	08005441 	.word	0x08005441
 8005394:	08005441 	.word	0x08005441
 8005398:	08005441 	.word	0x08005441
 800539c:	080053df 	.word	0x080053df
 80053a0:	08005441 	.word	0x08005441
 80053a4:	08005441 	.word	0x08005441
 80053a8:	08005441 	.word	0x08005441
 80053ac:	08005441 	.word	0x08005441
 80053b0:	080053ef 	.word	0x080053ef
 80053b4:	08005437 	.word	0x08005437
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2202      	movs	r2, #2
 80053bc:	841a      	strh	r2, [r3, #32]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	845a      	strh	r2, [r3, #34]	; 0x22
 80053c4:	2242      	movs	r2, #66	; 0x42
 80053c6:	2164      	movs	r1, #100	; 0x64
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f001 fb38 	bl	8006a3e <ucg_com_PowerUp>
 80053ce:	4603      	mov	r3, r0
 80053d0:	e03e      	b.n	8005450 <ucg_dev_ic_st7735_18+0xe8>
 80053d2:	4921      	ldr	r1, [pc, #132]	; (8005458 <ucg_dev_ic_st7735_18+0xf0>)
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f001 fc97 	bl	8006d08 <ucg_com_SendCmdSeq>
 80053da:	2301      	movs	r3, #1
 80053dc:	e038      	b.n	8005450 <ucg_dev_ic_st7735_18+0xe8>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2280      	movs	r2, #128	; 0x80
 80053e2:	801a      	strh	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2280      	movs	r2, #128	; 0x80
 80053e8:	805a      	strh	r2, [r3, #2]
 80053ea:	2301      	movs	r3, #1
 80053ec:	e030      	b.n	8005450 <ucg_dev_ic_st7735_18+0xe8>
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f001 f943 	bl	800667a <ucg_clip_is_pixel_visible>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01b      	beq.n	8005432 <ucg_dev_ic_st7735_18+0xca>
 80053fa:	4918      	ldr	r1, [pc, #96]	; (800545c <ucg_dev_ic_st7735_18+0xf4>)
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f001 fc83 	bl	8006d08 <ucg_com_SendCmdSeq>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005408:	753b      	strb	r3, [r7, #20]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005410:	757b      	strb	r3, [r7, #21]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005418:	75bb      	strb	r3, [r7, #22]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	69dc      	ldr	r4, [r3, #28]
 800541e:	f107 0314 	add.w	r3, r7, #20
 8005422:	2201      	movs	r2, #1
 8005424:	2113      	movs	r1, #19
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	47a0      	blx	r4
 800542a:	2101      	movs	r1, #1
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f001 fbb7 	bl	8006ba0 <ucg_com_SetCSLineStatus>
 8005432:	2301      	movs	r3, #1
 8005434:	e00c      	b.n	8005450 <ucg_dev_ic_st7735_18+0xe8>
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7ff fe80 	bl	800513c <ucg_handle_st7735_l90fx>
 800543c:	2301      	movs	r3, #1
 800543e:	e007      	b.n	8005450 <ucg_dev_ic_st7735_18+0xe8>
 8005440:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	4619      	mov	r1, r3
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f7ff fe47 	bl	80050dc <ucg_dev_default_cb>
 800544e:	4603      	mov	r3, r0
 8005450:	4618      	mov	r0, r3
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	bd90      	pop	{r4, r7, pc}
 8005458:	080073f4 	.word	0x080073f4
 800545c:	08007348 	.word	0x08007348

08005460 <ucg_ext_st7735_18>:
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	460b      	mov	r3, r1
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	817b      	strh	r3, [r7, #10]
 800546e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005472:	2b17      	cmp	r3, #23
 8005474:	d103      	bne.n	800547e <ucg_ext_st7735_18+0x1e>
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f7ff fecc 	bl	8005214 <ucg_handle_st7735_l90se>
 800547c:	bf00      	nop
 800547e:	2301      	movs	r3, #1
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <ucg_PowerDown>:
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <ucg_PowerDown+0x2c>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2200      	movs	r2, #0
 80054a4:	210b      	movs	r1, #11
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	4798      	blx	r3
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	7813      	ldrb	r3, [r2, #0]
 80054ae:	f36f 0300 	bfc	r3, #0, #1
 80054b2:	7013      	strb	r3, [r2, #0]
 80054b4:	bf00      	nop
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <ucg_PowerUp>:
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff ffdf 	bl	8005488 <ucg_PowerDown>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2200      	movs	r2, #0
 80054d0:	210a      	movs	r1, #10
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	4798      	blx	r3
 80054d6:	4603      	mov	r3, r0
 80054d8:	81fb      	strh	r3, [r7, #14]
 80054da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <ucg_PowerUp+0x30>
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	7813      	ldrb	r3, [r2, #0]
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	7013      	strb	r3, [r2, #0]
 80054ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <ucg_SetClipBox>:
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	210c      	movs	r1, #12
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <ucg_SetMaxClipRange>:
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	f107 030c 	add.w	r3, r7, #12
 8005524:	3202      	adds	r2, #2
 8005526:	6810      	ldr	r0, [r2, #0]
 8005528:	6018      	str	r0, [r3, #0]
 800552a:	2300      	movs	r3, #0
 800552c:	813b      	strh	r3, [r7, #8]
 800552e:	2300      	movs	r3, #0
 8005530:	817b      	strh	r3, [r7, #10]
 8005532:	f107 0308 	add.w	r3, r7, #8
 8005536:	4619      	mov	r1, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff ffdd 	bl	80054f8 <ucg_SetClipBox>
 800553e:	bf00      	nop
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <ucg_GetDimension>:
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	3202      	adds	r2, #2
 8005556:	210f      	movs	r1, #15
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff ffda 	bl	8005516 <ucg_SetMaxClipRange>
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <ucg_DrawPixelWithArg>:
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	2200      	movs	r2, #0
 8005578:	2114      	movs	r1, #20
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	4798      	blx	r3
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <ucg_DrawL90FXWithArg>:
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	3224      	adds	r2, #36	; 0x24
 8005596:	2115      	movs	r1, #21
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
 800559c:	bf00      	nop
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <ucg_dev_st7735_18x128x128>:
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	460b      	mov	r3, r1
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	817b      	strh	r3, [r7, #10]
 80055b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80055b6:	2b0b      	cmp	r3, #11
 80055b8:	d015      	beq.n	80055e6 <ucg_dev_st7735_18x128x128+0x42>
 80055ba:	2b0f      	cmp	r3, #15
 80055bc:	d01c      	beq.n	80055f8 <ucg_dev_st7735_18x128x128+0x54>
 80055be:	2b0a      	cmp	r3, #10
 80055c0:	d122      	bne.n	8005608 <ucg_dev_st7735_18x128x128+0x64>
 80055c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	4619      	mov	r1, r3
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f7ff fecc 	bl	8005368 <ucg_dev_ic_st7735_18>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <ucg_dev_st7735_18x128x128+0x36>
 80055d6:	2300      	movs	r3, #0
 80055d8:	e01e      	b.n	8005618 <ucg_dev_st7735_18x128x128+0x74>
 80055da:	4911      	ldr	r1, [pc, #68]	; (8005620 <ucg_dev_st7735_18x128x128+0x7c>)
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f001 fb93 	bl	8006d08 <ucg_com_SendCmdSeq>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e018      	b.n	8005618 <ucg_dev_st7735_18x128x128+0x74>
 80055e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	4619      	mov	r1, r3
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f7ff feba 	bl	8005368 <ucg_dev_ic_st7735_18>
 80055f4:	4603      	mov	r3, r0
 80055f6:	e00f      	b.n	8005618 <ucg_dev_st7735_18x128x128+0x74>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2280      	movs	r2, #128	; 0x80
 80055fc:	801a      	strh	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2280      	movs	r2, #128	; 0x80
 8005602:	805a      	strh	r2, [r3, #2]
 8005604:	2301      	movs	r3, #1
 8005606:	e007      	b.n	8005618 <ucg_dev_st7735_18x128x128+0x74>
 8005608:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	4619      	mov	r1, r3
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7ff fea9 	bl	8005368 <ucg_dev_ic_st7735_18>
 8005616:	4603      	mov	r3, r0
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	080073fc 	.word	0x080073fc

08005624 <ucg_font_get_byte>:
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	70fb      	strb	r3, [r7, #3]
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	4413      	add	r3, r2
 8005636:	607b      	str	r3, [r7, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <ucg_font_get_word>:
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	70fb      	strb	r3, [r7, #3]
 8005654:	78fb      	ldrb	r3, [r7, #3]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4413      	add	r3, r2
 800565a:	607b      	str	r3, [r7, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	81fb      	strh	r3, [r7, #14]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3301      	adds	r3, #1
 8005666:	607b      	str	r3, [r7, #4]
 8005668:	89fb      	ldrh	r3, [r7, #14]
 800566a:	021b      	lsls	r3, r3, #8
 800566c:	81fb      	strh	r3, [r7, #14]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	b29a      	uxth	r2, r3
 8005674:	89fb      	ldrh	r3, [r7, #14]
 8005676:	4413      	add	r3, r2
 8005678:	81fb      	strh	r3, [r7, #14]
 800567a:	89fb      	ldrh	r3, [r7, #14]
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <ucg_read_font_info>:
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
 8005692:	2100      	movs	r1, #0
 8005694:	6838      	ldr	r0, [r7, #0]
 8005696:	f7ff ffc5 	bl	8005624 <ucg_font_get_byte>
 800569a:	4603      	mov	r3, r0
 800569c:	461a      	mov	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	2101      	movs	r1, #1
 80056a4:	6838      	ldr	r0, [r7, #0]
 80056a6:	f7ff ffbd 	bl	8005624 <ucg_font_get_byte>
 80056aa:	4603      	mov	r3, r0
 80056ac:	461a      	mov	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	705a      	strb	r2, [r3, #1]
 80056b2:	2102      	movs	r1, #2
 80056b4:	6838      	ldr	r0, [r7, #0]
 80056b6:	f7ff ffb5 	bl	8005624 <ucg_font_get_byte>
 80056ba:	4603      	mov	r3, r0
 80056bc:	461a      	mov	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	709a      	strb	r2, [r3, #2]
 80056c2:	2103      	movs	r1, #3
 80056c4:	6838      	ldr	r0, [r7, #0]
 80056c6:	f7ff ffad 	bl	8005624 <ucg_font_get_byte>
 80056ca:	4603      	mov	r3, r0
 80056cc:	461a      	mov	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	70da      	strb	r2, [r3, #3]
 80056d2:	2104      	movs	r1, #4
 80056d4:	6838      	ldr	r0, [r7, #0]
 80056d6:	f7ff ffa5 	bl	8005624 <ucg_font_get_byte>
 80056da:	4603      	mov	r3, r0
 80056dc:	461a      	mov	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	711a      	strb	r2, [r3, #4]
 80056e2:	2105      	movs	r1, #5
 80056e4:	6838      	ldr	r0, [r7, #0]
 80056e6:	f7ff ff9d 	bl	8005624 <ucg_font_get_byte>
 80056ea:	4603      	mov	r3, r0
 80056ec:	461a      	mov	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	715a      	strb	r2, [r3, #5]
 80056f2:	2106      	movs	r1, #6
 80056f4:	6838      	ldr	r0, [r7, #0]
 80056f6:	f7ff ff95 	bl	8005624 <ucg_font_get_byte>
 80056fa:	4603      	mov	r3, r0
 80056fc:	461a      	mov	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	719a      	strb	r2, [r3, #6]
 8005702:	2107      	movs	r1, #7
 8005704:	6838      	ldr	r0, [r7, #0]
 8005706:	f7ff ff8d 	bl	8005624 <ucg_font_get_byte>
 800570a:	4603      	mov	r3, r0
 800570c:	461a      	mov	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	71da      	strb	r2, [r3, #7]
 8005712:	2108      	movs	r1, #8
 8005714:	6838      	ldr	r0, [r7, #0]
 8005716:	f7ff ff85 	bl	8005624 <ucg_font_get_byte>
 800571a:	4603      	mov	r3, r0
 800571c:	461a      	mov	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	721a      	strb	r2, [r3, #8]
 8005722:	2109      	movs	r1, #9
 8005724:	6838      	ldr	r0, [r7, #0]
 8005726:	f7ff ff7d 	bl	8005624 <ucg_font_get_byte>
 800572a:	4603      	mov	r3, r0
 800572c:	b25a      	sxtb	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	725a      	strb	r2, [r3, #9]
 8005732:	210a      	movs	r1, #10
 8005734:	6838      	ldr	r0, [r7, #0]
 8005736:	f7ff ff75 	bl	8005624 <ucg_font_get_byte>
 800573a:	4603      	mov	r3, r0
 800573c:	b25a      	sxtb	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	729a      	strb	r2, [r3, #10]
 8005742:	210b      	movs	r1, #11
 8005744:	6838      	ldr	r0, [r7, #0]
 8005746:	f7ff ff6d 	bl	8005624 <ucg_font_get_byte>
 800574a:	4603      	mov	r3, r0
 800574c:	b25a      	sxtb	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	72da      	strb	r2, [r3, #11]
 8005752:	210c      	movs	r1, #12
 8005754:	6838      	ldr	r0, [r7, #0]
 8005756:	f7ff ff65 	bl	8005624 <ucg_font_get_byte>
 800575a:	4603      	mov	r3, r0
 800575c:	b25a      	sxtb	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	731a      	strb	r2, [r3, #12]
 8005762:	210d      	movs	r1, #13
 8005764:	6838      	ldr	r0, [r7, #0]
 8005766:	f7ff ff5d 	bl	8005624 <ucg_font_get_byte>
 800576a:	4603      	mov	r3, r0
 800576c:	b25a      	sxtb	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	735a      	strb	r2, [r3, #13]
 8005772:	210e      	movs	r1, #14
 8005774:	6838      	ldr	r0, [r7, #0]
 8005776:	f7ff ff55 	bl	8005624 <ucg_font_get_byte>
 800577a:	4603      	mov	r3, r0
 800577c:	b25a      	sxtb	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	739a      	strb	r2, [r3, #14]
 8005782:	210f      	movs	r1, #15
 8005784:	6838      	ldr	r0, [r7, #0]
 8005786:	f7ff ff4d 	bl	8005624 <ucg_font_get_byte>
 800578a:	4603      	mov	r3, r0
 800578c:	b25a      	sxtb	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	73da      	strb	r2, [r3, #15]
 8005792:	2110      	movs	r1, #16
 8005794:	6838      	ldr	r0, [r7, #0]
 8005796:	f7ff ff45 	bl	8005624 <ucg_font_get_byte>
 800579a:	4603      	mov	r3, r0
 800579c:	b25a      	sxtb	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	741a      	strb	r2, [r3, #16]
 80057a2:	2111      	movs	r1, #17
 80057a4:	6838      	ldr	r0, [r7, #0]
 80057a6:	f7ff ff4f 	bl	8005648 <ucg_font_get_word>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461a      	mov	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	825a      	strh	r2, [r3, #18]
 80057b2:	2113      	movs	r1, #19
 80057b4:	6838      	ldr	r0, [r7, #0]
 80057b6:	f7ff ff47 	bl	8005648 <ucg_font_get_word>
 80057ba:	4603      	mov	r3, r0
 80057bc:	461a      	mov	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	829a      	strh	r2, [r3, #20]
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <ucg_font_decode_get_unsigned_bits>:
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	460b      	mov	r3, r1
 80057d4:	70fb      	strb	r3, [r7, #3]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	7b1b      	ldrb	r3, [r3, #12]
 80057da:	737b      	strb	r3, [r7, #13]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	73fb      	strb	r3, [r7, #15]
 80057e4:	7bfa      	ldrb	r2, [r7, #15]
 80057e6:	7b7b      	ldrb	r3, [r7, #13]
 80057e8:	fa42 f303 	asr.w	r3, r2, r3
 80057ec:	73fb      	strb	r3, [r7, #15]
 80057ee:	7b7b      	ldrb	r3, [r7, #13]
 80057f0:	73bb      	strb	r3, [r7, #14]
 80057f2:	7bba      	ldrb	r2, [r7, #14]
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	4413      	add	r3, r2
 80057f8:	73bb      	strb	r3, [r7, #14]
 80057fa:	7bbb      	ldrb	r3, [r7, #14]
 80057fc:	2b07      	cmp	r3, #7
 80057fe:	d91a      	bls.n	8005836 <ucg_font_decode_get_unsigned_bits+0x6c>
 8005800:	2308      	movs	r3, #8
 8005802:	733b      	strb	r3, [r7, #12]
 8005804:	7b3a      	ldrb	r2, [r7, #12]
 8005806:	7b7b      	ldrb	r3, [r7, #13]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	733b      	strb	r3, [r7, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	7b3b      	ldrb	r3, [r7, #12]
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	b25a      	sxtb	r2, r3
 8005826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800582a:	4313      	orrs	r3, r2
 800582c:	b25b      	sxtb	r3, r3
 800582e:	73fb      	strb	r3, [r7, #15]
 8005830:	7bbb      	ldrb	r3, [r7, #14]
 8005832:	3b08      	subs	r3, #8
 8005834:	73bb      	strb	r3, [r7, #14]
 8005836:	78fb      	ldrb	r3, [r7, #3]
 8005838:	f04f 32ff 	mov.w	r2, #4294967295
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	b2db      	uxtb	r3, r3
 8005842:	43db      	mvns	r3, r3
 8005844:	b2da      	uxtb	r2, r3
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	4013      	ands	r3, r2
 800584a:	73fb      	strb	r3, [r7, #15]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	7bba      	ldrb	r2, [r7, #14]
 8005850:	731a      	strb	r2, [r3, #12]
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <ucg_font_decode_get_signed_bits>:
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	460b      	mov	r3, r1
 800586a:	70fb      	strb	r3, [r7, #3]
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7ff ffaa 	bl	80057ca <ucg_font_decode_get_unsigned_bits>
 8005876:	4603      	mov	r3, r0
 8005878:	73fb      	strb	r3, [r7, #15]
 800587a:	2301      	movs	r3, #1
 800587c:	73bb      	strb	r3, [r7, #14]
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	3b01      	subs	r3, #1
 8005882:	70fb      	strb	r3, [r7, #3]
 8005884:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	73bb      	strb	r3, [r7, #14]
 8005890:	7bfa      	ldrb	r2, [r7, #15]
 8005892:	7bbb      	ldrb	r3, [r7, #14]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	b2db      	uxtb	r3, r3
 8005898:	73fb      	strb	r3, [r7, #15]
 800589a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <ucg_add_vector_y>:
 80058a6:	b490      	push	{r4, r7}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	4604      	mov	r4, r0
 80058ae:	4608      	mov	r0, r1
 80058b0:	4611      	mov	r1, r2
 80058b2:	461a      	mov	r2, r3
 80058b4:	4623      	mov	r3, r4
 80058b6:	80fb      	strh	r3, [r7, #6]
 80058b8:	4603      	mov	r3, r0
 80058ba:	717b      	strb	r3, [r7, #5]
 80058bc:	460b      	mov	r3, r1
 80058be:	713b      	strb	r3, [r7, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	70fb      	strb	r3, [r7, #3]
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d00b      	beq.n	80058e2 <ucg_add_vector_y+0x3c>
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d011      	beq.n	80058f2 <ucg_add_vector_y+0x4c>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d117      	bne.n	8005902 <ucg_add_vector_y+0x5c>
 80058d2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	88fb      	ldrh	r3, [r7, #6]
 80058da:	4413      	add	r3, r2
 80058dc:	b29b      	uxth	r3, r3
 80058de:	80fb      	strh	r3, [r7, #6]
 80058e0:	e017      	b.n	8005912 <ucg_add_vector_y+0x6c>
 80058e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	88fb      	ldrh	r3, [r7, #6]
 80058ea:	4413      	add	r3, r2
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	80fb      	strh	r3, [r7, #6]
 80058f0:	e00f      	b.n	8005912 <ucg_add_vector_y+0x6c>
 80058f2:	88fa      	ldrh	r2, [r7, #6]
 80058f4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	80fb      	strh	r3, [r7, #6]
 8005900:	e007      	b.n	8005912 <ucg_add_vector_y+0x6c>
 8005902:	88fa      	ldrh	r2, [r7, #6]
 8005904:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005908:	b29b      	uxth	r3, r3
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	b29b      	uxth	r3, r3
 800590e:	80fb      	strh	r3, [r7, #6]
 8005910:	bf00      	nop
 8005912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bc90      	pop	{r4, r7}
 800591e:	4770      	bx	lr

08005920 <ucg_add_vector_x>:
 8005920:	b490      	push	{r4, r7}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	4604      	mov	r4, r0
 8005928:	4608      	mov	r0, r1
 800592a:	4611      	mov	r1, r2
 800592c:	461a      	mov	r2, r3
 800592e:	4623      	mov	r3, r4
 8005930:	80fb      	strh	r3, [r7, #6]
 8005932:	4603      	mov	r3, r0
 8005934:	717b      	strb	r3, [r7, #5]
 8005936:	460b      	mov	r3, r1
 8005938:	713b      	strb	r3, [r7, #4]
 800593a:	4613      	mov	r3, r2
 800593c:	70fb      	strb	r3, [r7, #3]
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d00b      	beq.n	800595c <ucg_add_vector_x+0x3c>
 8005944:	2b02      	cmp	r3, #2
 8005946:	d011      	beq.n	800596c <ucg_add_vector_x+0x4c>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d117      	bne.n	800597c <ucg_add_vector_x+0x5c>
 800594c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005950:	b29a      	uxth	r2, r3
 8005952:	88fb      	ldrh	r3, [r7, #6]
 8005954:	4413      	add	r3, r2
 8005956:	b29b      	uxth	r3, r3
 8005958:	80fb      	strh	r3, [r7, #6]
 800595a:	e017      	b.n	800598c <ucg_add_vector_x+0x6c>
 800595c:	88fa      	ldrh	r2, [r7, #6]
 800595e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005962:	b29b      	uxth	r3, r3
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	b29b      	uxth	r3, r3
 8005968:	80fb      	strh	r3, [r7, #6]
 800596a:	e00f      	b.n	800598c <ucg_add_vector_x+0x6c>
 800596c:	88fa      	ldrh	r2, [r7, #6]
 800596e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005972:	b29b      	uxth	r3, r3
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	b29b      	uxth	r3, r3
 8005978:	80fb      	strh	r3, [r7, #6]
 800597a:	e007      	b.n	800598c <ucg_add_vector_x+0x6c>
 800597c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005980:	b29a      	uxth	r2, r3
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	4413      	add	r3, r2
 8005986:	b29b      	uxth	r3, r3
 8005988:	80fb      	strh	r3, [r7, #6]
 800598a:	bf00      	nop
 800598c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bc90      	pop	{r4, r7}
 8005998:	4770      	bx	lr

0800599a <ucg_font_decode_len>:
 800599a:	b590      	push	{r4, r7, lr}
 800599c:	b089      	sub	sp, #36	; 0x24
 800599e:	af02      	add	r7, sp, #8
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	70fb      	strb	r3, [r7, #3]
 80059a6:	4613      	mov	r3, r2
 80059a8:	70bb      	strb	r3, [r7, #2]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3380      	adds	r3, #128	; 0x80
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	75fb      	strb	r3, [r7, #23]
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80059ba:	757b      	strb	r3, [r7, #21]
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80059c2:	753b      	strb	r3, [r7, #20]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80059ca:	73fb      	strb	r3, [r7, #15]
 80059cc:	7bfa      	ldrb	r2, [r7, #15]
 80059ce:	7d7b      	ldrb	r3, [r7, #21]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	73fb      	strb	r3, [r7, #15]
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	75bb      	strb	r3, [r7, #22]
 80059d8:	7dfa      	ldrb	r2, [r7, #23]
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d201      	bcs.n	80059e4 <ucg_font_decode_len+0x4a>
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
 80059e2:	75bb      	strb	r3, [r7, #22]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	889b      	ldrh	r3, [r3, #4]
 80059e8:	81bb      	strh	r3, [r7, #12]
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	88db      	ldrh	r3, [r3, #6]
 80059ee:	817b      	strh	r3, [r7, #10]
 80059f0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80059f4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	7b9b      	ldrb	r3, [r3, #14]
 80059fc:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8005a00:	f7ff ff8e 	bl	8005920 <ucg_add_vector_x>
 8005a04:	4603      	mov	r3, r0
 8005a06:	81bb      	strh	r3, [r7, #12]
 8005a08:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8005a0c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	7b9b      	ldrb	r3, [r3, #14]
 8005a14:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8005a18:	f7ff ff45 	bl	80058a6 <ucg_add_vector_y>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	817b      	strh	r3, [r7, #10]
 8005a20:	78bb      	ldrb	r3, [r7, #2]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d011      	beq.n	8005a4a <ucg_font_decode_len+0xb0>
 8005a26:	7dbb      	ldrb	r3, [r7, #22]
 8005a28:	b21c      	sxth	r4, r3
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	7b9b      	ldrb	r3, [r3, #14]
 8005a2e:	b21b      	sxth	r3, r3
 8005a30:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8005a34:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	9201      	str	r2, [sp, #4]
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	4623      	mov	r3, r4
 8005a40:	4602      	mov	r2, r0
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fae8 	bl	8006018 <ucg_Draw90Line>
 8005a48:	e014      	b.n	8005a74 <ucg_font_decode_len+0xda>
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	7b5b      	ldrb	r3, [r3, #13]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d110      	bne.n	8005a74 <ucg_font_decode_len+0xda>
 8005a52:	7dbb      	ldrb	r3, [r7, #22]
 8005a54:	b21c      	sxth	r4, r3
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	7b9b      	ldrb	r3, [r3, #14]
 8005a5a:	b21b      	sxth	r3, r3
 8005a5c:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8005a60:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	9201      	str	r2, [sp, #4]
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	4623      	mov	r3, r4
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fad2 	bl	8006018 <ucg_Draw90Line>
 8005a74:	7dfa      	ldrb	r2, [r7, #23]
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d309      	bcc.n	8005a90 <ucg_font_decode_len+0xf6>
 8005a7c:	7dfa      	ldrb	r2, [r7, #23]
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	75fb      	strb	r3, [r7, #23]
 8005a84:	2300      	movs	r3, #0
 8005a86:	757b      	strb	r3, [r7, #21]
 8005a88:	7d3b      	ldrb	r3, [r7, #20]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	753b      	strb	r3, [r7, #20]
 8005a8e:	e799      	b.n	80059c4 <ucg_font_decode_len+0x2a>
 8005a90:	bf00      	nop
 8005a92:	7d7a      	ldrb	r2, [r7, #21]
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	4413      	add	r3, r2
 8005a98:	757b      	strb	r3, [r7, #21]
 8005a9a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	721a      	strb	r2, [r3, #8]
 8005aa2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	725a      	strb	r2, [r3, #9]
 8005aaa:	bf00      	nop
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd90      	pop	{r4, r7, pc}

08005ab2 <ucg_font_setup_decode>:
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3380      	adds	r3, #128	; 0x80
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	731a      	strb	r2, [r3, #12]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005ae8:	4619      	mov	r1, r3
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff fe6d 	bl	80057ca <ucg_font_decode_get_unsigned_bits>
 8005af0:	4603      	mov	r3, r0
 8005af2:	b25a      	sxtb	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	729a      	strb	r2, [r3, #10]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005afe:	4619      	mov	r1, r3
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f7ff fe62 	bl	80057ca <ucg_font_decode_get_unsigned_bits>
 8005b06:	4603      	mov	r3, r0
 8005b08:	b25a      	sxtb	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	72da      	strb	r2, [r3, #11]
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <ucg_font_decode_glyph>:
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7ff ffc5 	bl	8005ab2 <ucg_font_setup_decode>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8005b2e:	73fb      	strb	r3, [r7, #15]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	f7ff fe8e 	bl	8005860 <ucg_font_decode_get_signed_bits>
 8005b44:	4603      	mov	r3, r0
 8005b46:	73bb      	strb	r3, [r7, #14]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8005b54:	4619      	mov	r1, r3
 8005b56:	4610      	mov	r0, r2
 8005b58:	f7ff fe82 	bl	8005860 <ucg_font_decode_get_signed_bits>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	737b      	strb	r3, [r7, #13]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f7ff fe76 	bl	8005860 <ucg_font_decode_get_signed_bits>
 8005b74:	4603      	mov	r3, r0
 8005b76:	733b      	strb	r3, [r7, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f993 308a 	ldrsb.w	r3, [r3, #138]	; 0x8a
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	dd69      	ble.n	8005c56 <ucg_font_decode_glyph+0x140>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	; 0x84
 8005b88:	7bfa      	ldrb	r2, [r7, #15]
 8005b8a:	7b7b      	ldrb	r3, [r7, #13]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	425b      	negs	r3, r3
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	b25a      	sxtb	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8005b9c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8005ba0:	f7ff febe 	bl	8005920 <ucg_add_vector_x>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	; 0x86
 8005bb4:	7bfa      	ldrb	r2, [r7, #15]
 8005bb6:	7b7b      	ldrb	r3, [r7, #13]
 8005bb8:	4413      	add	r3, r2
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	425b      	negs	r3, r3
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	b25a      	sxtb	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8005bc8:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8005bcc:	f7ff fe6b 	bl	80058a6 <ucg_add_vector_y>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	f7ff fde6 	bl	80057ca <ucg_font_decode_get_unsigned_bits>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	72fb      	strb	r3, [r7, #11]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4610      	mov	r0, r2
 8005c12:	f7ff fdda 	bl	80057ca <ucg_font_decode_get_unsigned_bits>
 8005c16:	4603      	mov	r3, r0
 8005c18:	72bb      	strb	r3, [r7, #10]
 8005c1a:	7afb      	ldrb	r3, [r7, #11]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff feba 	bl	800599a <ucg_font_decode_len>
 8005c26:	7abb      	ldrb	r3, [r7, #10]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff feb4 	bl	800599a <ucg_font_decode_len>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3380      	adds	r3, #128	; 0x80
 8005c36:	2101      	movs	r1, #1
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff fdc6 	bl	80057ca <ucg_font_decode_get_unsigned_bits>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1ea      	bne.n	8005c1a <ucg_font_decode_glyph+0x104>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f993 3089 	ldrsb.w	r3, [r3, #137]	; 0x89
 8005c4a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	dd00      	ble.n	8005c54 <ucg_font_decode_glyph+0x13e>
 8005c52:	e7ca      	b.n	8005bea <ucg_font_decode_glyph+0xd4>
 8005c54:	bf00      	nop
 8005c56:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <ucg_font_get_glyph_data>:
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	70fb      	strb	r3, [r7, #3]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3315      	adds	r3, #21
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	2b60      	cmp	r3, #96	; 0x60
 8005c7e:	d907      	bls.n	8005c90 <ucg_font_get_glyph_data+0x2e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8005c86:	461a      	mov	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e009      	b.n	8005ca4 <ucg_font_get_glyph_data+0x42>
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	2b40      	cmp	r3, #64	; 0x40
 8005c94:	d906      	bls.n	8005ca4 <ucg_font_get_glyph_data+0x42>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00e      	beq.n	8005ccc <ucg_font_get_glyph_data+0x6a>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	78fa      	ldrb	r2, [r7, #3]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d101      	bne.n	8005cbc <ucg_font_get_glyph_data+0x5a>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	e009      	b.n	8005cd0 <ucg_font_get_glyph_data+0x6e>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	e7eb      	b.n	8005ca4 <ucg_font_get_glyph_data+0x42>
 8005ccc:	bf00      	nop
 8005cce:	2300      	movs	r3, #0
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <ucg_font_draw_glyph>:
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	4608      	mov	r0, r1
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	461a      	mov	r2, r3
 8005cea:	4603      	mov	r3, r0
 8005cec:	817b      	strh	r3, [r7, #10]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	813b      	strh	r3, [r7, #8]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	71fb      	strb	r3, [r7, #7]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	82fb      	strh	r3, [r7, #22]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	897a      	ldrh	r2, [r7, #10]
 8005cfe:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	893a      	ldrh	r2, [r7, #8]
 8005d06:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	79fa      	ldrb	r2, [r7, #7]
 8005d0e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8005d12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d16:	4619      	mov	r1, r3
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f7ff ffa2 	bl	8005c62 <ucg_font_get_glyph_data>
 8005d1e:	6138      	str	r0, [r7, #16]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d005      	beq.n	8005d32 <ucg_font_draw_glyph+0x56>
 8005d26:	6939      	ldr	r1, [r7, #16]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f7ff fef4 	bl	8005b16 <ucg_font_decode_glyph>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	82fb      	strh	r3, [r7, #22]
 8005d32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <ucg_SetFontMode>:
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	460b      	mov	r3, r1
 8005d48:	70fb      	strb	r3, [r7, #3]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	78fa      	ldrb	r2, [r7, #3]
 8005d4e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <ucg_DrawGlyph>:
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	4608      	mov	r0, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4603      	mov	r3, r0
 8005d70:	817b      	strh	r3, [r7, #10]
 8005d72:	460b      	mov	r3, r1
 8005d74:	813b      	strh	r3, [r7, #8]
 8005d76:	4613      	mov	r3, r2
 8005d78:	71fb      	strb	r3, [r7, #7]
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d837      	bhi.n	8005df0 <ucg_DrawGlyph+0x90>
 8005d80:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <ucg_DrawGlyph+0x28>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005d99 	.word	0x08005d99
 8005d8c:	08005daf 	.word	0x08005daf
 8005d90:	08005dc5 	.word	0x08005dc5
 8005d94:	08005ddb 	.word	0x08005ddb
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	4798      	blx	r3
 8005da0:	4603      	mov	r3, r0
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	893b      	ldrh	r3, [r7, #8]
 8005da6:	4413      	add	r3, r2
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	813b      	strh	r3, [r7, #8]
 8005dac:	e020      	b.n	8005df0 <ucg_DrawGlyph+0x90>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	4798      	blx	r3
 8005db6:	4603      	mov	r3, r0
 8005db8:	897a      	ldrh	r2, [r7, #10]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	817b      	strh	r3, [r7, #10]
 8005dc2:	e015      	b.n	8005df0 <ucg_DrawGlyph+0x90>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	4798      	blx	r3
 8005dcc:	4603      	mov	r3, r0
 8005dce:	893a      	ldrh	r2, [r7, #8]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	813b      	strh	r3, [r7, #8]
 8005dd8:	e00a      	b.n	8005df0 <ucg_DrawGlyph+0x90>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	4798      	blx	r3
 8005de2:	4603      	mov	r3, r0
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	897b      	ldrh	r3, [r7, #10]
 8005de8:	4413      	add	r3, r2
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	817b      	strh	r3, [r7, #10]
 8005dee:	bf00      	nop
 8005df0:	79f8      	ldrb	r0, [r7, #7]
 8005df2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005df6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8005dfa:	7e3b      	ldrb	r3, [r7, #24]
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	4603      	mov	r3, r0
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f7ff ff6b 	bl	8005cdc <ucg_font_draw_glyph>
 8005e06:	4603      	mov	r3, r0
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <ucg_UpdateRefHeight>:
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d05d      	beq.n	8005edc <ucg_UpdateRefHeight+0xcc>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f993 209d 	ldrsb.w	r2, [r3, #157]	; 0x9d
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f993 209e 	ldrsb.w	r2, [r3, #158]	; 0x9e
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d04d      	beq.n	8005ede <ucg_UpdateRefHeight+0xce>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d11c      	bne.n	8005e86 <ucg_UpdateRefHeight+0x76>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f993 20ac 	ldrsb.w	r2, [r3, #172]	; 0xac
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f993 309f 	ldrsb.w	r3, [r3, #159]	; 0x9f
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	da05      	bge.n	8005e68 <ucg_UpdateRefHeight+0x58>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f993 209f 	ldrsb.w	r2, [r3, #159]	; 0x9f
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8005e74:	429a      	cmp	r2, r3
 8005e76:	dd32      	ble.n	8005ede <ucg_UpdateRefHeight+0xce>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f993 20a0 	ldrsb.w	r2, [r3, #160]	; 0xa0
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8005e84:	e02b      	b.n	8005ede <ucg_UpdateRefHeight+0xce>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f993 30ac 	ldrsb.w	r3, [r3, #172]	; 0xac
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8005e94:	4619      	mov	r1, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8005e9c:	440b      	add	r3, r1
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	da0d      	bge.n	8005ebe <ucg_UpdateRefHeight+0xae>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	4413      	add	r3, r2
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	b25a      	sxtb	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	dd07      	ble.n	8005ede <ucg_UpdateRefHeight+0xce>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f993 209c 	ldrsb.w	r2, [r3, #156]	; 0x9c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8005eda:	e000      	b.n	8005ede <ucg_UpdateRefHeight+0xce>
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <ucg_font_calc_vref_font>:
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
	...

08005f00 <ucg_SetFontPosBaseline>:
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a04      	ldr	r2, [pc, #16]	; (8005f1c <ucg_SetFontPosBaseline+0x1c>)
 8005f0c:	67da      	str	r2, [r3, #124]	; 0x7c
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	08005ee9 	.word	0x08005ee9

08005f20 <ucg_SetFont>:
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d012      	beq.n	8005f5a <ucg_SetFont+0x3a>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	679a      	str	r2, [r3, #120]	; 0x78
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3390      	adds	r3, #144	; 0x90
 8005f3e:	6839      	ldr	r1, [r7, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff fba1 	bl	8005688 <ucg_read_font_info>
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff ff62 	bl	8005e10 <ucg_UpdateRefHeight>
 8005f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f50:	220c      	movs	r2, #12
 8005f52:	4904      	ldr	r1, [pc, #16]	; (8005f64 <ucg_SetFont+0x44>)
 8005f54:	4804      	ldr	r0, [pc, #16]	; (8005f68 <ucg_SetFont+0x48>)
 8005f56:	f000 f9fd 	bl	8006354 <bufInit>
 8005f5a:	bf00      	nop
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	200005a4 	.word	0x200005a4
 8005f68:	200005b4 	.word	0x200005b4

08005f6c <ucg_init_struct>:
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	7813      	ldrb	r3, [r2, #0]
 8005f78:	f36f 0300 	bfc	r3, #0, #1
 8005f7c:	7013      	strb	r3, [r2, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	611a      	str	r2, [r3, #16]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	865a      	strh	r2, [r3, #50]	; 0x32
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	679a      	str	r2, [r3, #120]	; 0x78
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <ucg_Init>:
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f7ff ffce 	bl	8005f6c <ucg_init_struct>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d103      	bne.n	8005fde <ucg_Init+0x22>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4a0e      	ldr	r2, [pc, #56]	; (8006014 <ucg_Init+0x58>)
 8005fda:	60da      	str	r2, [r3, #12]
 8005fdc:	e002      	b.n	8005fe4 <ucg_Init+0x28>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	60da      	str	r2, [r3, #12]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	609a      	str	r2, [r3, #8]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	61da      	str	r2, [r3, #28]
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f7ff ff85 	bl	8005f00 <ucg_SetFontPosBaseline>
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7ff fa60 	bl	80054bc <ucg_PowerUp>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	82fb      	strh	r3, [r7, #22]
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7ff faa0 	bl	8005546 <ucg_GetDimension>
 8006006:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	08005121 	.word	0x08005121

08006018 <ucg_Draw90Line>:
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	4608      	mov	r0, r1
 8006022:	4611      	mov	r1, r2
 8006024:	461a      	mov	r2, r3
 8006026:	4603      	mov	r3, r0
 8006028:	817b      	strh	r3, [r7, #10]
 800602a:	460b      	mov	r3, r1
 800602c:	813b      	strh	r3, [r7, #8]
 800602e:	4613      	mov	r3, r2
 8006030:	80fb      	strh	r3, [r7, #6]
 8006032:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8006036:	68f9      	ldr	r1, [r7, #12]
 8006038:	4613      	mov	r3, r2
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	4413      	add	r3, r2
 800603e:	440b      	add	r3, r1
 8006040:	333a      	adds	r3, #58	; 0x3a
 8006042:	781a      	ldrb	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800604a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800604e:	68f9      	ldr	r1, [r7, #12]
 8006050:	4613      	mov	r3, r2
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	4413      	add	r3, r2
 8006056:	440b      	add	r3, r1
 8006058:	333b      	adds	r3, #59	; 0x3b
 800605a:	781a      	ldrb	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8006062:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	4613      	mov	r3, r2
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	4413      	add	r3, r2
 800606e:	440b      	add	r3, r1
 8006070:	333c      	adds	r3, #60	; 0x3c
 8006072:	781a      	ldrb	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	897a      	ldrh	r2, [r7, #10]
 800607e:	849a      	strh	r2, [r3, #36]	; 0x24
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	893a      	ldrh	r2, [r7, #8]
 8006084:	84da      	strh	r2, [r3, #38]	; 0x26
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	88fa      	ldrh	r2, [r7, #6]
 800608a:	859a      	strh	r2, [r3, #44]	; 0x2c
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8b3a      	ldrh	r2, [r7, #24]
 8006090:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f7ff fa77 	bl	8005586 <ucg_DrawL90FXWithArg>
 8006098:	bf00      	nop
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <ucg_DrawHLine>:
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	4608      	mov	r0, r1
 80060aa:	4611      	mov	r1, r2
 80060ac:	461a      	mov	r2, r3
 80060ae:	4603      	mov	r3, r0
 80060b0:	817b      	strh	r3, [r7, #10]
 80060b2:	460b      	mov	r3, r1
 80060b4:	813b      	strh	r3, [r7, #8]
 80060b6:	4613      	mov	r3, r2
 80060b8:	80fb      	strh	r3, [r7, #6]
 80060ba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80060be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80060c2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80060c6:	2300      	movs	r3, #0
 80060c8:	9301      	str	r3, [sp, #4]
 80060ca:	2300      	movs	r3, #0
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	4603      	mov	r3, r0
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7ff ffa1 	bl	8006018 <ucg_Draw90Line>
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <ucg_SetColor>:
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	4608      	mov	r0, r1
 80060e8:	4611      	mov	r1, r2
 80060ea:	461a      	mov	r2, r3
 80060ec:	4603      	mov	r3, r0
 80060ee:	70fb      	strb	r3, [r7, #3]
 80060f0:	460b      	mov	r3, r1
 80060f2:	70bb      	strb	r3, [r7, #2]
 80060f4:	4613      	mov	r3, r2
 80060f6:	707b      	strb	r3, [r7, #1]
 80060f8:	78fa      	ldrb	r2, [r7, #3]
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	4613      	mov	r3, r2
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	4413      	add	r3, r2
 8006102:	440b      	add	r3, r1
 8006104:	333a      	adds	r3, #58	; 0x3a
 8006106:	78ba      	ldrb	r2, [r7, #2]
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	78fa      	ldrb	r2, [r7, #3]
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	4413      	add	r3, r2
 8006114:	440b      	add	r3, r1
 8006116:	333b      	adds	r3, #59	; 0x3b
 8006118:	787a      	ldrb	r2, [r7, #1]
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	78fa      	ldrb	r2, [r7, #3]
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	4613      	mov	r3, r2
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	4413      	add	r3, r2
 8006126:	440b      	add	r3, r1
 8006128:	333c      	adds	r3, #60	; 0x3c
 800612a:	7c3a      	ldrb	r2, [r7, #16]
 800612c:	701a      	strb	r2, [r3, #0]
 800612e:	bf00      	nop
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <ucg_DrawPixel>:
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	460b      	mov	r3, r1
 8006144:	807b      	strh	r3, [r7, #2]
 8006146:	4613      	mov	r3, r2
 8006148:	803b      	strh	r3, [r7, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	887a      	ldrh	r2, [r7, #2]
 8006172:	849a      	strh	r2, [r3, #36]	; 0x24
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	883a      	ldrh	r2, [r7, #0]
 8006178:	84da      	strh	r2, [r3, #38]	; 0x26
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff f9f5 	bl	800556a <ucg_DrawPixelWithArg>
 8006180:	bf00      	nop
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <ucg_UndoRotate>:
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d006      	beq.n	80061a6 <ucg_UndoRotate+0x1e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	609a      	str	r2, [r3, #8]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	611a      	str	r2, [r3, #16]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7ff f9cd 	bl	8005546 <ucg_GetDimension>
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff f9b2 	bl	8005516 <ucg_SetMaxClipRange>
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <ucg_rotate_180_xy>:
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8adb      	ldrh	r3, [r3, #22]
 80061c8:	81fb      	strh	r3, [r7, #14]
 80061ca:	89fa      	ldrh	r2, [r7, #14]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	81fb      	strh	r3, [r7, #14]
 80061da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	81fb      	strh	r3, [r7, #14]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	89fa      	ldrh	r2, [r7, #14]
 80061ea:	805a      	strh	r2, [r3, #2]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	8a9b      	ldrh	r3, [r3, #20]
 80061f0:	81bb      	strh	r3, [r7, #12]
 80061f2:	89ba      	ldrh	r2, [r7, #12]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	b29b      	uxth	r3, r3
 8006200:	81bb      	strh	r3, [r7, #12]
 8006202:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b01      	subs	r3, #1
 800620a:	b29b      	uxth	r3, r3
 800620c:	81bb      	strh	r3, [r7, #12]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	89ba      	ldrh	r2, [r7, #12]
 8006212:	801a      	strh	r2, [r3, #0]
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <ucg_dev_rotate180>:
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	460b      	mov	r3, r1
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	817b      	strh	r3, [r7, #10]
 800622e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006232:	3b0c      	subs	r3, #12
 8006234:	2b0b      	cmp	r3, #11
 8006236:	d866      	bhi.n	8006306 <ucg_dev_rotate180+0xe6>
 8006238:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <ucg_dev_rotate180+0x20>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	0800628f 	.word	0x0800628f
 8006244:	08006307 	.word	0x08006307
 8006248:	08006307 	.word	0x08006307
 800624c:	08006271 	.word	0x08006271
 8006250:	08006307 	.word	0x08006307
 8006254:	08006307 	.word	0x08006307
 8006258:	08006307 	.word	0x08006307
 800625c:	08006307 	.word	0x08006307
 8006260:	080062d7 	.word	0x080062d7
 8006264:	080062d7 	.word	0x080062d7
 8006268:	08006307 	.word	0x08006307
 800626c:	080062d7 	.word	0x080062d7
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	3214      	adds	r2, #20
 8006278:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	4798      	blx	r3
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3314      	adds	r3, #20
 8006286:	6818      	ldr	r0, [r3, #0]
 8006288:	6010      	str	r0, [r2, #0]
 800628a:	2301      	movs	r3, #1
 800628c:	e043      	b.n	8006316 <ucg_dev_rotate180+0xf6>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006294:	b29a      	uxth	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800629c:	b29b      	uxth	r3, r3
 800629e:	4413      	add	r3, r2
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	b21a      	sxth	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	805a      	strh	r2, [r3, #2]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	4413      	add	r3, r2
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	b21a      	sxth	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	801a      	strh	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4619      	mov	r1, r3
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff ff73 	bl	80061ba <ucg_rotate_180_xy>
 80062d4:	e017      	b.n	8006306 <ucg_dev_rotate180+0xe6>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80062dc:	b29b      	uxth	r3, r3
 80062de:	3302      	adds	r3, #2
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	b21a      	sxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	85da      	strh	r2, [r3, #46]	; 0x2e
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	b21a      	sxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	85da      	strh	r2, [r3, #46]	; 0x2e
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3324      	adds	r3, #36	; 0x24
 80062fc:	4619      	mov	r1, r3
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f7ff ff5b 	bl	80061ba <ucg_rotate_180_xy>
 8006304:	bf00      	nop
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	4798      	blx	r3
 8006314:	4603      	mov	r3, r0
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop

08006320 <ucg_SetRotate180>:
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff ff2d 	bl	8006188 <ucg_UndoRotate>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	611a      	str	r2, [r3, #16]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a05      	ldr	r2, [pc, #20]	; (8006350 <ucg_SetRotate180+0x30>)
 800633a:	609a      	str	r2, [r3, #8]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff f902 	bl	8005546 <ucg_GetDimension>
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff f8e7 	bl	8005516 <ucg_SetMaxClipRange>
 8006348:	bf00      	nop
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	08006221 	.word	0x08006221

08006354 <bufInit>:
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	4611      	mov	r1, r2
 8006360:	461a      	mov	r2, r3
 8006362:	460b      	mov	r3, r1
 8006364:	71fb      	strb	r3, [r7, #7]
 8006366:	4613      	mov	r3, r2
 8006368:	80bb      	strh	r3, [r7, #4]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	88ba      	ldrh	r2, [r7, #4]
 800636e:	801a      	strh	r2, [r3, #0]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	79fa      	ldrb	r2, [r7, #7]
 8006374:	711a      	strb	r2, [r3, #4]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	60da      	str	r2, [r3, #12]
 800637c:	68b8      	ldr	r0, [r7, #8]
 800637e:	f000 f836 	bl	80063ee <bufFlush>
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <bufNumItems>:
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	885b      	ldrh	r3, [r3, #2]
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <bufIsFull>:
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	885a      	ldrh	r2, [r3, #2]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	bf2c      	ite	cs
 80063b6:	2301      	movcs	r3, #1
 80063b8:	2300      	movcc	r3, #0
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <bufIsEmpty>:
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	88da      	ldrh	r2, [r3, #6]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	891b      	ldrh	r3, [r3, #8]
 80063d8:	429a      	cmp	r2, r3
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	4618      	mov	r0, r3
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <bufFlush>:
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	80da      	strh	r2, [r3, #6]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	811a      	strh	r2, [r3, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	805a      	strh	r2, [r3, #2]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68d8      	ldr	r0, [r3, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	2100      	movs	r1, #0
 8006414:	f000 f894 	bl	8006540 <memsetl>
 8006418:	bf00      	nop
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <bufEnDat>:
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
 800642a:	b672      	cpsid	i
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]
 8006430:	e021      	b.n	8006476 <bufEnDat+0x56>
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	441a      	add	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	6879      	ldr	r1, [r7, #4]
 800643e:	88c9      	ldrh	r1, [r1, #6]
 8006440:	440b      	add	r3, r1
 8006442:	7812      	ldrb	r2, [r2, #0]
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	88db      	ldrh	r3, [r3, #6]
 800644a:	3301      	adds	r3, #1
 800644c:	b29b      	uxth	r3, r3
 800644e:	b21a      	sxth	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	3b01      	subs	r3, #1
 8006456:	b29b      	uxth	r3, r3
 8006458:	b21b      	sxth	r3, r3
 800645a:	4013      	ands	r3, r2
 800645c:	b21b      	sxth	r3, r3
 800645e:	b29a      	uxth	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	80da      	strh	r2, [r3, #6]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	885b      	ldrh	r3, [r3, #2]
 8006468:	3301      	adds	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	805a      	strh	r2, [r3, #2]
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	3301      	adds	r3, #1
 8006474:	73fb      	strb	r3, [r7, #15]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	791b      	ldrb	r3, [r3, #4]
 800647a:	7bfa      	ldrb	r2, [r7, #15]
 800647c:	429a      	cmp	r2, r3
 800647e:	d3d8      	bcc.n	8006432 <bufEnDat+0x12>
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff ff8e 	bl	80063a2 <bufIsFull>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d011      	beq.n	80064b0 <bufEnDat+0x90>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	891a      	ldrh	r2, [r3, #8]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	791b      	ldrb	r3, [r3, #4]
 8006494:	b29b      	uxth	r3, r3
 8006496:	4413      	add	r3, r2
 8006498:	b29b      	uxth	r3, r3
 800649a:	b21a      	sxth	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	b21b      	sxth	r3, r3
 80064a6:	4013      	ands	r3, r2
 80064a8:	b21b      	sxth	r3, r3
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	811a      	strh	r2, [r3, #8]
 80064b0:	b662      	cpsie	i
 80064b2:	2300      	movs	r3, #0
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <bufDeDat>:
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
 80064c6:	b672      	cpsid	i
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff ff7d 	bl	80063c8 <bufIsEmpty>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <bufDeDat+0x24>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	805a      	strh	r2, [r3, #2]
 80064da:	b662      	cpsie	i
 80064dc:	2302      	movs	r3, #2
 80064de:	e02b      	b.n	8006538 <bufDeDat+0x7c>
 80064e0:	2300      	movs	r3, #0
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	e021      	b.n	800652a <bufDeDat+0x6e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	8912      	ldrh	r2, [r2, #8]
 80064ee:	441a      	add	r2, r3
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	440b      	add	r3, r1
 80064f6:	7812      	ldrb	r2, [r2, #0]
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	891b      	ldrh	r3, [r3, #8]
 80064fe:	3301      	adds	r3, #1
 8006500:	b29b      	uxth	r3, r3
 8006502:	b21a      	sxth	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	3b01      	subs	r3, #1
 800650a:	b29b      	uxth	r3, r3
 800650c:	b21b      	sxth	r3, r3
 800650e:	4013      	ands	r3, r2
 8006510:	b21b      	sxth	r3, r3
 8006512:	b29a      	uxth	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	811a      	strh	r2, [r3, #8]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	885b      	ldrh	r3, [r3, #2]
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	805a      	strh	r2, [r3, #2]
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	3301      	adds	r3, #1
 8006528:	73fb      	strb	r3, [r7, #15]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	791b      	ldrb	r3, [r3, #4]
 800652e:	7bfa      	ldrb	r2, [r7, #15]
 8006530:	429a      	cmp	r2, r3
 8006532:	d3d8      	bcc.n	80064e6 <bufDeDat+0x2a>
 8006534:	b662      	cpsie	i
 8006536:	2300      	movs	r3, #0
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <memsetl>:
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	70fb      	strb	r3, [r7, #3]
 800654c:	4613      	mov	r3, r2
 800654e:	803b      	strh	r3, [r7, #0]
 8006550:	e004      	b.n	800655c <memsetl+0x1c>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	78fa      	ldrb	r2, [r7, #3]
 800655a:	701a      	strb	r2, [r3, #0]
 800655c:	883b      	ldrh	r3, [r7, #0]
 800655e:	1e5a      	subs	r2, r3, #1
 8006560:	803a      	strh	r2, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f5      	bne.n	8006552 <memsetl+0x12>
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <ucg_clip_is_x_visible>:
 8006572:	b480      	push	{r7}
 8006574:	b085      	sub	sp, #20
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800657e:	81fb      	strh	r3, [r7, #14]
 8006580:	89fa      	ldrh	r2, [r7, #14]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8006588:	b29b      	uxth	r3, r3
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	b29b      	uxth	r3, r3
 800658e:	81fb      	strh	r3, [r7, #14]
 8006590:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006594:	2b00      	cmp	r3, #0
 8006596:	da01      	bge.n	800659c <ucg_clip_is_x_visible+0x2a>
 8006598:	2300      	movs	r3, #0
 800659a:	e009      	b.n	80065b0 <ucg_clip_is_x_visible+0x3e>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80065a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	db01      	blt.n	80065ae <ucg_clip_is_x_visible+0x3c>
 80065aa:	2300      	movs	r3, #0
 80065ac:	e000      	b.n	80065b0 <ucg_clip_is_x_visible+0x3e>
 80065ae:	2301      	movs	r3, #1
 80065b0:	4618      	mov	r0, r3
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <ucg_clip_is_y_visible>:
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065c8:	81fb      	strh	r3, [r7, #14]
 80065ca:	89fa      	ldrh	r2, [r7, #14]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	81fb      	strh	r3, [r7, #14]
 80065da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	da01      	bge.n	80065e6 <ucg_clip_is_y_visible+0x2a>
 80065e2:	2300      	movs	r3, #0
 80065e4:	e009      	b.n	80065fa <ucg_clip_is_y_visible+0x3e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80065ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	db01      	blt.n	80065f8 <ucg_clip_is_y_visible+0x3c>
 80065f4:	2300      	movs	r3, #0
 80065f6:	e000      	b.n	80065fa <ucg_clip_is_y_visible+0x3e>
 80065f8:	2301      	movs	r3, #1
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <ucg_clip_intersection>:
 8006606:	b480      	push	{r7}
 8006608:	b087      	sub	sp, #28
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	4611      	mov	r1, r2
 8006612:	461a      	mov	r2, r3
 8006614:	460b      	mov	r3, r1
 8006616:	80fb      	strh	r3, [r7, #6]
 8006618:	4613      	mov	r3, r2
 800661a:	80bb      	strh	r3, [r7, #4]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	82fb      	strh	r3, [r7, #22]
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	82bb      	strh	r3, [r7, #20]
 8006628:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800662c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006630:	429a      	cmp	r2, r3
 8006632:	db01      	blt.n	8006638 <ucg_clip_intersection+0x32>
 8006634:	2300      	movs	r3, #0
 8006636:	e01a      	b.n	800666e <ucg_clip_intersection+0x68>
 8006638:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800663c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006640:	429a      	cmp	r2, r3
 8006642:	dc01      	bgt.n	8006648 <ucg_clip_intersection+0x42>
 8006644:	2300      	movs	r3, #0
 8006646:	e012      	b.n	800666e <ucg_clip_intersection+0x68>
 8006648:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800664c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006650:	429a      	cmp	r2, r3
 8006652:	da02      	bge.n	800665a <ucg_clip_intersection+0x54>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	88fa      	ldrh	r2, [r7, #6]
 8006658:	801a      	strh	r2, [r3, #0]
 800665a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800665e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006662:	429a      	cmp	r2, r3
 8006664:	dd02      	ble.n	800666c <ucg_clip_intersection+0x66>
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	88ba      	ldrh	r2, [r7, #4]
 800666a:	801a      	strh	r2, [r3, #0]
 800666c:	2301      	movs	r3, #1
 800666e:	4618      	mov	r0, r3
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <ucg_clip_is_pixel_visible>:
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff ff75 	bl	8006572 <ucg_clip_is_x_visible>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <ucg_clip_is_pixel_visible+0x18>
 800668e:	2300      	movs	r3, #0
 8006690:	e008      	b.n	80066a4 <ucg_clip_is_pixel_visible+0x2a>
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff ff92 	bl	80065bc <ucg_clip_is_y_visible>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <ucg_clip_is_pixel_visible+0x28>
 800669e:	2300      	movs	r3, #0
 80066a0:	e000      	b.n	80066a4 <ucg_clip_is_pixel_visible+0x2a>
 80066a2:	2301      	movs	r3, #1
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <ucg_clip_l90fx>:
 80066ac:	b590      	push	{r4, r7, lr}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	861a      	strh	r2, [r3, #48]	; 0x30
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	f200 816d 	bhi.w	80069a0 <ucg_clip_l90fx+0x2f4>
 80066c6:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <ucg_clip_l90fx+0x20>)
 80066c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066cc:	080066dd 	.word	0x080066dd
 80066d0:	08006783 	.word	0x08006783
 80066d4:	08006829 	.word	0x08006829
 80066d8:	080068e5 	.word	0x080068e5
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7ff ff6d 	bl	80065bc <ucg_clip_is_y_visible>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <ucg_clip_l90fx+0x40>
 80066e8:	2300      	movs	r3, #0
 80066ea:	e15a      	b.n	80069a2 <ucg_clip_l90fx+0x2f6>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80066f2:	81fb      	strh	r3, [r7, #14]
 80066f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80066f8:	81bb      	strh	r3, [r7, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8006700:	b29a      	uxth	r2, r3
 8006702:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006706:	b29b      	uxth	r3, r3
 8006708:	4413      	add	r3, r2
 800670a:	b29b      	uxth	r3, r3
 800670c:	b21b      	sxth	r3, r3
 800670e:	81bb      	strh	r3, [r7, #12]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800671c:	b29a      	uxth	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8006724:	b29b      	uxth	r3, r3
 8006726:	4413      	add	r3, r2
 8006728:	b29b      	uxth	r3, r3
 800672a:	b21b      	sxth	r3, r3
 800672c:	f107 010c 	add.w	r1, r7, #12
 8006730:	f107 000e 	add.w	r0, r7, #14
 8006734:	4622      	mov	r2, r4
 8006736:	f7ff ff66 	bl	8006606 <ucg_clip_intersection>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <ucg_clip_l90fx+0x98>
 8006740:	2300      	movs	r3, #0
 8006742:	e12e      	b.n	80069a2 <ucg_clip_l90fx+0x2f6>
 8006744:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006748:	b29a      	uxth	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8006750:	b29b      	uxth	r3, r3
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	b29b      	uxth	r3, r3
 8006756:	b21a      	sxth	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	861a      	strh	r2, [r3, #48]	; 0x30
 800675c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	849a      	strh	r2, [r3, #36]	; 0x24
 8006764:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006768:	b29a      	uxth	r2, r3
 800676a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800676e:	b29b      	uxth	r3, r3
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	b29b      	uxth	r3, r3
 8006774:	b21b      	sxth	r3, r3
 8006776:	81bb      	strh	r3, [r7, #12]
 8006778:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8006780:	e10e      	b.n	80069a0 <ucg_clip_l90fx+0x2f4>
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff fef5 	bl	8006572 <ucg_clip_is_x_visible>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <ucg_clip_l90fx+0xe6>
 800678e:	2300      	movs	r3, #0
 8006790:	e107      	b.n	80069a2 <ucg_clip_l90fx+0x2f6>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8006798:	81fb      	strh	r3, [r7, #14]
 800679a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800679e:	81bb      	strh	r3, [r7, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	4413      	add	r3, r2
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	b21b      	sxth	r3, r3
 80067b4:	81bb      	strh	r3, [r7, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	4413      	add	r3, r2
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	b21b      	sxth	r3, r3
 80067d2:	f107 010c 	add.w	r1, r7, #12
 80067d6:	f107 000e 	add.w	r0, r7, #14
 80067da:	4622      	mov	r2, r4
 80067dc:	f7ff ff13 	bl	8006606 <ucg_clip_intersection>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <ucg_clip_l90fx+0x13e>
 80067e6:	2300      	movs	r3, #0
 80067e8:	e0db      	b.n	80069a2 <ucg_clip_l90fx+0x2f6>
 80067ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	b21a      	sxth	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	861a      	strh	r2, [r3, #48]	; 0x30
 8006802:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	84da      	strh	r2, [r3, #38]	; 0x26
 800680a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800680e:	b29a      	uxth	r2, r3
 8006810:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006814:	b29b      	uxth	r3, r3
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	b29b      	uxth	r3, r3
 800681a:	b21b      	sxth	r3, r3
 800681c:	81bb      	strh	r3, [r7, #12]
 800681e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	859a      	strh	r2, [r3, #44]	; 0x2c
 8006826:	e0bb      	b.n	80069a0 <ucg_clip_l90fx+0x2f4>
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7ff fec7 	bl	80065bc <ucg_clip_is_y_visible>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <ucg_clip_l90fx+0x18c>
 8006834:	2300      	movs	r3, #0
 8006836:	e0b4      	b.n	80069a2 <ucg_clip_l90fx+0x2f6>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800683e:	81bb      	strh	r3, [r7, #12]
 8006840:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006844:	b29b      	uxth	r3, r3
 8006846:	3301      	adds	r3, #1
 8006848:	b29b      	uxth	r3, r3
 800684a:	b21b      	sxth	r3, r3
 800684c:	81bb      	strh	r3, [r7, #12]
 800684e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006852:	81fb      	strh	r3, [r7, #14]
 8006854:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006858:	b29a      	uxth	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8006860:	b29b      	uxth	r3, r3
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	b29b      	uxth	r3, r3
 8006866:	b21b      	sxth	r3, r3
 8006868:	81fb      	strh	r3, [r7, #14]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8006876:	b29a      	uxth	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800687e:	b29b      	uxth	r3, r3
 8006880:	4413      	add	r3, r2
 8006882:	b29b      	uxth	r3, r3
 8006884:	b21b      	sxth	r3, r3
 8006886:	f107 010c 	add.w	r1, r7, #12
 800688a:	f107 000e 	add.w	r0, r7, #14
 800688e:	4622      	mov	r2, r4
 8006890:	f7ff feb9 	bl	8006606 <ucg_clip_intersection>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <ucg_clip_l90fx+0x1f2>
 800689a:	2300      	movs	r3, #0
 800689c:	e081      	b.n	80069a2 <ucg_clip_l90fx+0x2f6>
 800689e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	b21a      	sxth	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	859a      	strh	r2, [r3, #44]	; 0x2c
 80068b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	3b01      	subs	r3, #1
 80068bc:	b29b      	uxth	r3, r3
 80068be:	b21b      	sxth	r3, r3
 80068c0:	81bb      	strh	r3, [r7, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	b21a      	sxth	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	861a      	strh	r2, [r3, #48]	; 0x30
 80068da:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	849a      	strh	r2, [r3, #36]	; 0x24
 80068e2:	e05d      	b.n	80069a0 <ucg_clip_l90fx+0x2f4>
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff fe44 	bl	8006572 <ucg_clip_is_x_visible>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <ucg_clip_l90fx+0x248>
 80068f0:	2300      	movs	r3, #0
 80068f2:	e056      	b.n	80069a2 <ucg_clip_l90fx+0x2f6>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80068fa:	81bb      	strh	r3, [r7, #12]
 80068fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006900:	b29b      	uxth	r3, r3
 8006902:	3301      	adds	r3, #1
 8006904:	b29b      	uxth	r3, r3
 8006906:	b21b      	sxth	r3, r3
 8006908:	81bb      	strh	r3, [r7, #12]
 800690a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800690e:	81fb      	strh	r3, [r7, #14]
 8006910:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006914:	b29a      	uxth	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800691c:	b29b      	uxth	r3, r3
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	b29b      	uxth	r3, r3
 8006922:	b21b      	sxth	r3, r3
 8006924:	81fb      	strh	r3, [r7, #14]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8006932:	b29a      	uxth	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 800693a:	b29b      	uxth	r3, r3
 800693c:	4413      	add	r3, r2
 800693e:	b29b      	uxth	r3, r3
 8006940:	b21b      	sxth	r3, r3
 8006942:	f107 010c 	add.w	r1, r7, #12
 8006946:	f107 000e 	add.w	r0, r7, #14
 800694a:	4622      	mov	r2, r4
 800694c:	f7ff fe5b 	bl	8006606 <ucg_clip_intersection>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <ucg_clip_l90fx+0x2ae>
 8006956:	2300      	movs	r3, #0
 8006958:	e023      	b.n	80069a2 <ucg_clip_l90fx+0x2f6>
 800695a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800695e:	b29a      	uxth	r2, r3
 8006960:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006964:	b29b      	uxth	r3, r3
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	b29b      	uxth	r3, r3
 800696a:	b21a      	sxth	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8006970:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29b      	uxth	r3, r3
 800697a:	b21b      	sxth	r3, r3
 800697c:	81bb      	strh	r3, [r7, #12]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8006984:	b29a      	uxth	r2, r3
 8006986:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800698a:	b29b      	uxth	r3, r3
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	b29b      	uxth	r3, r3
 8006990:	b21a      	sxth	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	861a      	strh	r2, [r3, #48]	; 0x30
 8006996:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	84da      	strh	r2, [r3, #38]	; 0x26
 800699e:	bf00      	nop
 80069a0:	2301      	movs	r3, #1
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd90      	pop	{r4, r7, pc}
 80069aa:	bf00      	nop

080069ac <ucg_clip_l90se>:
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff fe79 	bl	80066ac <ucg_clip_l90fx>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <ucg_clip_l90se+0x18>
 80069c0:	2300      	movs	r3, #0
 80069c2:	e019      	b.n	80069f8 <ucg_clip_l90se+0x4c>
 80069c4:	2300      	movs	r3, #0
 80069c6:	73fb      	strb	r3, [r7, #15]
 80069c8:	e012      	b.n	80069f0 <ucg_clip_l90se+0x44>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f103 0146 	add.w	r1, r3, #70	; 0x46
 80069d0:	7bfa      	ldrb	r2, [r7, #15]
 80069d2:	4613      	mov	r3, r2
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	18ca      	adds	r2, r1, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80069e2:	4619      	mov	r1, r3
 80069e4:	4610      	mov	r0, r2
 80069e6:	f7fe fb14 	bl	8005012 <ucg_ccs_seek>
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	3301      	adds	r3, #1
 80069ee:	73fb      	strb	r3, [r7, #15]
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d9e9      	bls.n	80069ca <ucg_clip_l90se+0x1e>
 80069f6:	2301      	movs	r3, #1
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <ucg_com_PowerDown>:
 8006a00:	b590      	push	{r4, r7, lr}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d006      	beq.n	8006a24 <ucg_com_PowerDown+0x24>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	69dc      	ldr	r4, [r3, #28]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	210b      	movs	r1, #11
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	47a0      	blx	r4
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8006a2a:	f023 0308 	bic.w	r3, r3, #8
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd90      	pop	{r4, r7, pc}

08006a3e <ucg_com_PowerUp>:
 8006a3e:	b590      	push	{r4, r7, lr}
 8006a40:	b085      	sub	sp, #20
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	460b      	mov	r3, r1
 8006a48:	807b      	strh	r3, [r7, #2]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	803b      	strh	r3, [r7, #0]
 8006a4e:	887b      	ldrh	r3, [r7, #2]
 8006a50:	813b      	strh	r3, [r7, #8]
 8006a52:	883b      	ldrh	r3, [r7, #0]
 8006a54:	817b      	strh	r3, [r7, #10]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff ffd2 	bl	8006a00 <ucg_com_PowerDown>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	69dc      	ldr	r4, [r3, #28]
 8006a68:	f107 0308 	add.w	r3, r7, #8
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	210a      	movs	r1, #10
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	47a0      	blx	r4
 8006a74:	4603      	mov	r3, r0
 8006a76:	81fb      	strh	r3, [r7, #14]
 8006a78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d008      	beq.n	8006a92 <ucg_com_PowerUp+0x54>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8006a86:	f043 0308 	orr.w	r3, r3, #8
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8006a92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd90      	pop	{r4, r7, pc}

08006a9e <ucg_com_SetLineStatus>:
 8006a9e:	b590      	push	{r4, r7, lr}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	4608      	mov	r0, r1
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	461a      	mov	r2, r3
 8006aac:	4603      	mov	r3, r0
 8006aae:	70fb      	strb	r3, [r7, #3]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	70bb      	strb	r3, [r7, #2]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	707b      	strb	r3, [r7, #1]
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d131      	bne.n	8006b22 <ucg_com_SetLineStatus+0x84>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8006ac4:	78bb      	ldrb	r3, [r7, #2]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d008      	beq.n	8006ae0 <ucg_com_SetLineStatus+0x42>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8006ad4:	78bb      	ldrb	r3, [r7, #2]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	78ba      	ldrb	r2, [r7, #2]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d14b      	bne.n	8006b78 <ucg_com_SetLineStatus+0xda>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69dc      	ldr	r4, [r3, #28]
 8006ae4:	787b      	ldrb	r3, [r7, #1]
 8006ae6:	b219      	sxth	r1, r3
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	2300      	movs	r3, #0
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	47a0      	blx	r4
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8006af8:	b25a      	sxtb	r2, r3
 8006afa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006afe:	43db      	mvns	r3, r3
 8006b00:	b25b      	sxtb	r3, r3
 8006b02:	4013      	ands	r3, r2
 8006b04:	b25b      	sxtb	r3, r3
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8006b14:	78bb      	ldrb	r3, [r7, #2]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8006b20:	e02a      	b.n	8006b78 <ucg_com_SetLineStatus+0xda>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8006b28:	78bb      	ldrb	r3, [r7, #2]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <ucg_com_SetLineStatus+0xa4>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8006b38:	78bb      	ldrb	r3, [r7, #2]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d11a      	bne.n	8006b78 <ucg_com_SetLineStatus+0xda>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69dc      	ldr	r4, [r3, #28]
 8006b46:	787b      	ldrb	r3, [r7, #1]
 8006b48:	b219      	sxth	r1, r3
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	2300      	movs	r3, #0
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	47a0      	blx	r4
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8006b5a:	78bb      	ldrb	r3, [r7, #2]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8006b6c:	78bb      	ldrb	r3, [r7, #2]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd90      	pop	{r4, r7, pc}

08006b80 <ucg_com_SetResetLineStatus>:
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	70fb      	strb	r3, [r7, #3]
 8006b8c:	78f9      	ldrb	r1, [r7, #3]
 8006b8e:	230d      	movs	r3, #13
 8006b90:	2204      	movs	r2, #4
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7ff ff83 	bl	8006a9e <ucg_com_SetLineStatus>
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <ucg_com_SetCSLineStatus>:
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
 8006bac:	78f9      	ldrb	r1, [r7, #3]
 8006bae:	230e      	movs	r3, #14
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff ff73 	bl	8006a9e <ucg_com_SetLineStatus>
 8006bb8:	bf00      	nop
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <ucg_com_SetCDLineStatus>:
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	70fb      	strb	r3, [r7, #3]
 8006bcc:	78f9      	ldrb	r1, [r7, #3]
 8006bce:	230f      	movs	r3, #15
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff ff63 	bl	8006a9e <ucg_com_SetLineStatus>
 8006bd8:	bf00      	nop
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <ucg_com_DelayMicroseconds>:
 8006be0:	b590      	push	{r4, r7, lr}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	807b      	strh	r3, [r7, #2]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69dc      	ldr	r4, [r3, #28]
 8006bf0:	887a      	ldrh	r2, [r7, #2]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	210c      	movs	r1, #12
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	47a0      	blx	r4
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd90      	pop	{r4, r7, pc}

08006c02 <ucg_com_DelayMilliseconds>:
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	807b      	strh	r3, [r7, #2]
 8006c0e:	e007      	b.n	8006c20 <ucg_com_DelayMilliseconds+0x1e>
 8006c10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff ffe3 	bl	8006be0 <ucg_com_DelayMicroseconds>
 8006c1a:	887b      	ldrh	r3, [r7, #2]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	807b      	strh	r3, [r7, #2]
 8006c20:	887b      	ldrh	r3, [r7, #2]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1f4      	bne.n	8006c10 <ucg_com_DelayMilliseconds+0xe>
 8006c26:	bf00      	nop
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <ucg_com_SendByte>:
 8006c2e:	b590      	push	{r4, r7, lr}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	69dc      	ldr	r4, [r3, #28]
 8006c3e:	78fb      	ldrb	r3, [r7, #3]
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	2300      	movs	r3, #0
 8006c44:	2110      	movs	r1, #16
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	47a0      	blx	r4
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd90      	pop	{r4, r7, pc}

08006c52 <ucg_com_SendStringP>:
 8006c52:	b590      	push	{r4, r7, lr}
 8006c54:	b087      	sub	sp, #28
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	607a      	str	r2, [r7, #4]
 8006c5e:	817b      	strh	r3, [r7, #10]
 8006c60:	e010      	b.n	8006c84 <ucg_com_SendStringP+0x32>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	75fb      	strb	r3, [r7, #23]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	69dc      	ldr	r4, [r3, #28]
 8006c6c:	7dfb      	ldrb	r3, [r7, #23]
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	2300      	movs	r3, #0
 8006c72:	2110      	movs	r1, #16
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	47a0      	blx	r4
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	607b      	str	r3, [r7, #4]
 8006c7e:	897b      	ldrh	r3, [r7, #10]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	817b      	strh	r3, [r7, #10]
 8006c84:	897b      	ldrh	r3, [r7, #10]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1eb      	bne.n	8006c62 <ucg_com_SendStringP+0x10>
 8006c8a:	bf00      	nop
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd90      	pop	{r4, r7, pc}

08006c92 <ucg_com_SendCmdArg>:
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	71fb      	strb	r3, [r7, #7]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	71bb      	strb	r3, [r7, #6]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006cae:	085b      	lsrs	r3, r3, #1
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	4619      	mov	r1, r3
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f7ff ff80 	bl	8006bc0 <ucg_com_SetCDLineStatus>
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f7ff ffc2 	bl	8006c52 <ucg_com_SendStringP>
 8006cce:	79bb      	ldrb	r3, [r7, #6]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d014      	beq.n	8006cfe <ucg_com_SendCmdArg+0x6c>
 8006cd4:	79fb      	ldrb	r3, [r7, #7]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	4413      	add	r3, r2
 8006cda:	60bb      	str	r3, [r7, #8]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	4619      	mov	r1, r3
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f7ff ff68 	bl	8006bc0 <ucg_com_SetCDLineStatus>
 8006cf0:	79bb      	ldrb	r3, [r7, #6]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f7ff ffaa 	bl	8006c52 <ucg_com_SendStringP>
 8006cfe:	bf00      	nop
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <ucg_com_SendCmdSeq>:
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	73fb      	strb	r3, [r7, #15]
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	091b      	lsrs	r3, r3, #4
 8006d1c:	73bb      	strb	r3, [r7, #14]
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	737b      	strb	r3, [r7, #13]
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	2b0f      	cmp	r3, #15
 8006d2a:	f200 8124 	bhi.w	8006f76 <ucg_com_SendCmdSeq+0x26e>
 8006d2e:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <ucg_com_SendCmdSeq+0x2c>)
 8006d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d34:	08006f77 	.word	0x08006f77
 8006d38:	08006d75 	.word	0x08006d75
 8006d3c:	08006d75 	.word	0x08006d75
 8006d40:	08006d75 	.word	0x08006d75
 8006d44:	08006f77 	.word	0x08006f77
 8006d48:	08006f77 	.word	0x08006f77
 8006d4c:	08006d95 	.word	0x08006d95
 8006d50:	08006dc7 	.word	0x08006dc7
 8006d54:	08006e0b 	.word	0x08006e0b
 8006d58:	08006e37 	.word	0x08006e37
 8006d5c:	08006e63 	.word	0x08006e63
 8006d60:	08006ec3 	.word	0x08006ec3
 8006d64:	08006f77 	.word	0x08006f77
 8006d68:	08006f77 	.word	0x08006f77
 8006d6c:	08006f77 	.word	0x08006f77
 8006d70:	08006f23 	.word	0x08006f23
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	1c59      	adds	r1, r3, #1
 8006d78:	7b7b      	ldrb	r3, [r7, #13]
 8006d7a:	7bba      	ldrb	r2, [r7, #14]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7ff ff88 	bl	8006c92 <ucg_com_SendCmdArg>
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	7b7b      	ldrb	r3, [r7, #13]
 8006d88:	4413      	add	r3, r2
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	4413      	add	r3, r2
 8006d90:	603b      	str	r3, [r7, #0]
 8006d92:	e0ef      	b.n	8006f74 <ucg_com_SendCmdSeq+0x26c>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7ff ff0c 	bl	8006bc0 <ucg_com_SetCDLineStatus>
 8006da8:	7b7b      	ldrb	r3, [r7, #13]
 8006daa:	b299      	uxth	r1, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	3301      	adds	r3, #1
 8006db0:	461a      	mov	r2, r3
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7ff ff4d 	bl	8006c52 <ucg_com_SendStringP>
 8006db8:	7b7b      	ldrb	r3, [r7, #13]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	e0d6      	b.n	8006f74 <ucg_com_SendCmdSeq+0x26c>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006dcc:	085b      	lsrs	r3, r3, #1
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bf0c      	ite	eq
 8006dd8:	2301      	moveq	r3, #1
 8006dda:	2300      	movne	r3, #0
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff feed 	bl	8006bc0 <ucg_com_SetCDLineStatus>
 8006de6:	7b7b      	ldrb	r3, [r7, #13]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d007      	beq.n	8006dfc <ucg_com_SendCmdSeq+0xf4>
 8006dec:	7b7b      	ldrb	r3, [r7, #13]
 8006dee:	b299      	uxth	r1, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	3301      	adds	r3, #1
 8006df4:	461a      	mov	r2, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff ff2b 	bl	8006c52 <ucg_com_SendStringP>
 8006dfc:	7b7b      	ldrb	r3, [r7, #13]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	461a      	mov	r2, r3
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	4413      	add	r3, r2
 8006e06:	603b      	str	r3, [r7, #0]
 8006e08:	e0b4      	b.n	8006f74 <ucg_com_SendCmdSeq+0x26c>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	603b      	str	r3, [r7, #0]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	73fb      	strb	r3, [r7, #15]
 8006e16:	7b7b      	ldrb	r3, [r7, #13]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	4413      	add	r3, r2
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7ff feea 	bl	8006c02 <ucg_com_DelayMilliseconds>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	3301      	adds	r3, #1
 8006e32:	603b      	str	r3, [r7, #0]
 8006e34:	e09e      	b.n	8006f74 <ucg_com_SendCmdSeq+0x26c>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	603b      	str	r3, [r7, #0]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	73fb      	strb	r3, [r7, #15]
 8006e42:	7b7b      	ldrb	r3, [r7, #13]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	021b      	lsls	r3, r3, #8
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	4413      	add	r3, r2
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff fec3 	bl	8006be0 <ucg_com_DelayMicroseconds>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	603b      	str	r3, [r7, #0]
 8006e60:	e088      	b.n	8006f74 <ucg_com_SendCmdSeq+0x26c>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	73fb      	strb	r3, [r7, #15]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	3301      	adds	r3, #1
 8006e72:	603b      	str	r3, [r7, #0]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	733b      	strb	r3, [r7, #12]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	603b      	str	r3, [r7, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7ff fe96 	bl	8006bc0 <ucg_com_SetCDLineStatus>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8006ea2:	441a      	add	r2, r3
 8006ea4:	7b7b      	ldrb	r3, [r7, #13]
 8006ea6:	fa42 f303 	asr.w	r3, r2, r3
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	7b3b      	ldrb	r3, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff feb7 	bl	8006c2e <ucg_com_SendByte>
 8006ec0:	e058      	b.n	8006f74 <ucg_com_SendCmdSeq+0x26c>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	73fb      	strb	r3, [r7, #15]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	733b      	strb	r3, [r7, #12]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	3301      	adds	r3, #1
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff fe66 	bl	8006bc0 <ucg_com_SetCDLineStatus>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8006efa:	461a      	mov	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8006f02:	441a      	add	r2, r3
 8006f04:	7b7b      	ldrb	r3, [r7, #13]
 8006f06:	fa42 f303 	asr.w	r3, r2, r3
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	7b3b      	ldrb	r3, [r7, #12]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fe87 	bl	8006c2e <ucg_com_SendByte>
 8006f20:	e028      	b.n	8006f74 <ucg_com_SendCmdSeq+0x26c>
 8006f22:	7b7b      	ldrb	r3, [r7, #13]
 8006f24:	089b      	lsrs	r3, r3, #2
 8006f26:	73bb      	strb	r3, [r7, #14]
 8006f28:	7b7b      	ldrb	r3, [r7, #13]
 8006f2a:	f003 0303 	and.w	r3, r3, #3
 8006f2e:	737b      	strb	r3, [r7, #13]
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d00c      	beq.n	8006f50 <ucg_com_SendCmdSeq+0x248>
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d013      	beq.n	8006f62 <ucg_com_SendCmdSeq+0x25a>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d116      	bne.n	8006f6c <ucg_com_SendCmdSeq+0x264>
 8006f3e:	7b7b      	ldrb	r3, [r7, #13]
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff fe19 	bl	8006b80 <ucg_com_SetResetLineStatus>
 8006f4e:	e00d      	b.n	8006f6c <ucg_com_SendCmdSeq+0x264>
 8006f50:	7b7b      	ldrb	r3, [r7, #13]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff fe20 	bl	8006ba0 <ucg_com_SetCSLineStatus>
 8006f60:	e004      	b.n	8006f6c <ucg_com_SendCmdSeq+0x264>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	7b7a      	ldrb	r2, [r7, #13]
 8006f66:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8006f6a:	bf00      	nop
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	603b      	str	r3, [r7, #0]
 8006f72:	bf00      	nop
 8006f74:	e6cd      	b.n	8006d12 <ucg_com_SendCmdSeq+0xa>
 8006f76:	bf00      	nop
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop

08006f80 <__libc_init_array>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	4d0d      	ldr	r5, [pc, #52]	; (8006fb8 <__libc_init_array+0x38>)
 8006f84:	4c0d      	ldr	r4, [pc, #52]	; (8006fbc <__libc_init_array+0x3c>)
 8006f86:	1b64      	subs	r4, r4, r5
 8006f88:	10a4      	asrs	r4, r4, #2
 8006f8a:	2600      	movs	r6, #0
 8006f8c:	42a6      	cmp	r6, r4
 8006f8e:	d109      	bne.n	8006fa4 <__libc_init_array+0x24>
 8006f90:	4d0b      	ldr	r5, [pc, #44]	; (8006fc0 <__libc_init_array+0x40>)
 8006f92:	4c0c      	ldr	r4, [pc, #48]	; (8006fc4 <__libc_init_array+0x44>)
 8006f94:	f000 f846 	bl	8007024 <_init>
 8006f98:	1b64      	subs	r4, r4, r5
 8006f9a:	10a4      	asrs	r4, r4, #2
 8006f9c:	2600      	movs	r6, #0
 8006f9e:	42a6      	cmp	r6, r4
 8006fa0:	d105      	bne.n	8006fae <__libc_init_array+0x2e>
 8006fa2:	bd70      	pop	{r4, r5, r6, pc}
 8006fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa8:	4798      	blx	r3
 8006faa:	3601      	adds	r6, #1
 8006fac:	e7ee      	b.n	8006f8c <__libc_init_array+0xc>
 8006fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb2:	4798      	blx	r3
 8006fb4:	3601      	adds	r6, #1
 8006fb6:	e7f2      	b.n	8006f9e <__libc_init_array+0x1e>
 8006fb8:	0800a3dc 	.word	0x0800a3dc
 8006fbc:	0800a3dc 	.word	0x0800a3dc
 8006fc0:	0800a3dc 	.word	0x0800a3dc
 8006fc4:	0800a3e0 	.word	0x0800a3e0

08006fc8 <memcpy>:
 8006fc8:	440a      	add	r2, r1
 8006fca:	4291      	cmp	r1, r2
 8006fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fd0:	d100      	bne.n	8006fd4 <memcpy+0xc>
 8006fd2:	4770      	bx	lr
 8006fd4:	b510      	push	{r4, lr}
 8006fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fde:	4291      	cmp	r1, r2
 8006fe0:	d1f9      	bne.n	8006fd6 <memcpy+0xe>
 8006fe2:	bd10      	pop	{r4, pc}

08006fe4 <memset>:
 8006fe4:	4402      	add	r2, r0
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d100      	bne.n	8006fee <memset+0xa>
 8006fec:	4770      	bx	lr
 8006fee:	f803 1b01 	strb.w	r1, [r3], #1
 8006ff2:	e7f9      	b.n	8006fe8 <memset+0x4>

08006ff4 <strcat>:
 8006ff4:	b510      	push	{r4, lr}
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	7814      	ldrb	r4, [r2, #0]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	3201      	adds	r2, #1
 8006ffe:	2c00      	cmp	r4, #0
 8007000:	d1fa      	bne.n	8006ff8 <strcat+0x4>
 8007002:	3b01      	subs	r3, #1
 8007004:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007008:	f803 2f01 	strb.w	r2, [r3, #1]!
 800700c:	2a00      	cmp	r2, #0
 800700e:	d1f9      	bne.n	8007004 <strcat+0x10>
 8007010:	bd10      	pop	{r4, pc}

08007012 <strcpy>:
 8007012:	4603      	mov	r3, r0
 8007014:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007018:	f803 2b01 	strb.w	r2, [r3], #1
 800701c:	2a00      	cmp	r2, #0
 800701e:	d1f9      	bne.n	8007014 <strcpy+0x2>
 8007020:	4770      	bx	lr
	...

08007024 <_init>:
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007026:	bf00      	nop
 8007028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702a:	bc08      	pop	{r3}
 800702c:	469e      	mov	lr, r3
 800702e:	4770      	bx	lr

08007030 <_fini>:
 8007030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007032:	bf00      	nop
 8007034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007036:	bc08      	pop	{r3}
 8007038:	469e      	mov	lr, r3
 800703a:	4770      	bx	lr
