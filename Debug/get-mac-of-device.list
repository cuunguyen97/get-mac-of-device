
get-mac-of-device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e4c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bd8  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bb8  08007bb8  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08007bb8  08007bb8  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bb8  08007bb8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bb8  08007bb8  00017bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bbc  08007bbc  00017bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08007bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014bc  20000028  08007be8  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014e4  08007be8  000214e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037bf3  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc7  00000000  00000000  00057c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0005a818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0005b3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f6f2  00000000  00000000  0005bdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab58  00000000  00000000  0006b4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00049e68  00000000  00000000  00076022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  000bfe8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e58  00000000  00000000  000bff58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005fc8 	.word	0x08005fc8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	08005fc8 	.word	0x08005fc8

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <max>:
#error Unsupported LOCK_VERSION (add it...)

#endif


static int max(int a, int b) {
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
    if (a > b) { return a; }
 8000202:	687a      	ldr	r2, [r7, #4]
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	429a      	cmp	r2, r3
 8000208:	dd01      	ble.n	800020e <max+0x16>
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	e000      	b.n	8000210 <max+0x18>
    return b;
 800020e:	683b      	ldr	r3, [r7, #0]
}
 8000210:	4618      	mov	r0, r3
 8000212:	370c      	adds	r7, #12
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <getAlphanumeric>:
*/


//#pragma mark - Mode testing and conversion

static int8_t getAlphanumeric(char c) {
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
    
    if (c >= '0' && c <= '9') { return (c - '0'); }
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	2b2f      	cmp	r3, #47	; 0x2f
 800022a:	d907      	bls.n	800023c <getAlphanumeric+0x20>
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	2b39      	cmp	r3, #57	; 0x39
 8000230:	d804      	bhi.n	800023c <getAlphanumeric+0x20>
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	3b30      	subs	r3, #48	; 0x30
 8000236:	b2db      	uxtb	r3, r3
 8000238:	b25b      	sxtb	r3, r3
 800023a:	e05b      	b.n	80002f4 <getAlphanumeric+0xd8>
    if (c >= 'A' && c <= 'Z') { return (c - 'A' + 10); }
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	2b40      	cmp	r3, #64	; 0x40
 8000240:	d907      	bls.n	8000252 <getAlphanumeric+0x36>
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	2b5a      	cmp	r3, #90	; 0x5a
 8000246:	d804      	bhi.n	8000252 <getAlphanumeric+0x36>
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	3b37      	subs	r3, #55	; 0x37
 800024c:	b2db      	uxtb	r3, r3
 800024e:	b25b      	sxtb	r3, r3
 8000250:	e050      	b.n	80002f4 <getAlphanumeric+0xd8>
    
    switch (c) {
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	3b20      	subs	r3, #32
 8000256:	2b1a      	cmp	r3, #26
 8000258:	d84a      	bhi.n	80002f0 <getAlphanumeric+0xd4>
 800025a:	a201      	add	r2, pc, #4	; (adr r2, 8000260 <getAlphanumeric+0x44>)
 800025c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000260:	080002cd 	.word	0x080002cd
 8000264:	080002f1 	.word	0x080002f1
 8000268:	080002f1 	.word	0x080002f1
 800026c:	080002f1 	.word	0x080002f1
 8000270:	080002d1 	.word	0x080002d1
 8000274:	080002d5 	.word	0x080002d5
 8000278:	080002f1 	.word	0x080002f1
 800027c:	080002f1 	.word	0x080002f1
 8000280:	080002f1 	.word	0x080002f1
 8000284:	080002f1 	.word	0x080002f1
 8000288:	080002d9 	.word	0x080002d9
 800028c:	080002dd 	.word	0x080002dd
 8000290:	080002f1 	.word	0x080002f1
 8000294:	080002e1 	.word	0x080002e1
 8000298:	080002e5 	.word	0x080002e5
 800029c:	080002e9 	.word	0x080002e9
 80002a0:	080002f1 	.word	0x080002f1
 80002a4:	080002f1 	.word	0x080002f1
 80002a8:	080002f1 	.word	0x080002f1
 80002ac:	080002f1 	.word	0x080002f1
 80002b0:	080002f1 	.word	0x080002f1
 80002b4:	080002f1 	.word	0x080002f1
 80002b8:	080002f1 	.word	0x080002f1
 80002bc:	080002f1 	.word	0x080002f1
 80002c0:	080002f1 	.word	0x080002f1
 80002c4:	080002f1 	.word	0x080002f1
 80002c8:	080002ed 	.word	0x080002ed
        case ' ': return 36;
 80002cc:	2324      	movs	r3, #36	; 0x24
 80002ce:	e011      	b.n	80002f4 <getAlphanumeric+0xd8>
        case '$': return 37;
 80002d0:	2325      	movs	r3, #37	; 0x25
 80002d2:	e00f      	b.n	80002f4 <getAlphanumeric+0xd8>
        case '%': return 38;
 80002d4:	2326      	movs	r3, #38	; 0x26
 80002d6:	e00d      	b.n	80002f4 <getAlphanumeric+0xd8>
        case '*': return 39;
 80002d8:	2327      	movs	r3, #39	; 0x27
 80002da:	e00b      	b.n	80002f4 <getAlphanumeric+0xd8>
        case '+': return 40;
 80002dc:	2328      	movs	r3, #40	; 0x28
 80002de:	e009      	b.n	80002f4 <getAlphanumeric+0xd8>
        case '-': return 41;
 80002e0:	2329      	movs	r3, #41	; 0x29
 80002e2:	e007      	b.n	80002f4 <getAlphanumeric+0xd8>
        case '.': return 42;
 80002e4:	232a      	movs	r3, #42	; 0x2a
 80002e6:	e005      	b.n	80002f4 <getAlphanumeric+0xd8>
        case '/': return 43;
 80002e8:	232b      	movs	r3, #43	; 0x2b
 80002ea:	e003      	b.n	80002f4 <getAlphanumeric+0xd8>
        case ':': return 44;
 80002ec:	232c      	movs	r3, #44	; 0x2c
 80002ee:	e001      	b.n	80002f4 <getAlphanumeric+0xd8>
    }
    
    return -1;
 80002f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <isAlphanumeric>:

static bool isAlphanumeric(const char *text, uint16_t length) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	460b      	mov	r3, r1
 800030a:	807b      	strh	r3, [r7, #2]
    while (length != 0) {
 800030c:	e00f      	b.n	800032e <isAlphanumeric+0x2e>
        if (getAlphanumeric(text[--length]) == -1) { return false; }
 800030e:	887b      	ldrh	r3, [r7, #2]
 8000310:	3b01      	subs	r3, #1
 8000312:	807b      	strh	r3, [r7, #2]
 8000314:	887b      	ldrh	r3, [r7, #2]
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	4413      	add	r3, r2
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff7d 	bl	800021c <getAlphanumeric>
 8000322:	4603      	mov	r3, r0
 8000324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000328:	d101      	bne.n	800032e <isAlphanumeric+0x2e>
 800032a:	2300      	movs	r3, #0
 800032c:	e003      	b.n	8000336 <isAlphanumeric+0x36>
    while (length != 0) {
 800032e:	887b      	ldrh	r3, [r7, #2]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1ec      	bne.n	800030e <isAlphanumeric+0xe>
    }
    return true;
 8000334:	2301      	movs	r3, #1
}
 8000336:	4618      	mov	r0, r3
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}

0800033e <isNumeric>:


static bool isNumeric(const char *text, uint16_t length) {
 800033e:	b480      	push	{r7}
 8000340:	b085      	sub	sp, #20
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
 8000346:	460b      	mov	r3, r1
 8000348:	807b      	strh	r3, [r7, #2]
    while (length != 0) {
 800034a:	e00f      	b.n	800036c <isNumeric+0x2e>
        char c = text[--length];
 800034c:	887b      	ldrh	r3, [r7, #2]
 800034e:	3b01      	subs	r3, #1
 8000350:	807b      	strh	r3, [r7, #2]
 8000352:	887b      	ldrh	r3, [r7, #2]
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	4413      	add	r3, r2
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	73fb      	strb	r3, [r7, #15]
        if (c < '0' || c > '9') { return false; }
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	2b2f      	cmp	r3, #47	; 0x2f
 8000360:	d902      	bls.n	8000368 <isNumeric+0x2a>
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	2b39      	cmp	r3, #57	; 0x39
 8000366:	d901      	bls.n	800036c <isNumeric+0x2e>
 8000368:	2300      	movs	r3, #0
 800036a:	e003      	b.n	8000374 <isNumeric+0x36>
    while (length != 0) {
 800036c:	887b      	ldrh	r3, [r7, #2]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d1ec      	bne.n	800034c <isNumeric+0xe>
    }
    return true;
 8000372:	2301      	movs	r3, #1
}
 8000374:	4618      	mov	r0, r3
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <getModeBits>:
// We store the following tightly packed (less 8) in modeInfo
//               <=9  <=26  <= 40
// NUMERIC      ( 10,   12,    14);
// ALPHANUMERIC (  9,   11,    13);
// BYTE         (  8,   16,    16);
static char getModeBits(uint8_t version, uint8_t mode) {
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	460a      	mov	r2, r1
 800038a:	71fb      	strb	r3, [r7, #7]
 800038c:	4613      	mov	r3, r2
 800038e:	71bb      	strb	r3, [r7, #6]
    // Note: We use 15 instead of 16; since 15 doesn't exist and we cannot store 16 (8 + 8) in 3 bits
    // hex(int("".join(reversed([('00' + bin(x - 8)[2:])[-3:] for x in [10, 9, 8, 12, 11, 15, 14, 13, 15]])), 2))
    unsigned int modeInfo = 0x7bbb80a;
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <getModeBits+0x60>)
 8000392:	60fb      	str	r3, [r7, #12]
    
#if LOCK_VERSION == 0 || LOCK_VERSION > 9
    if (version > 9) { modeInfo >>= 9; }
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	2b09      	cmp	r3, #9
 8000398:	d902      	bls.n	80003a0 <getModeBits+0x20>
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	0a5b      	lsrs	r3, r3, #9
 800039e:	60fb      	str	r3, [r7, #12]
#endif
    
#if LOCK_VERSION == 0 || LOCK_VERSION > 26
    if (version > 26) { modeInfo >>= 9; }
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	2b1a      	cmp	r3, #26
 80003a4:	d902      	bls.n	80003ac <getModeBits+0x2c>
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	0a5b      	lsrs	r3, r3, #9
 80003aa:	60fb      	str	r3, [r7, #12]
#endif
    
    char result = 8 + ((modeInfo >> (3 * mode)) & 0x07);
 80003ac:	79ba      	ldrb	r2, [r7, #6]
 80003ae:	4613      	mov	r3, r2
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	4413      	add	r3, r2
 80003b4:	68fa      	ldr	r2, [r7, #12]
 80003b6:	fa22 f303 	lsr.w	r3, r2, r3
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	f003 0307 	and.w	r3, r3, #7
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	3308      	adds	r3, #8
 80003c4:	72fb      	strb	r3, [r7, #11]
    if (result == 15) { result = 16; }
 80003c6:	7afb      	ldrb	r3, [r7, #11]
 80003c8:	2b0f      	cmp	r3, #15
 80003ca:	d101      	bne.n	80003d0 <getModeBits+0x50>
 80003cc:	2310      	movs	r3, #16
 80003ce:	72fb      	strb	r3, [r7, #11]
    
    return result;
 80003d0:	7afb      	ldrb	r3, [r7, #11]
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	3714      	adds	r7, #20
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	07bbb80a 	.word	0x07bbb80a

080003e4 <bb_getGridSizeBytes>:
    }
    printf("\n");
}
*/

static uint16_t bb_getGridSizeBytes(uint8_t size) {
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
    return (((size * size) + 7) / 8);
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	79fa      	ldrb	r2, [r7, #7]
 80003f2:	fb02 f303 	mul.w	r3, r2, r3
 80003f6:	3307      	adds	r3, #7
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	da00      	bge.n	80003fe <bb_getGridSizeBytes+0x1a>
 80003fc:	3307      	adds	r3, #7
 80003fe:	10db      	asrs	r3, r3, #3
 8000400:	b29b      	uxth	r3, r3
}
 8000402:	4618      	mov	r0, r3
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <bb_getBufferSizeBytes>:

static uint16_t bb_getBufferSizeBytes(uint32_t bits) {
 800040e:	b480      	push	{r7}
 8000410:	b083      	sub	sp, #12
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
    return ((bits + 7) / 8);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3307      	adds	r3, #7
 800041a:	08db      	lsrs	r3, r3, #3
 800041c:	b29b      	uxth	r3, r3
}
 800041e:	4618      	mov	r0, r3
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <bb_initBuffer>:

static void bb_initBuffer(BitBucket *bitBuffer, uint8_t *data, int32_t capacityBytes) {
 800042a:	b580      	push	{r7, lr}
 800042c:	b084      	sub	sp, #16
 800042e:	af00      	add	r7, sp, #0
 8000430:	60f8      	str	r0, [r7, #12]
 8000432:	60b9      	str	r1, [r7, #8]
 8000434:	607a      	str	r2, [r7, #4]
    bitBuffer->bitOffsetOrWidth = 0;
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
    bitBuffer->capacityBytes = capacityBytes;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	b29a      	uxth	r2, r3
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	809a      	strh	r2, [r3, #4]
    bitBuffer->data = data;
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	68ba      	ldr	r2, [r7, #8]
 8000448:	609a      	str	r2, [r3, #8]
    
    memset(data, 0, bitBuffer->capacityBytes);
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	889b      	ldrh	r3, [r3, #4]
 800044e:	461a      	mov	r2, r3
 8000450:	2100      	movs	r1, #0
 8000452:	68b8      	ldr	r0, [r7, #8]
 8000454:	f005 fd98 	bl	8005f88 <memset>
}
 8000458:	bf00      	nop
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <bb_initGrid>:

static void bb_initGrid(BitBucket *bitGrid, uint8_t *data, uint8_t size) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	60f8      	str	r0, [r7, #12]
 8000468:	60b9      	str	r1, [r7, #8]
 800046a:	4613      	mov	r3, r2
 800046c:	71fb      	strb	r3, [r7, #7]
    bitGrid->bitOffsetOrWidth = size;
 800046e:	79fa      	ldrb	r2, [r7, #7]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	601a      	str	r2, [r3, #0]
    bitGrid->capacityBytes = bb_getGridSizeBytes(size);
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ffb4 	bl	80003e4 <bb_getGridSizeBytes>
 800047c:	4603      	mov	r3, r0
 800047e:	461a      	mov	r2, r3
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	809a      	strh	r2, [r3, #4]
    bitGrid->data = data;
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	68ba      	ldr	r2, [r7, #8]
 8000488:	609a      	str	r2, [r3, #8]

    memset(data, 0, bitGrid->capacityBytes);
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	889b      	ldrh	r3, [r3, #4]
 800048e:	461a      	mov	r2, r3
 8000490:	2100      	movs	r1, #0
 8000492:	68b8      	ldr	r0, [r7, #8]
 8000494:	f005 fd78 	bl	8005f88 <memset>
}
 8000498:	bf00      	nop
 800049a:	3710      	adds	r7, #16
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <bb_appendBits>:

static void bb_appendBits(BitBucket *bitBuffer, uint32_t val, uint8_t length) {
 80004a0:	b480      	push	{r7}
 80004a2:	b087      	sub	sp, #28
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	4613      	mov	r3, r2
 80004ac:	71fb      	strb	r3, [r7, #7]
    uint32_t offset = bitBuffer->bitOffsetOrWidth;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	617b      	str	r3, [r7, #20]
    for (int8_t i = length - 1; i >= 0; i--, offset++) {
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	3b01      	subs	r3, #1
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	74fb      	strb	r3, [r7, #19]
 80004bc:	e024      	b.n	8000508 <bb_appendBits+0x68>
        bitBuffer->data[offset >> 3] |= ((val >> i) & 1) << (7 - (offset & 7));
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	689a      	ldr	r2, [r3, #8]
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	08db      	lsrs	r3, r3, #3
 80004c6:	4413      	add	r3, r2
 80004c8:	7819      	ldrb	r1, [r3, #0]
 80004ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80004ce:	68ba      	ldr	r2, [r7, #8]
 80004d0:	fa22 f303 	lsr.w	r3, r2, r3
 80004d4:	f003 0201 	and.w	r2, r3, #1
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	43db      	mvns	r3, r3
 80004dc:	f003 0307 	and.w	r3, r3, #7
 80004e0:	fa02 f303 	lsl.w	r3, r2, r3
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	6898      	ldr	r0, [r3, #8]
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	08db      	lsrs	r3, r3, #3
 80004ee:	4403      	add	r3, r0
 80004f0:	430a      	orrs	r2, r1
 80004f2:	b2d2      	uxtb	r2, r2
 80004f4:	701a      	strb	r2, [r3, #0]
    for (int8_t i = length - 1; i >= 0; i--, offset++) {
 80004f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	3b01      	subs	r3, #1
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	74fb      	strb	r3, [r7, #19]
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	3301      	adds	r3, #1
 8000506:	617b      	str	r3, [r7, #20]
 8000508:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800050c:	2b00      	cmp	r3, #0
 800050e:	dad6      	bge.n	80004be <bb_appendBits+0x1e>
    }
    bitBuffer->bitOffsetOrWidth = offset;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	697a      	ldr	r2, [r7, #20]
 8000514:	601a      	str	r2, [r3, #0]
}
 8000516:	bf00      	nop
 8000518:	371c      	adds	r7, #28
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <bb_setBit>:
    for (int8_t i = length - 1; i >= 0; i--, offset++) {
        bitBuffer->data[offset >> 3] |= ((val >> i) & 1) << (7 - (offset & 7));
    }
}
*/
static void bb_setBit(BitBucket *bitGrid, uint8_t x, uint8_t y, bool on) {
 8000522:	b480      	push	{r7}
 8000524:	b085      	sub	sp, #20
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	4608      	mov	r0, r1
 800052c:	4611      	mov	r1, r2
 800052e:	461a      	mov	r2, r3
 8000530:	4603      	mov	r3, r0
 8000532:	70fb      	strb	r3, [r7, #3]
 8000534:	460b      	mov	r3, r1
 8000536:	70bb      	strb	r3, [r7, #2]
 8000538:	4613      	mov	r3, r2
 800053a:	707b      	strb	r3, [r7, #1]
    uint32_t offset = y * bitGrid->bitOffsetOrWidth + x;
 800053c:	78bb      	ldrb	r3, [r7, #2]
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	6812      	ldr	r2, [r2, #0]
 8000542:	fb03 f202 	mul.w	r2, r3, r2
 8000546:	78fb      	ldrb	r3, [r7, #3]
 8000548:	4413      	add	r3, r2
 800054a:	60fb      	str	r3, [r7, #12]
    uint8_t mask = 1 << (7 - (offset & 0x07));
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	43db      	mvns	r3, r3
 8000550:	f003 0307 	and.w	r3, r3, #7
 8000554:	2201      	movs	r2, #1
 8000556:	fa02 f303 	lsl.w	r3, r2, r3
 800055a:	72fb      	strb	r3, [r7, #11]
    if (on) {
 800055c:	787b      	ldrb	r3, [r7, #1]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d00f      	beq.n	8000582 <bb_setBit+0x60>
        bitGrid->data[offset >> 3] |= mask;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	689a      	ldr	r2, [r3, #8]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	08db      	lsrs	r3, r3, #3
 800056a:	4413      	add	r3, r2
 800056c:	7819      	ldrb	r1, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	689a      	ldr	r2, [r3, #8]
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	08db      	lsrs	r3, r3, #3
 8000576:	4413      	add	r3, r2
 8000578:	7afa      	ldrb	r2, [r7, #11]
 800057a:	430a      	orrs	r2, r1
 800057c:	b2d2      	uxtb	r2, r2
 800057e:	701a      	strb	r2, [r3, #0]
    } else {
        bitGrid->data[offset >> 3] &= ~mask;
    }
}
 8000580:	e013      	b.n	80005aa <bb_setBit+0x88>
        bitGrid->data[offset >> 3] &= ~mask;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689a      	ldr	r2, [r3, #8]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	08db      	lsrs	r3, r3, #3
 800058a:	4413      	add	r3, r2
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b25a      	sxtb	r2, r3
 8000590:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000594:	43db      	mvns	r3, r3
 8000596:	b25b      	sxtb	r3, r3
 8000598:	4013      	ands	r3, r2
 800059a:	b259      	sxtb	r1, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	689a      	ldr	r2, [r3, #8]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	08db      	lsrs	r3, r3, #3
 80005a4:	4413      	add	r3, r2
 80005a6:	b2ca      	uxtb	r2, r1
 80005a8:	701a      	strb	r2, [r3, #0]
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <bb_invertBit>:

static void bb_invertBit(BitBucket *bitGrid, uint8_t x, uint8_t y, bool invert) {
 80005b6:	b480      	push	{r7}
 80005b8:	b085      	sub	sp, #20
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	4608      	mov	r0, r1
 80005c0:	4611      	mov	r1, r2
 80005c2:	461a      	mov	r2, r3
 80005c4:	4603      	mov	r3, r0
 80005c6:	70fb      	strb	r3, [r7, #3]
 80005c8:	460b      	mov	r3, r1
 80005ca:	70bb      	strb	r3, [r7, #2]
 80005cc:	4613      	mov	r3, r2
 80005ce:	707b      	strb	r3, [r7, #1]
    uint32_t offset = y * bitGrid->bitOffsetOrWidth + x;
 80005d0:	78bb      	ldrb	r3, [r7, #2]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	6812      	ldr	r2, [r2, #0]
 80005d6:	fb03 f202 	mul.w	r2, r3, r2
 80005da:	78fb      	ldrb	r3, [r7, #3]
 80005dc:	4413      	add	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
    uint8_t mask = 1 << (7 - (offset & 0x07));
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	43db      	mvns	r3, r3
 80005e4:	f003 0307 	and.w	r3, r3, #7
 80005e8:	2201      	movs	r2, #1
 80005ea:	fa02 f303 	lsl.w	r3, r2, r3
 80005ee:	72fb      	strb	r3, [r7, #11]
    bool on = ((bitGrid->data[offset >> 3] & (1 << (7 - (offset & 0x07)))) != 0);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	689a      	ldr	r2, [r3, #8]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	08db      	lsrs	r3, r3, #3
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	43db      	mvns	r3, r3
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	fa42 f303 	asr.w	r3, r2, r3
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	2b00      	cmp	r3, #0
 8000610:	bf14      	ite	ne
 8000612:	2301      	movne	r3, #1
 8000614:	2300      	moveq	r3, #0
 8000616:	b2db      	uxtb	r3, r3
 8000618:	72bb      	strb	r3, [r7, #10]
    if (on ^ invert) {
 800061a:	7aba      	ldrb	r2, [r7, #10]
 800061c:	787b      	ldrb	r3, [r7, #1]
 800061e:	429a      	cmp	r2, r3
 8000620:	d00f      	beq.n	8000642 <bb_invertBit+0x8c>
        bitGrid->data[offset >> 3] |= mask;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	689a      	ldr	r2, [r3, #8]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	4413      	add	r3, r2
 800062c:	7819      	ldrb	r1, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	689a      	ldr	r2, [r3, #8]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	08db      	lsrs	r3, r3, #3
 8000636:	4413      	add	r3, r2
 8000638:	7afa      	ldrb	r2, [r7, #11]
 800063a:	430a      	orrs	r2, r1
 800063c:	b2d2      	uxtb	r2, r2
 800063e:	701a      	strb	r2, [r3, #0]
    } else {
        bitGrid->data[offset >> 3] &= ~mask;
    }
}
 8000640:	e013      	b.n	800066a <bb_invertBit+0xb4>
        bitGrid->data[offset >> 3] &= ~mask;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	689a      	ldr	r2, [r3, #8]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	08db      	lsrs	r3, r3, #3
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b25a      	sxtb	r2, r3
 8000650:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000654:	43db      	mvns	r3, r3
 8000656:	b25b      	sxtb	r3, r3
 8000658:	4013      	ands	r3, r2
 800065a:	b259      	sxtb	r1, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	689a      	ldr	r2, [r3, #8]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	08db      	lsrs	r3, r3, #3
 8000664:	4413      	add	r3, r2
 8000666:	b2ca      	uxtb	r2, r1
 8000668:	701a      	strb	r2, [r3, #0]
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <bb_getBit>:

static bool bb_getBit(BitBucket *bitGrid, uint8_t x, uint8_t y) {
 8000676:	b480      	push	{r7}
 8000678:	b085      	sub	sp, #20
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	460b      	mov	r3, r1
 8000680:	70fb      	strb	r3, [r7, #3]
 8000682:	4613      	mov	r3, r2
 8000684:	70bb      	strb	r3, [r7, #2]
    uint32_t offset = y * bitGrid->bitOffsetOrWidth + x;
 8000686:	78bb      	ldrb	r3, [r7, #2]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	6812      	ldr	r2, [r2, #0]
 800068c:	fb03 f202 	mul.w	r2, r3, r2
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	4413      	add	r3, r2
 8000694:	60fb      	str	r3, [r7, #12]
    return (bitGrid->data[offset >> 3] & (1 << (7 - (offset & 0x07)))) != 0;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	08db      	lsrs	r3, r3, #3
 800069e:	4413      	add	r3, r2
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	43db      	mvns	r3, r3
 80006a8:	f003 0307 	and.w	r3, r3, #7
 80006ac:	fa42 f303 	asr.w	r3, r2, r3
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	bf14      	ite	ne
 80006b8:	2301      	movne	r3, #1
 80006ba:	2300      	moveq	r3, #0
 80006bc:	b2db      	uxtb	r3, r3
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
	...

080006cc <applyMask>:

// XORs the data modules in this QR Code with the given mask pattern. Due to XOR's mathematical
// properties, calling applyMask(m) twice with the same value is equivalent to no change at all.
// This means it is possible to apply a mask, undo it, and try another mask. Note that a final
// well-formed QR Code symbol needs exactly one mask applied (not zero, not two, etc.).
static void applyMask(BitBucket *modules, BitBucket *isFunction, uint8_t mask) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	71fb      	strb	r3, [r7, #7]
    uint8_t size = modules->bitOffsetOrWidth;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	753b      	strb	r3, [r7, #20]
    
    for (uint8_t y = 0; y < size; y++) {
 80006e0:	2300      	movs	r3, #0
 80006e2:	75fb      	strb	r3, [r7, #23]
 80006e4:	e0de      	b.n	80008a4 <applyMask+0x1d8>
        for (uint8_t x = 0; x < size; x++) {
 80006e6:	2300      	movs	r3, #0
 80006e8:	75bb      	strb	r3, [r7, #22]
 80006ea:	e0d3      	b.n	8000894 <applyMask+0x1c8>
            if (bb_getBit(isFunction, x, y)) { continue; }
 80006ec:	7dfa      	ldrb	r2, [r7, #23]
 80006ee:	7dbb      	ldrb	r3, [r7, #22]
 80006f0:	4619      	mov	r1, r3
 80006f2:	68b8      	ldr	r0, [r7, #8]
 80006f4:	f7ff ffbf 	bl	8000676 <bb_getBit>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	f040 80c6 	bne.w	800088c <applyMask+0x1c0>
            
            bool invert = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	757b      	strb	r3, [r7, #21]
            switch (mask) {
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	2b07      	cmp	r3, #7
 8000708:	f200 80b9 	bhi.w	800087e <applyMask+0x1b2>
 800070c:	a201      	add	r2, pc, #4	; (adr r2, 8000714 <applyMask+0x48>)
 800070e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000712:	bf00      	nop
 8000714:	08000735 	.word	0x08000735
 8000718:	0800074f 	.word	0x0800074f
 800071c:	08000765 	.word	0x08000765
 8000720:	08000787 	.word	0x08000787
 8000724:	080007ad 	.word	0x080007ad
 8000728:	080007d5 	.word	0x080007d5
 800072c:	0800080b 	.word	0x0800080b
 8000730:	08000845 	.word	0x08000845
                case 0:  invert = (x + y) % 2 == 0;                    break;
 8000734:	7dba      	ldrb	r2, [r7, #22]
 8000736:	7dfb      	ldrb	r3, [r7, #23]
 8000738:	4413      	add	r3, r2
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	2b00      	cmp	r3, #0
 8000742:	bf0c      	ite	eq
 8000744:	2301      	moveq	r3, #1
 8000746:	2300      	movne	r3, #0
 8000748:	b2db      	uxtb	r3, r3
 800074a:	757b      	strb	r3, [r7, #21]
 800074c:	e097      	b.n	800087e <applyMask+0x1b2>
                case 1:  invert = y % 2 == 0;                          break;
 800074e:	7dfb      	ldrb	r3, [r7, #23]
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	bf0c      	ite	eq
 800075a:	2301      	moveq	r3, #1
 800075c:	2300      	movne	r3, #0
 800075e:	b2db      	uxtb	r3, r3
 8000760:	757b      	strb	r3, [r7, #21]
 8000762:	e08c      	b.n	800087e <applyMask+0x1b2>
                case 2:  invert = x % 3 == 0;                          break;
 8000764:	7dba      	ldrb	r2, [r7, #22]
 8000766:	4b54      	ldr	r3, [pc, #336]	; (80008b8 <applyMask+0x1ec>)
 8000768:	fba3 1302 	umull	r1, r3, r3, r2
 800076c:	0859      	lsrs	r1, r3, #1
 800076e:	460b      	mov	r3, r1
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	440b      	add	r3, r1
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf0c      	ite	eq
 800077c:	2301      	moveq	r3, #1
 800077e:	2300      	movne	r3, #0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	757b      	strb	r3, [r7, #21]
 8000784:	e07b      	b.n	800087e <applyMask+0x1b2>
                case 3:  invert = (x + y) % 3 == 0;                    break;
 8000786:	7dba      	ldrb	r2, [r7, #22]
 8000788:	7dfb      	ldrb	r3, [r7, #23]
 800078a:	18d1      	adds	r1, r2, r3
 800078c:	4b4b      	ldr	r3, [pc, #300]	; (80008bc <applyMask+0x1f0>)
 800078e:	fb83 3201 	smull	r3, r2, r3, r1
 8000792:	17cb      	asrs	r3, r1, #31
 8000794:	1ad2      	subs	r2, r2, r3
 8000796:	4613      	mov	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4413      	add	r3, r2
 800079c:	1aca      	subs	r2, r1, r3
 800079e:	2a00      	cmp	r2, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	757b      	strb	r3, [r7, #21]
 80007aa:	e068      	b.n	800087e <applyMask+0x1b2>
                case 4:  invert = (x / 3 + y / 2) % 2 == 0;            break;
 80007ac:	7dbb      	ldrb	r3, [r7, #22]
 80007ae:	4a42      	ldr	r2, [pc, #264]	; (80008b8 <applyMask+0x1ec>)
 80007b0:	fba2 2303 	umull	r2, r3, r2, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	7dfb      	ldrb	r3, [r7, #23]
 80007ba:	085b      	lsrs	r3, r3, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	4413      	add	r3, r2
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	bf0c      	ite	eq
 80007ca:	2301      	moveq	r3, #1
 80007cc:	2300      	movne	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	757b      	strb	r3, [r7, #21]
 80007d2:	e054      	b.n	800087e <applyMask+0x1b2>
                case 5:  invert = x * y % 2 + x * y % 3 == 0;          break;
 80007d4:	7dbb      	ldrb	r3, [r7, #22]
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	fb02 f303 	mul.w	r3, r2, r3
 80007dc:	f003 0001 	and.w	r0, r3, #1
 80007e0:	7dbb      	ldrb	r3, [r7, #22]
 80007e2:	7dfa      	ldrb	r2, [r7, #23]
 80007e4:	fb02 f103 	mul.w	r1, r2, r3
 80007e8:	4b34      	ldr	r3, [pc, #208]	; (80008bc <applyMask+0x1f0>)
 80007ea:	fb83 3201 	smull	r3, r2, r3, r1
 80007ee:	17cb      	asrs	r3, r1, #31
 80007f0:	1ad2      	subs	r2, r2, r3
 80007f2:	4613      	mov	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	4413      	add	r3, r2
 80007f8:	1aca      	subs	r2, r1, r3
 80007fa:	1883      	adds	r3, r0, r2
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	bf0c      	ite	eq
 8000800:	2301      	moveq	r3, #1
 8000802:	2300      	movne	r3, #0
 8000804:	b2db      	uxtb	r3, r3
 8000806:	757b      	strb	r3, [r7, #21]
 8000808:	e039      	b.n	800087e <applyMask+0x1b2>
                case 6:  invert = (x * y % 2 + x * y % 3) % 2 == 0;    break;
 800080a:	7dbb      	ldrb	r3, [r7, #22]
 800080c:	7dfa      	ldrb	r2, [r7, #23]
 800080e:	fb02 f303 	mul.w	r3, r2, r3
 8000812:	f003 0001 	and.w	r0, r3, #1
 8000816:	7dbb      	ldrb	r3, [r7, #22]
 8000818:	7dfa      	ldrb	r2, [r7, #23]
 800081a:	fb02 f103 	mul.w	r1, r2, r3
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <applyMask+0x1f0>)
 8000820:	fb83 3201 	smull	r3, r2, r3, r1
 8000824:	17cb      	asrs	r3, r1, #31
 8000826:	1ad2      	subs	r2, r2, r3
 8000828:	4613      	mov	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4413      	add	r3, r2
 800082e:	1aca      	subs	r2, r1, r3
 8000830:	1883      	adds	r3, r0, r2
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf0c      	ite	eq
 800083a:	2301      	moveq	r3, #1
 800083c:	2300      	movne	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	757b      	strb	r3, [r7, #21]
 8000842:	e01c      	b.n	800087e <applyMask+0x1b2>
                case 7:  invert = ((x + y) % 2 + x * y % 3) % 2 == 0;  break;
 8000844:	7dba      	ldrb	r2, [r7, #22]
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	4413      	add	r3, r2
 800084a:	b2db      	uxtb	r3, r3
 800084c:	f003 0001 	and.w	r0, r3, #1
 8000850:	7dbb      	ldrb	r3, [r7, #22]
 8000852:	7dfa      	ldrb	r2, [r7, #23]
 8000854:	fb02 f103 	mul.w	r1, r2, r3
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <applyMask+0x1f0>)
 800085a:	fb83 3201 	smull	r3, r2, r3, r1
 800085e:	17cb      	asrs	r3, r1, #31
 8000860:	1ad2      	subs	r2, r2, r3
 8000862:	4613      	mov	r3, r2
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	4413      	add	r3, r2
 8000868:	1aca      	subs	r2, r1, r3
 800086a:	1883      	adds	r3, r0, r2
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	2b00      	cmp	r3, #0
 8000872:	bf0c      	ite	eq
 8000874:	2301      	moveq	r3, #1
 8000876:	2300      	movne	r3, #0
 8000878:	b2db      	uxtb	r3, r3
 800087a:	757b      	strb	r3, [r7, #21]
 800087c:	bf00      	nop
            }
            bb_invertBit(modules, x, y, invert);
 800087e:	7d7b      	ldrb	r3, [r7, #21]
 8000880:	7dfa      	ldrb	r2, [r7, #23]
 8000882:	7db9      	ldrb	r1, [r7, #22]
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f7ff fe96 	bl	80005b6 <bb_invertBit>
 800088a:	e000      	b.n	800088e <applyMask+0x1c2>
            if (bb_getBit(isFunction, x, y)) { continue; }
 800088c:	bf00      	nop
        for (uint8_t x = 0; x < size; x++) {
 800088e:	7dbb      	ldrb	r3, [r7, #22]
 8000890:	3301      	adds	r3, #1
 8000892:	75bb      	strb	r3, [r7, #22]
 8000894:	7dba      	ldrb	r2, [r7, #22]
 8000896:	7d3b      	ldrb	r3, [r7, #20]
 8000898:	429a      	cmp	r2, r3
 800089a:	f4ff af27 	bcc.w	80006ec <applyMask+0x20>
    for (uint8_t y = 0; y < size; y++) {
 800089e:	7dfb      	ldrb	r3, [r7, #23]
 80008a0:	3301      	adds	r3, #1
 80008a2:	75fb      	strb	r3, [r7, #23]
 80008a4:	7dfa      	ldrb	r2, [r7, #23]
 80008a6:	7d3b      	ldrb	r3, [r7, #20]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	f4ff af1c 	bcc.w	80006e6 <applyMask+0x1a>
        }
    }
}
 80008ae:	bf00      	nop
 80008b0:	bf00      	nop
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	aaaaaaab 	.word	0xaaaaaaab
 80008bc:	55555556 	.word	0x55555556

080008c0 <setFunctionModule>:

static void setFunctionModule(BitBucket *modules, BitBucket *isFunction, uint8_t x, uint8_t y, bool on) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	4611      	mov	r1, r2
 80008cc:	461a      	mov	r2, r3
 80008ce:	460b      	mov	r3, r1
 80008d0:	71fb      	strb	r3, [r7, #7]
 80008d2:	4613      	mov	r3, r2
 80008d4:	71bb      	strb	r3, [r7, #6]
    bb_setBit(modules, x, y, on);
 80008d6:	7e3b      	ldrb	r3, [r7, #24]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	79f9      	ldrb	r1, [r7, #7]
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f7ff fe20 	bl	8000522 <bb_setBit>
    bb_setBit(isFunction, x, y, true);
 80008e2:	2301      	movs	r3, #1
 80008e4:	79ba      	ldrb	r2, [r7, #6]
 80008e6:	79f9      	ldrb	r1, [r7, #7]
 80008e8:	68b8      	ldr	r0, [r7, #8]
 80008ea:	f7ff fe1a 	bl	8000522 <bb_setBit>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <drawFinderPattern>:

// Draws a 9*9 finder pattern including the border separator, with the center module at (x, y).
static void drawFinderPattern(BitBucket *modules, BitBucket *isFunction, uint8_t x, uint8_t y) {
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b088      	sub	sp, #32
 80008fa:	af02      	add	r7, sp, #8
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	4611      	mov	r1, r2
 8000902:	461a      	mov	r2, r3
 8000904:	460b      	mov	r3, r1
 8000906:	71fb      	strb	r3, [r7, #7]
 8000908:	4613      	mov	r3, r2
 800090a:	71bb      	strb	r3, [r7, #6]
    uint8_t size = modules->bitOffsetOrWidth;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	757b      	strb	r3, [r7, #21]

    for (int8_t i = -4; i <= 4; i++) {
 8000912:	23fc      	movs	r3, #252	; 0xfc
 8000914:	75fb      	strb	r3, [r7, #23]
 8000916:	e059      	b.n	80009cc <drawFinderPattern+0xd6>
        for (int8_t j = -4; j <= 4; j++) {
 8000918:	23fc      	movs	r3, #252	; 0xfc
 800091a:	75bb      	strb	r3, [r7, #22]
 800091c:	e04c      	b.n	80009b8 <drawFinderPattern+0xc2>
            uint8_t dist = max(abs(i), abs(j));  // Chebyshev/infinity norm
 800091e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000922:	2b00      	cmp	r3, #0
 8000924:	bfb8      	it	lt
 8000926:	425b      	neglt	r3, r3
 8000928:	b2db      	uxtb	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000930:	2b00      	cmp	r3, #0
 8000932:	bfb8      	it	lt
 8000934:	425b      	neglt	r3, r3
 8000936:	b2db      	uxtb	r3, r3
 8000938:	4619      	mov	r1, r3
 800093a:	4610      	mov	r0, r2
 800093c:	f7ff fc5c 	bl	80001f8 <max>
 8000940:	4603      	mov	r3, r0
 8000942:	753b      	strb	r3, [r7, #20]
            int16_t xx = x + j, yy = y + i;
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	b21a      	sxth	r2, r3
 8000948:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4413      	add	r3, r2
 8000950:	827b      	strh	r3, [r7, #18]
 8000952:	79bb      	ldrb	r3, [r7, #6]
 8000954:	b21a      	sxth	r2, r3
 8000956:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800095a:	b21b      	sxth	r3, r3
 800095c:	4413      	add	r3, r2
 800095e:	823b      	strh	r3, [r7, #16]
            if (0 <= xx && xx < size && 0 <= yy && yy < size) {
 8000960:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db21      	blt.n	80009ac <drawFinderPattern+0xb6>
 8000968:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800096c:	7d7b      	ldrb	r3, [r7, #21]
 800096e:	429a      	cmp	r2, r3
 8000970:	da1c      	bge.n	80009ac <drawFinderPattern+0xb6>
 8000972:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000976:	2b00      	cmp	r3, #0
 8000978:	db18      	blt.n	80009ac <drawFinderPattern+0xb6>
 800097a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800097e:	7d7b      	ldrb	r3, [r7, #21]
 8000980:	429a      	cmp	r2, r3
 8000982:	da13      	bge.n	80009ac <drawFinderPattern+0xb6>
                setFunctionModule(modules, isFunction, xx, yy, dist != 2 && dist != 4);
 8000984:	8a7b      	ldrh	r3, [r7, #18]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	8a3b      	ldrh	r3, [r7, #16]
 800098a:	b2d9      	uxtb	r1, r3
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d004      	beq.n	800099c <drawFinderPattern+0xa6>
 8000992:	7d3b      	ldrb	r3, [r7, #20]
 8000994:	2b04      	cmp	r3, #4
 8000996:	d001      	beq.n	800099c <drawFinderPattern+0xa6>
 8000998:	2301      	movs	r3, #1
 800099a:	e000      	b.n	800099e <drawFinderPattern+0xa8>
 800099c:	2300      	movs	r3, #0
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	460b      	mov	r3, r1
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	68f8      	ldr	r0, [r7, #12]
 80009a8:	f7ff ff8a 	bl	80008c0 <setFunctionModule>
        for (int8_t j = -4; j <= 4; j++) {
 80009ac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	75bb      	strb	r3, [r7, #22]
 80009b8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80009bc:	2b04      	cmp	r3, #4
 80009be:	ddae      	ble.n	800091e <drawFinderPattern+0x28>
    for (int8_t i = -4; i <= 4; i++) {
 80009c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	3301      	adds	r3, #1
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	75fb      	strb	r3, [r7, #23]
 80009cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	dda1      	ble.n	8000918 <drawFinderPattern+0x22>
            }
        }
    }
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <drawAlignmentPattern>:

// Draws a 5*5 alignment pattern, with the center module at (x, y).
static void drawAlignmentPattern(BitBucket *modules, BitBucket *isFunction, uint8_t x, uint8_t y) {
 80009de:	b5b0      	push	{r4, r5, r7, lr}
 80009e0:	b088      	sub	sp, #32
 80009e2:	af02      	add	r7, sp, #8
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	4611      	mov	r1, r2
 80009ea:	461a      	mov	r2, r3
 80009ec:	460b      	mov	r3, r1
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71bb      	strb	r3, [r7, #6]
    for (int8_t i = -2; i <= 2; i++) {
 80009f4:	23fe      	movs	r3, #254	; 0xfe
 80009f6:	75fb      	strb	r3, [r7, #23]
 80009f8:	e038      	b.n	8000a6c <drawAlignmentPattern+0x8e>
        for (int8_t j = -2; j <= 2; j++) {
 80009fa:	23fe      	movs	r3, #254	; 0xfe
 80009fc:	75bb      	strb	r3, [r7, #22]
 80009fe:	e02b      	b.n	8000a58 <drawAlignmentPattern+0x7a>
            setFunctionModule(modules, isFunction, x + j, y + i, max(abs(i), abs(j)) != 1);
 8000a00:	7dba      	ldrb	r2, [r7, #22]
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4413      	add	r3, r2
 8000a06:	b2dc      	uxtb	r4, r3
 8000a08:	7dfa      	ldrb	r2, [r7, #23]
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b2dd      	uxtb	r5, r3
 8000a10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	bfb8      	it	lt
 8000a18:	425b      	neglt	r3, r3
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	bfb8      	it	lt
 8000a26:	425b      	neglt	r3, r3
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4610      	mov	r0, r2
 8000a2e:	f7ff fbe3 	bl	80001f8 <max>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	bf14      	ite	ne
 8000a38:	2301      	movne	r3, #1
 8000a3a:	2300      	moveq	r3, #0
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	462b      	mov	r3, r5
 8000a42:	4622      	mov	r2, r4
 8000a44:	68b9      	ldr	r1, [r7, #8]
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f7ff ff3a 	bl	80008c0 <setFunctionModule>
        for (int8_t j = -2; j <= 2; j++) {
 8000a4c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	3301      	adds	r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	75bb      	strb	r3, [r7, #22]
 8000a58:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	ddcf      	ble.n	8000a00 <drawAlignmentPattern+0x22>
    for (int8_t i = -2; i <= 2; i++) {
 8000a60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	3301      	adds	r3, #1
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	75fb      	strb	r3, [r7, #23]
 8000a6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	ddc2      	ble.n	80009fa <drawAlignmentPattern+0x1c>
        }
    }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bdb0      	pop	{r4, r5, r7, pc}

08000a7e <drawFormatBits>:

// Draws two copies of the format bits (with its own error correction code)
// based on the given mask and this object's error correction level field.
static void drawFormatBits(BitBucket *modules, BitBucket *isFunction, uint8_t ecc, uint8_t mask) {
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b08c      	sub	sp, #48	; 0x30
 8000a82:	af02      	add	r7, sp, #8
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	4611      	mov	r1, r2
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	4613      	mov	r3, r2
 8000a92:	71bb      	strb	r3, [r7, #6]
    
    uint8_t size = modules->bitOffsetOrWidth;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	76fb      	strb	r3, [r7, #27]

    // Calculate error correction code and pack bits
    uint32_t data = ecc << 3 | mask;  // errCorrLvl is uint2, mask is uint3
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	00da      	lsls	r2, r3, #3
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	617b      	str	r3, [r7, #20]
    uint32_t rem = data;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < 10; i++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
 8000aac:	e00c      	b.n	8000ac8 <drawFormatBits+0x4a>
        rem = (rem << 1) ^ ((rem >> 9) * 0x537);
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	005a      	lsls	r2, r3, #1
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab4:	0a5b      	lsrs	r3, r3, #9
 8000ab6:	f240 5137 	movw	r1, #1335	; 0x537
 8000aba:	fb01 f303 	mul.w	r3, r1, r3
 8000abe:	4053      	eors	r3, r2
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < 10; i++) {
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	623b      	str	r3, [r7, #32]
 8000ac8:	6a3b      	ldr	r3, [r7, #32]
 8000aca:	2b09      	cmp	r3, #9
 8000acc:	ddef      	ble.n	8000aae <drawFormatBits+0x30>
    }
    
    data = data << 10 | rem;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	029b      	lsls	r3, r3, #10
 8000ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	617b      	str	r3, [r7, #20]
    data ^= 0x5412;  // uint15
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	f483 43a8 	eor.w	r3, r3, #21504	; 0x5400
 8000ade:	f083 0312 	eor.w	r3, r3, #18
 8000ae2:	617b      	str	r3, [r7, #20]
    
    // Draw first copy
    for (uint8_t i = 0; i <= 5; i++) {
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	77fb      	strb	r3, [r7, #31]
 8000ae8:	e015      	b.n	8000b16 <drawFormatBits+0x98>
        setFunctionModule(modules, isFunction, 8, i, ((data >> i) & 1) != 0);
 8000aea:	7ffb      	ldrb	r3, [r7, #31]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	fa22 f303 	lsr.w	r3, r2, r3
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bf14      	ite	ne
 8000afa:	2301      	movne	r3, #1
 8000afc:	2300      	moveq	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	7ffb      	ldrb	r3, [r7, #31]
 8000b04:	9200      	str	r2, [sp, #0]
 8000b06:	2208      	movs	r2, #8
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f7ff fed8 	bl	80008c0 <setFunctionModule>
    for (uint8_t i = 0; i <= 5; i++) {
 8000b10:	7ffb      	ldrb	r3, [r7, #31]
 8000b12:	3301      	adds	r3, #1
 8000b14:	77fb      	strb	r3, [r7, #31]
 8000b16:	7ffb      	ldrb	r3, [r7, #31]
 8000b18:	2b05      	cmp	r3, #5
 8000b1a:	d9e6      	bls.n	8000aea <drawFormatBits+0x6c>
    }
    
    setFunctionModule(modules, isFunction, 8, 7, ((data >> 6) & 1) != 0);
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	099b      	lsrs	r3, r3, #6
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf14      	ite	ne
 8000b28:	2301      	movne	r3, #1
 8000b2a:	2300      	moveq	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2307      	movs	r3, #7
 8000b32:	2208      	movs	r2, #8
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f7ff fec2 	bl	80008c0 <setFunctionModule>
    setFunctionModule(modules, isFunction, 8, 8, ((data >> 7) & 1) != 0);
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	09db      	lsrs	r3, r3, #7
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	bf14      	ite	ne
 8000b48:	2301      	movne	r3, #1
 8000b4a:	2300      	moveq	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2308      	movs	r3, #8
 8000b52:	2208      	movs	r2, #8
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f7ff feb2 	bl	80008c0 <setFunctionModule>
    setFunctionModule(modules, isFunction, 7, 8, ((data >> 8) & 1) != 0);
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	0a1b      	lsrs	r3, r3, #8
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	bf14      	ite	ne
 8000b68:	2301      	movne	r3, #1
 8000b6a:	2300      	moveq	r3, #0
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2308      	movs	r3, #8
 8000b72:	2207      	movs	r2, #7
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f7ff fea2 	bl	80008c0 <setFunctionModule>
    
    for (int8_t i = 9; i < 15; i++) {
 8000b7c:	2309      	movs	r3, #9
 8000b7e:	77bb      	strb	r3, [r7, #30]
 8000b80:	e01c      	b.n	8000bbc <drawFormatBits+0x13e>
        setFunctionModule(modules, isFunction, 14 - i, 8, ((data >> i) & 1) != 0);
 8000b82:	7fbb      	ldrb	r3, [r7, #30]
 8000b84:	f1c3 030e 	rsb	r3, r3, #14
 8000b88:	b2d9      	uxtb	r1, r3
 8000b8a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	fa22 f303 	lsr.w	r3, r2, r3
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	bf14      	ite	ne
 8000b9c:	2301      	movne	r3, #1
 8000b9e:	2300      	moveq	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	460a      	mov	r2, r1
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	68f8      	ldr	r0, [r7, #12]
 8000bac:	f7ff fe88 	bl	80008c0 <setFunctionModule>
    for (int8_t i = 9; i < 15; i++) {
 8000bb0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	77bb      	strb	r3, [r7, #30]
 8000bbc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000bc0:	2b0e      	cmp	r3, #14
 8000bc2:	ddde      	ble.n	8000b82 <drawFormatBits+0x104>
    }
    
    // Draw second copy
    for (int8_t i = 0; i <= 7; i++) {
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	777b      	strb	r3, [r7, #29]
 8000bc8:	e01e      	b.n	8000c08 <drawFormatBits+0x18a>
        setFunctionModule(modules, isFunction, size - 1 - i, 8, ((data >> i) & 1) != 0);
 8000bca:	7f7b      	ldrb	r3, [r7, #29]
 8000bcc:	7efa      	ldrb	r2, [r7, #27]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	b2d9      	uxtb	r1, r3
 8000bd6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	bf14      	ite	ne
 8000be8:	2301      	movne	r3, #1
 8000bea:	2300      	moveq	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	460a      	mov	r2, r1
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f7ff fe62 	bl	80008c0 <setFunctionModule>
    for (int8_t i = 0; i <= 7; i++) {
 8000bfc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	3301      	adds	r3, #1
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	777b      	strb	r3, [r7, #29]
 8000c08:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000c0c:	2b07      	cmp	r3, #7
 8000c0e:	dddc      	ble.n	8000bca <drawFormatBits+0x14c>
    }
    
    for (int8_t i = 8; i < 15; i++) {
 8000c10:	2308      	movs	r3, #8
 8000c12:	773b      	strb	r3, [r7, #28]
 8000c14:	e01e      	b.n	8000c54 <drawFormatBits+0x1d6>
        setFunctionModule(modules, isFunction, 8, size - 15 + i, ((data >> i) & 1) != 0);
 8000c16:	7f3a      	ldrb	r2, [r7, #28]
 8000c18:	7efb      	ldrb	r3, [r7, #27]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	3b0f      	subs	r3, #15
 8000c20:	b2d9      	uxtb	r1, r3
 8000c22:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	fa22 f303 	lsr.w	r3, r2, r3
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	bf14      	ite	ne
 8000c34:	2301      	movne	r3, #1
 8000c36:	2300      	moveq	r3, #0
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	2208      	movs	r2, #8
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f7ff fe3c 	bl	80008c0 <setFunctionModule>
    for (int8_t i = 8; i < 15; i++) {
 8000c48:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	773b      	strb	r3, [r7, #28]
 8000c54:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8000c58:	2b0e      	cmp	r3, #14
 8000c5a:	dddc      	ble.n	8000c16 <drawFormatBits+0x198>
    }
    
    setFunctionModule(modules, isFunction, 8, size - 8, true);
 8000c5c:	7efb      	ldrb	r3, [r7, #27]
 8000c5e:	3b08      	subs	r3, #8
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2201      	movs	r2, #1
 8000c64:	9200      	str	r2, [sp, #0]
 8000c66:	2208      	movs	r2, #8
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	68f8      	ldr	r0, [r7, #12]
 8000c6c:	f7ff fe28 	bl	80008c0 <setFunctionModule>
}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <drawVersion>:


// Draws two copies of the version bits (with its own error correction code),
// based on this object's version field (which only has an effect for 7 <= version <= 40).
static void drawVersion(BitBucket *modules, BitBucket *isFunction, uint8_t version) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	4613      	mov	r3, r2
 8000c84:	71fb      	strb	r3, [r7, #7]
    
    int8_t size = modules->bitOffsetOrWidth;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	767b      	strb	r3, [r7, #25]

#if LOCK_VERSION != 0 && LOCK_VERSION < 7
    return;
    
#else
    if (version < 7) { return; }
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d957      	bls.n	8000d42 <drawVersion+0xca>
    
    // Calculate error correction code and pack bits
    uint32_t rem = version;  // version is uint6, in the range [7, 40]
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < 12; i++) {
 8000c96:	2300      	movs	r3, #0
 8000c98:	76fb      	strb	r3, [r7, #27]
 8000c9a:	e00c      	b.n	8000cb6 <drawVersion+0x3e>
        rem = (rem << 1) ^ ((rem >> 11) * 0x1F25);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005a      	lsls	r2, r3, #1
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	0adb      	lsrs	r3, r3, #11
 8000ca4:	f641 7125 	movw	r1, #7973	; 0x1f25
 8000ca8:	fb01 f303 	mul.w	r3, r1, r3
 8000cac:	4053      	eors	r3, r2
 8000cae:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < 12; i++) {
 8000cb0:	7efb      	ldrb	r3, [r7, #27]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	76fb      	strb	r3, [r7, #27]
 8000cb6:	7efb      	ldrb	r3, [r7, #27]
 8000cb8:	2b0b      	cmp	r3, #11
 8000cba:	d9ef      	bls.n	8000c9c <drawVersion+0x24>
    }
    
    uint32_t data = version << 12 | rem;  // uint18
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	031b      	lsls	r3, r3, #12
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	617b      	str	r3, [r7, #20]
    
    // Draw two copies
    for (uint8_t i = 0; i < 18; i++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	76bb      	strb	r3, [r7, #26]
 8000ccc:	e035      	b.n	8000d3a <drawVersion+0xc2>
        bool bit = ((data >> i) & 1) != 0;
 8000cce:	7ebb      	ldrb	r3, [r7, #26]
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf14      	ite	ne
 8000cde:	2301      	movne	r3, #1
 8000ce0:	2300      	moveq	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	74fb      	strb	r3, [r7, #19]
        uint8_t a = size - 11 + i % 3, b = i / 3;
 8000ce6:	7eba      	ldrb	r2, [r7, #26]
 8000ce8:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <drawVersion+0xd4>)
 8000cea:	fba3 1302 	umull	r1, r3, r3, r2
 8000cee:	0859      	lsrs	r1, r3, #1
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	440b      	add	r3, r1
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	7e7b      	ldrb	r3, [r7, #25]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	3b0b      	subs	r3, #11
 8000d02:	74bb      	strb	r3, [r7, #18]
 8000d04:	7ebb      	ldrb	r3, [r7, #26]
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <drawVersion+0xd4>)
 8000d08:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0c:	085b      	lsrs	r3, r3, #1
 8000d0e:	747b      	strb	r3, [r7, #17]
        setFunctionModule(modules, isFunction, a, b, bit);
 8000d10:	7c79      	ldrb	r1, [r7, #17]
 8000d12:	7cba      	ldrb	r2, [r7, #18]
 8000d14:	7cfb      	ldrb	r3, [r7, #19]
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	68b9      	ldr	r1, [r7, #8]
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f7ff fdcf 	bl	80008c0 <setFunctionModule>
        setFunctionModule(modules, isFunction, b, a, bit);
 8000d22:	7cb9      	ldrb	r1, [r7, #18]
 8000d24:	7c7a      	ldrb	r2, [r7, #17]
 8000d26:	7cfb      	ldrb	r3, [r7, #19]
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f7ff fdc6 	bl	80008c0 <setFunctionModule>
    for (uint8_t i = 0; i < 18; i++) {
 8000d34:	7ebb      	ldrb	r3, [r7, #26]
 8000d36:	3301      	adds	r3, #1
 8000d38:	76bb      	strb	r3, [r7, #26]
 8000d3a:	7ebb      	ldrb	r3, [r7, #26]
 8000d3c:	2b11      	cmp	r3, #17
 8000d3e:	d9c6      	bls.n	8000cce <drawVersion+0x56>
 8000d40:	e000      	b.n	8000d44 <drawVersion+0xcc>
    if (version < 7) { return; }
 8000d42:	bf00      	nop
    }
    
#endif
}
 8000d44:	3720      	adds	r7, #32
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	aaaaaaab 	.word	0xaaaaaaab

08000d50 <drawFunctionPatterns>:

static void drawFunctionPatterns(BitBucket *modules, BitBucket *isFunction, uint8_t version, uint8_t ecc) {
 8000d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d54:	b08d      	sub	sp, #52	; 0x34
 8000d56:	af02      	add	r7, sp, #8
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	461a      	mov	r2, r3
 8000d60:	460b      	mov	r3, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
    
    uint8_t size = modules->bitOffsetOrWidth;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f887 3020 	strb.w	r3, [r7, #32]

    // Draw the horizontal and vertical timing patterns
    for (uint8_t i = 0; i < size; i++) {
 8000d70:	2300      	movs	r3, #0
 8000d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000d76:	e029      	b.n	8000dcc <drawFunctionPatterns+0x7c>
        setFunctionModule(modules, isFunction, 6, i, i % 2 == 0);
 8000d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	bf0c      	ite	eq
 8000d86:	2301      	moveq	r3, #1
 8000d88:	2300      	movne	r3, #0
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d92:	9200      	str	r2, [sp, #0]
 8000d94:	2206      	movs	r2, #6
 8000d96:	68b9      	ldr	r1, [r7, #8]
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff fd91 	bl	80008c0 <setFunctionModule>
        setFunctionModule(modules, isFunction, i, 6, i % 2 == 0);
 8000d9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2306      	movs	r3, #6
 8000dba:	68b9      	ldr	r1, [r7, #8]
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f7ff fd7f 	bl	80008c0 <setFunctionModule>
    for (uint8_t i = 0; i < size; i++) {
 8000dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000dcc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000dd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d3cf      	bcc.n	8000d78 <drawFunctionPatterns+0x28>
    }
    
    // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)
    drawFinderPattern(modules, isFunction, 3, 3);
 8000dd8:	2303      	movs	r3, #3
 8000dda:	2203      	movs	r2, #3
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f7ff fd89 	bl	80008f6 <drawFinderPattern>
    drawFinderPattern(modules, isFunction, size - 4, 3);
 8000de4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000de8:	3b04      	subs	r3, #4
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	2303      	movs	r3, #3
 8000dee:	68b9      	ldr	r1, [r7, #8]
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f7ff fd80 	bl	80008f6 <drawFinderPattern>
    drawFinderPattern(modules, isFunction, 3, size - 4);
 8000df6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2203      	movs	r2, #3
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	f7ff fd77 	bl	80008f6 <drawFinderPattern>
    
#if LOCK_VERSION == 0 || LOCK_VERSION > 1

    if (version > 1) {
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	f240 80c2 	bls.w	8000f94 <drawFunctionPatterns+0x244>
 8000e10:	466b      	mov	r3, sp
 8000e12:	461e      	mov	r6, r3

        // Draw the numerous alignment patterns
        
        uint8_t alignCount = version / 7 + 2;
 8000e14:	79fa      	ldrb	r2, [r7, #7]
 8000e16:	4b68      	ldr	r3, [pc, #416]	; (8000fb8 <drawFunctionPatterns+0x268>)
 8000e18:	fba3 1302 	umull	r1, r3, r3, r2
 8000e1c:	1ad2      	subs	r2, r2, r3
 8000e1e:	0852      	lsrs	r2, r2, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	3302      	adds	r3, #2
 8000e28:	77fb      	strb	r3, [r7, #31]
        uint8_t step;
        if (version != 32) {
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b20      	cmp	r3, #32
 8000e2e:	d00f      	beq.n	8000e50 <drawFunctionPatterns+0x100>
            step = (version * 4 + alignCount * 2 + 1) / (2 * alignCount - 2) * 2;  // ceil((size - 13) / (2*numAlign - 2)) * 2
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	005a      	lsls	r2, r3, #1
 8000e34:	7ffb      	ldrb	r3, [r7, #31]
 8000e36:	4413      	add	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	7ffb      	ldrb	r3, [r7, #31]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000e4e:	e002      	b.n	8000e56 <drawFunctionPatterns+0x106>
        } else { // C-C-C-Combo breaker!
            step = 26;
 8000e50:	231a      	movs	r3, #26
 8000e52:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        }
        
        uint8_t alignPositionIndex = alignCount - 1;
 8000e56:	7ffb      	ldrb	r3, [r7, #31]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint8_t alignPosition[alignCount];
 8000e5e:	7ff9      	ldrb	r1, [r7, #31]
 8000e60:	460b      	mov	r3, r1
 8000e62:	3b01      	subs	r3, #1
 8000e64:	61bb      	str	r3, [r7, #24]
 8000e66:	b2cb      	uxtb	r3, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4698      	mov	r8, r3
 8000e6c:	4691      	mov	r9, r2
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e82:	b2cb      	uxtb	r3, r1
 8000e84:	2200      	movs	r2, #0
 8000e86:	461c      	mov	r4, r3
 8000e88:	4615      	mov	r5, r2
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	00eb      	lsls	r3, r5, #3
 8000e94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e98:	00e2      	lsls	r2, r4, #3
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	3307      	adds	r3, #7
 8000e9e:	08db      	lsrs	r3, r3, #3
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ea6:	ab02      	add	r3, sp, #8
 8000ea8:	3300      	adds	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
        
        alignPosition[0] = 6;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2206      	movs	r2, #6
 8000eb0:	701a      	strb	r2, [r3, #0]
        
        uint8_t size = version * 4 + 17;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3311      	adds	r3, #17
 8000eba:	74fb      	strb	r3, [r7, #19]
        for (uint8_t i = 0, pos = size - 7; i < alignCount - 1; i++, pos -= step) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ec2:	7cfb      	ldrb	r3, [r7, #19]
 8000ec4:	3b07      	subs	r3, #7
 8000ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000eca:	e015      	b.n	8000ef8 <drawFunctionPatterns+0x1a8>
            alignPosition[alignPositionIndex--] = pos;
 8000ecc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ed0:	1e5a      	subs	r2, r3, #1
 8000ed2:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000ede:	545a      	strb	r2, [r3, r1]
        for (uint8_t i = 0, pos = size - 7; i < alignCount - 1; i++, pos -= step) {
 8000ee0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000eee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ef8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000efc:	7ffb      	ldrb	r3, [r7, #31]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	429a      	cmp	r2, r3
 8000f02:	dbe3      	blt.n	8000ecc <drawFunctionPatterns+0x17c>
        }
        
        for (uint8_t i = 0; i < alignCount; i++) {
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000f0a:	e03d      	b.n	8000f88 <drawFunctionPatterns+0x238>
            for (uint8_t j = 0; j < alignCount; j++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000f12:	e02f      	b.n	8000f74 <drawFunctionPatterns+0x224>
                if ((i == 0 && j == 0) || (i == 0 && j == alignCount - 1) || (i == alignCount - 1 && j == 0)) {
 8000f14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d103      	bne.n	8000f24 <drawFunctionPatterns+0x1d4>
 8000f1c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d021      	beq.n	8000f68 <drawFunctionPatterns+0x218>
 8000f24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d105      	bne.n	8000f38 <drawFunctionPatterns+0x1e8>
 8000f2c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000f30:	7ffb      	ldrb	r3, [r7, #31]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d017      	beq.n	8000f68 <drawFunctionPatterns+0x218>
 8000f38:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000f3c:	7ffb      	ldrb	r3, [r7, #31]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d103      	bne.n	8000f4c <drawFunctionPatterns+0x1fc>
 8000f44:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00d      	beq.n	8000f68 <drawFunctionPatterns+0x218>
                    continue;  // Skip the three finder corners
                } else {
                    drawAlignmentPattern(modules, isFunction, alignPosition[i], alignPosition[j]);
 8000f4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	5cd1      	ldrb	r1, [r2, r3]
 8000f54:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	5cd3      	ldrb	r3, [r2, r3]
 8000f5c:	460a      	mov	r2, r1
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	f7ff fd3c 	bl	80009de <drawAlignmentPattern>
 8000f66:	e000      	b.n	8000f6a <drawFunctionPatterns+0x21a>
                    continue;  // Skip the three finder corners
 8000f68:	bf00      	nop
            for (uint8_t j = 0; j < alignCount; j++) {
 8000f6a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000f74:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000f78:	7ffb      	ldrb	r3, [r7, #31]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d3ca      	bcc.n	8000f14 <drawFunctionPatterns+0x1c4>
        for (uint8_t i = 0; i < alignCount; i++) {
 8000f7e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000f82:	3301      	adds	r3, #1
 8000f84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000f88:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000f8c:	7ffb      	ldrb	r3, [r7, #31]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d3bc      	bcc.n	8000f0c <drawFunctionPatterns+0x1bc>
 8000f92:	46b5      	mov	sp, r6
    }
    
#endif
    
    // Draw configuration data
    drawFormatBits(modules, isFunction, ecc, 0);  // Dummy mask value; overwritten later in the constructor
 8000f94:	79ba      	ldrb	r2, [r7, #6]
 8000f96:	2300      	movs	r3, #0
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f7ff fd6f 	bl	8000a7e <drawFormatBits>
    drawVersion(modules, isFunction, version);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f7ff fe66 	bl	8000c78 <drawVersion>
}
 8000fac:	bf00      	nop
 8000fae:	372c      	adds	r7, #44	; 0x2c
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fb6:	bf00      	nop
 8000fb8:	24924925 	.word	0x24924925

08000fbc <drawCodewords>:


// Draws the given sequence of 8-bit codewords (data and error correction) onto the entire
// data area of this QR Code symbol. Function modules need to be marked off before this is called.
static void drawCodewords(BitBucket *modules, BitBucket *isFunction, BitBucket *codewords) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
    
    uint32_t bitLength = codewords->bitOffsetOrWidth;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
    uint8_t *data = codewords->data;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	617b      	str	r3, [r7, #20]
    
    uint8_t size = modules->bitOffsetOrWidth;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	74fb      	strb	r3, [r7, #19]
    
    // Bit index into the data
    uint32_t i = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Do the funny zigzag scan
    for (int16_t right = size - 1; right >= 1; right -= 2) {  // Index of right column in each column pair
 8000fde:	7cfb      	ldrb	r3, [r7, #19]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	847b      	strh	r3, [r7, #34]	; 0x22
 8000fe8:	e06f      	b.n	80010ca <drawCodewords+0x10e>
        if (right == 6) { right = 5; }
 8000fea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d101      	bne.n	8000ff6 <drawCodewords+0x3a>
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	847b      	strh	r3, [r7, #34]	; 0x22
        
        for (uint8_t vert = 0; vert < size; vert++) {  // Vertical counter
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000ffc:	e05c      	b.n	80010b8 <drawCodewords+0xfc>
            for (int j = 0; j < 2; j++) {
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
 8001002:	e051      	b.n	80010a8 <drawCodewords+0xec>
                uint8_t x = right - j;  // Actual x coordinate
 8001004:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001006:	b2da      	uxtb	r2, r3
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	74bb      	strb	r3, [r7, #18]
                bool upwards = ((right & 2) == 0) ^ (x < 6);
 8001010:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	bf0c      	ite	eq
 800101a:	2301      	moveq	r3, #1
 800101c:	2300      	movne	r3, #0
 800101e:	b2db      	uxtb	r3, r3
 8001020:	b25a      	sxtb	r2, r3
 8001022:	7cbb      	ldrb	r3, [r7, #18]
 8001024:	2b05      	cmp	r3, #5
 8001026:	bf94      	ite	ls
 8001028:	2301      	movls	r3, #1
 800102a:	2300      	movhi	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	b25b      	sxtb	r3, r3
 8001030:	4053      	eors	r3, r2
 8001032:	b25b      	sxtb	r3, r3
 8001034:	747b      	strb	r3, [r7, #17]
                uint8_t y = upwards ? size - 1 - vert : vert;  // Actual y coordinate
 8001036:	7c7b      	ldrb	r3, [r7, #17]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d007      	beq.n	800104c <drawCodewords+0x90>
 800103c:	7cfa      	ldrb	r2, [r7, #19]
 800103e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	3b01      	subs	r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	e001      	b.n	8001050 <drawCodewords+0x94>
 800104c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001050:	743b      	strb	r3, [r7, #16]
                if (!bb_getBit(isFunction, x, y) && i < bitLength) {
 8001052:	7c3a      	ldrb	r2, [r7, #16]
 8001054:	7cbb      	ldrb	r3, [r7, #18]
 8001056:	4619      	mov	r1, r3
 8001058:	68b8      	ldr	r0, [r7, #8]
 800105a:	f7ff fb0c 	bl	8000676 <bb_getBit>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d11e      	bne.n	80010a2 <drawCodewords+0xe6>
 8001064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	429a      	cmp	r2, r3
 800106a:	d21a      	bcs.n	80010a2 <drawCodewords+0xe6>
                    bb_setBit(modules, x, y, ((data[i >> 3] >> (7 - (i & 7))) & 1) != 0);
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	08db      	lsrs	r3, r3, #3
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	43db      	mvns	r3, r3
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	fa42 f303 	asr.w	r3, r2, r3
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	bf14      	ite	ne
 800108c:	2301      	movne	r3, #1
 800108e:	2300      	moveq	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	7c3a      	ldrb	r2, [r7, #16]
 8001094:	7cb9      	ldrb	r1, [r7, #18]
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f7ff fa43 	bl	8000522 <bb_setBit>
                    i++;
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	3301      	adds	r3, #1
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
            for (int j = 0; j < 2; j++) {
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3301      	adds	r3, #1
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	ddaa      	ble.n	8001004 <drawCodewords+0x48>
        for (uint8_t vert = 0; vert < size; vert++) {  // Vertical counter
 80010ae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80010b2:	3301      	adds	r3, #1
 80010b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80010b8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80010bc:	7cfb      	ldrb	r3, [r7, #19]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d39d      	bcc.n	8000ffe <drawCodewords+0x42>
    for (int16_t right = size - 1; right >= 1; right -= 2) {  // Index of right column in each column pair
 80010c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010c4:	3b02      	subs	r3, #2
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	847b      	strh	r3, [r7, #34]	; 0x22
 80010ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dc8b      	bgt.n	8000fea <drawCodewords+0x2e>
                // If there are any remainder bits (0 to 7), they are already
                // set to 0/false/white when the grid of modules was initialized
            }
        }
    }
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <getPenaltyScore>:
#define PENALTY_N4     10

// Calculates and returns the penalty score based on state of this QR Code's current modules.
// This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.
// @TODO: This can be optimized by working with the bytes instead of bits.
static uint32_t getPenaltyScore(BitBucket *modules) {
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b08d      	sub	sp, #52	; 0x34
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    uint32_t result = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    uint8_t size = modules->bitOffsetOrWidth;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	75fb      	strb	r3, [r7, #23]
    
    // Adjacent modules in row having same color
    for (uint8_t y = 0; y < size; y++) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010f4:	e049      	b.n	800118a <getPenaltyScore+0xae>
        
        bool colorX = bb_getBit(modules, 0, y);
 80010f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010fa:	461a      	mov	r2, r3
 80010fc:	2100      	movs	r1, #0
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff fab9 	bl	8000676 <bb_getBit>
 8001104:	4603      	mov	r3, r0
 8001106:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        for (uint8_t x = 1, runX = 1; x < size; x++) {
 800110a:	2301      	movs	r3, #1
 800110c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001110:	2301      	movs	r3, #1
 8001112:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001116:	e02e      	b.n	8001176 <getPenaltyScore+0x9a>
            bool cx = bb_getBit(modules, x, y);
 8001118:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800111c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001120:	4619      	mov	r1, r3
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff faa7 	bl	8000676 <bb_getBit>
 8001128:	4603      	mov	r3, r0
 800112a:	73bb      	strb	r3, [r7, #14]
            if (cx != colorX) {
 800112c:	7bba      	ldrb	r2, [r7, #14]
 800112e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001132:	429a      	cmp	r2, r3
 8001134:	d006      	beq.n	8001144 <getPenaltyScore+0x68>
                colorX = cx;
 8001136:	7bbb      	ldrb	r3, [r7, #14]
 8001138:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                runX = 1;
 800113c:	2301      	movs	r3, #1
 800113e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001142:	e013      	b.n	800116c <getPenaltyScore+0x90>
                
            } else {
                runX++;
 8001144:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001148:	3301      	adds	r3, #1
 800114a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                if (runX == 5) {
 800114e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001152:	2b05      	cmp	r3, #5
 8001154:	d103      	bne.n	800115e <getPenaltyScore+0x82>
                    result += PENALTY_N1;
 8001156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001158:	3303      	adds	r3, #3
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800115c:	e006      	b.n	800116c <getPenaltyScore+0x90>
                } else if (runX > 5) {
 800115e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001162:	2b05      	cmp	r3, #5
 8001164:	d902      	bls.n	800116c <getPenaltyScore+0x90>
                    result++;
 8001166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001168:	3301      	adds	r3, #1
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t x = 1, runX = 1; x < size; x++) {
 800116c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001170:	3301      	adds	r3, #1
 8001172:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001176:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	429a      	cmp	r2, r3
 800117e:	d3cb      	bcc.n	8001118 <getPenaltyScore+0x3c>
    for (uint8_t y = 0; y < size; y++) {
 8001180:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001184:	3301      	adds	r3, #1
 8001186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800118a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800118e:	7dfb      	ldrb	r3, [r7, #23]
 8001190:	429a      	cmp	r2, r3
 8001192:	d3b0      	bcc.n	80010f6 <getPenaltyScore+0x1a>
            }
        }
    }
    
    // Adjacent modules in column having same color
    for (uint8_t x = 0; x < size; x++) {
 8001194:	2300      	movs	r3, #0
 8001196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800119a:	e049      	b.n	8001230 <getPenaltyScore+0x154>
        bool colorY = bb_getBit(modules, x, 0);
 800119c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011a0:	2200      	movs	r2, #0
 80011a2:	4619      	mov	r1, r3
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fa66 	bl	8000676 <bb_getBit>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        for (uint8_t y = 1, runY = 1; y < size; y++) {
 80011b0:	2301      	movs	r3, #1
 80011b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80011b6:	2301      	movs	r3, #1
 80011b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80011bc:	e02e      	b.n	800121c <getPenaltyScore+0x140>
            bool cy = bb_getBit(modules, x, y);
 80011be:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80011c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011c6:	4619      	mov	r1, r3
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fa54 	bl	8000676 <bb_getBit>
 80011ce:	4603      	mov	r3, r0
 80011d0:	73fb      	strb	r3, [r7, #15]
            if (cy != colorY) {
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011d8:	429a      	cmp	r2, r3
 80011da:	d006      	beq.n	80011ea <getPenaltyScore+0x10e>
                colorY = cy;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                runY = 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80011e8:	e013      	b.n	8001212 <getPenaltyScore+0x136>
            } else {
                runY++;
 80011ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011ee:	3301      	adds	r3, #1
 80011f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                if (runY == 5) {
 80011f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	d103      	bne.n	8001204 <getPenaltyScore+0x128>
                    result += PENALTY_N1;
 80011fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fe:	3303      	adds	r3, #3
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001202:	e006      	b.n	8001212 <getPenaltyScore+0x136>
                } else if (runY > 5) {
 8001204:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001208:	2b05      	cmp	r3, #5
 800120a:	d902      	bls.n	8001212 <getPenaltyScore+0x136>
                    result++;
 800120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120e:	3301      	adds	r3, #1
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t y = 1, runY = 1; y < size; y++) {
 8001212:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001216:	3301      	adds	r3, #1
 8001218:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800121c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	429a      	cmp	r2, r3
 8001224:	d3cb      	bcc.n	80011be <getPenaltyScore+0xe2>
    for (uint8_t x = 0; x < size; x++) {
 8001226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800122a:	3301      	adds	r3, #1
 800122c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001230:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	429a      	cmp	r2, r3
 8001238:	d3b0      	bcc.n	800119c <getPenaltyScore+0xc0>
                }
            }
        }
    }
    
    uint16_t black = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	847b      	strh	r3, [r7, #34]	; 0x22
    for (uint8_t y = 0; y < size; y++) {
 800123e:	2300      	movs	r3, #0
 8001240:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001244:	e08f      	b.n	8001366 <getPenaltyScore+0x28a>
        uint16_t bitsRow = 0, bitsCol = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	83fb      	strh	r3, [r7, #30]
 800124a:	2300      	movs	r3, #0
 800124c:	83bb      	strh	r3, [r7, #28]
        for (uint8_t x = 0; x < size; x++) {
 800124e:	2300      	movs	r3, #0
 8001250:	76fb      	strb	r3, [r7, #27]
 8001252:	e07e      	b.n	8001352 <getPenaltyScore+0x276>
            bool color = bb_getBit(modules, x, y);
 8001254:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001258:	7efb      	ldrb	r3, [r7, #27]
 800125a:	4619      	mov	r1, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff fa0a 	bl	8000676 <bb_getBit>
 8001262:	4603      	mov	r3, r0
 8001264:	74fb      	strb	r3, [r7, #19]

            // 2*2 blocks of modules having same color
            if (x > 0 && y > 0) {
 8001266:	7efb      	ldrb	r3, [r7, #27]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d035      	beq.n	80012d8 <getPenaltyScore+0x1fc>
 800126c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001270:	2b00      	cmp	r3, #0
 8001272:	d031      	beq.n	80012d8 <getPenaltyScore+0x1fc>
                bool colorUL = bb_getBit(modules, x - 1, y - 1);
 8001274:	7efb      	ldrb	r3, [r7, #27]
 8001276:	3b01      	subs	r3, #1
 8001278:	b2d9      	uxtb	r1, r3
 800127a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800127e:	3b01      	subs	r3, #1
 8001280:	b2db      	uxtb	r3, r3
 8001282:	461a      	mov	r2, r3
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff f9f6 	bl	8000676 <bb_getBit>
 800128a:	4603      	mov	r3, r0
 800128c:	74bb      	strb	r3, [r7, #18]
                bool colorUR = bb_getBit(modules, x, y - 1);
 800128e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001292:	3b01      	subs	r3, #1
 8001294:	b2da      	uxtb	r2, r3
 8001296:	7efb      	ldrb	r3, [r7, #27]
 8001298:	4619      	mov	r1, r3
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff f9eb 	bl	8000676 <bb_getBit>
 80012a0:	4603      	mov	r3, r0
 80012a2:	747b      	strb	r3, [r7, #17]
                bool colorL = bb_getBit(modules, x - 1, y);
 80012a4:	7efb      	ldrb	r3, [r7, #27]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80012ae:	4619      	mov	r1, r3
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff f9e0 	bl	8000676 <bb_getBit>
 80012b6:	4603      	mov	r3, r0
 80012b8:	743b      	strb	r3, [r7, #16]
                if (color == colorUL && color == colorUR && color == colorL) {
 80012ba:	7cfa      	ldrb	r2, [r7, #19]
 80012bc:	7cbb      	ldrb	r3, [r7, #18]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d10a      	bne.n	80012d8 <getPenaltyScore+0x1fc>
 80012c2:	7cfa      	ldrb	r2, [r7, #19]
 80012c4:	7c7b      	ldrb	r3, [r7, #17]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d106      	bne.n	80012d8 <getPenaltyScore+0x1fc>
 80012ca:	7cfa      	ldrb	r2, [r7, #19]
 80012cc:	7c3b      	ldrb	r3, [r7, #16]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d102      	bne.n	80012d8 <getPenaltyScore+0x1fc>
                    result += PENALTY_N2;
 80012d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d4:	3303      	adds	r3, #3
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            // Finder-like pattern in rows and columns
            bitsRow = ((bitsRow << 1) & 0x7FF) | color;
 80012d8:	8bfb      	ldrh	r3, [r7, #30]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	b21b      	sxth	r3, r3
 80012de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	7cfb      	ldrb	r3, [r7, #19]
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	83fb      	strh	r3, [r7, #30]
            bitsCol = ((bitsCol << 1) & 0x7FF) | bb_getBit(modules, y, x);
 80012ee:	8bbb      	ldrh	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012f8:	b21c      	sxth	r4, r3
 80012fa:	7efa      	ldrb	r2, [r7, #27]
 80012fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001300:	4619      	mov	r1, r3
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff f9b7 	bl	8000676 <bb_getBit>
 8001308:	4603      	mov	r3, r0
 800130a:	b21b      	sxth	r3, r3
 800130c:	4323      	orrs	r3, r4
 800130e:	b21b      	sxth	r3, r3
 8001310:	83bb      	strh	r3, [r7, #28]

            // Needs 11 bits accumulated
            if (x >= 10) {
 8001312:	7efb      	ldrb	r3, [r7, #27]
 8001314:	2b09      	cmp	r3, #9
 8001316:	d913      	bls.n	8001340 <getPenaltyScore+0x264>
                if (bitsRow == 0x05D || bitsRow == 0x5D0) {
 8001318:	8bfb      	ldrh	r3, [r7, #30]
 800131a:	2b5d      	cmp	r3, #93	; 0x5d
 800131c:	d003      	beq.n	8001326 <getPenaltyScore+0x24a>
 800131e:	8bfb      	ldrh	r3, [r7, #30]
 8001320:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8001324:	d102      	bne.n	800132c <getPenaltyScore+0x250>
                    result += PENALTY_N3;
 8001326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001328:	3328      	adds	r3, #40	; 0x28
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                if (bitsCol == 0x05D || bitsCol == 0x5D0) {
 800132c:	8bbb      	ldrh	r3, [r7, #28]
 800132e:	2b5d      	cmp	r3, #93	; 0x5d
 8001330:	d003      	beq.n	800133a <getPenaltyScore+0x25e>
 8001332:	8bbb      	ldrh	r3, [r7, #28]
 8001334:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8001338:	d102      	bne.n	8001340 <getPenaltyScore+0x264>
                    result += PENALTY_N3;
 800133a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133c:	3328      	adds	r3, #40	; 0x28
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            // Balance of black and white modules
            if (color) { black++; }
 8001340:	7cfb      	ldrb	r3, [r7, #19]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <getPenaltyScore+0x270>
 8001346:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001348:	3301      	adds	r3, #1
 800134a:	847b      	strh	r3, [r7, #34]	; 0x22
        for (uint8_t x = 0; x < size; x++) {
 800134c:	7efb      	ldrb	r3, [r7, #27]
 800134e:	3301      	adds	r3, #1
 8001350:	76fb      	strb	r3, [r7, #27]
 8001352:	7efa      	ldrb	r2, [r7, #27]
 8001354:	7dfb      	ldrb	r3, [r7, #23]
 8001356:	429a      	cmp	r2, r3
 8001358:	f4ff af7c 	bcc.w	8001254 <getPenaltyScore+0x178>
    for (uint8_t y = 0; y < size; y++) {
 800135c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001360:	3301      	adds	r3, #1
 8001362:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001366:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	429a      	cmp	r2, r3
 800136e:	f4ff af6a 	bcc.w	8001246 <getPenaltyScore+0x16a>
        }
    }

    // Find smallest k such that (45-5k)% <= dark/total <= (55+5k)%
    uint16_t total = size * size;
 8001372:	7dfb      	ldrb	r3, [r7, #23]
 8001374:	b29a      	uxth	r2, r3
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	b29b      	uxth	r3, r3
 800137a:	fb12 f303 	smulbb	r3, r2, r3
 800137e:	82bb      	strh	r3, [r7, #20]
    for (uint16_t k = 0; black * 20 < (9 - k) * total || black * 20 > (11 + k) * total; k++) {
 8001380:	2300      	movs	r3, #0
 8001382:	833b      	strh	r3, [r7, #24]
 8001384:	e005      	b.n	8001392 <getPenaltyScore+0x2b6>
        result += PENALTY_N4;
 8001386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001388:	330a      	adds	r3, #10
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint16_t k = 0; black * 20 < (9 - k) * total || black * 20 > (11 + k) * total; k++) {
 800138c:	8b3b      	ldrh	r3, [r7, #24]
 800138e:	3301      	adds	r3, #1
 8001390:	833b      	strh	r3, [r7, #24]
 8001392:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4619      	mov	r1, r3
 800139e:	8b3b      	ldrh	r3, [r7, #24]
 80013a0:	f1c3 0309 	rsb	r3, r3, #9
 80013a4:	8aba      	ldrh	r2, [r7, #20]
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	4299      	cmp	r1, r3
 80013ac:	dbeb      	blt.n	8001386 <getPenaltyScore+0x2aa>
 80013ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4619      	mov	r1, r3
 80013ba:	8b3b      	ldrh	r3, [r7, #24]
 80013bc:	330b      	adds	r3, #11
 80013be:	8aba      	ldrh	r2, [r7, #20]
 80013c0:	fb02 f303 	mul.w	r3, r2, r3
 80013c4:	4299      	cmp	r1, r3
 80013c6:	dcde      	bgt.n	8001386 <getPenaltyScore+0x2aa>
    }
    
    return result;
 80013c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3734      	adds	r7, #52	; 0x34
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}

080013d2 <rs_multiply>:


//#pragma mark - Reed-Solomon Generator

static uint8_t rs_multiply(uint8_t x, uint8_t y) {
 80013d2:	b480      	push	{r7}
 80013d4:	b085      	sub	sp, #20
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	460a      	mov	r2, r1
 80013dc:	71fb      	strb	r3, [r7, #7]
 80013de:	4613      	mov	r3, r2
 80013e0:	71bb      	strb	r3, [r7, #6]
    // Russian peasant multiplication
    // See: https://en.wikipedia.org/wiki/Ancient_Egyptian_multiplication
    uint16_t z = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	81fb      	strh	r3, [r7, #14]
    for (int8_t i = 7; i >= 0; i--) {
 80013e6:	2307      	movs	r3, #7
 80013e8:	737b      	strb	r3, [r7, #13]
 80013ea:	e02c      	b.n	8001446 <rs_multiply+0x74>
        z = (z << 1) ^ ((z >> 7) * 0x11D);
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	09db      	lsrs	r3, r3, #7
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4619      	mov	r1, r3
 80013fa:	00c9      	lsls	r1, r1, #3
 80013fc:	4419      	add	r1, r3
 80013fe:	0049      	lsls	r1, r1, #1
 8001400:	440b      	add	r3, r1
 8001402:	4619      	mov	r1, r3
 8001404:	0109      	lsls	r1, r1, #4
 8001406:	1acb      	subs	r3, r1, r3
 8001408:	b29b      	uxth	r3, r3
 800140a:	b21b      	sxth	r3, r3
 800140c:	4053      	eors	r3, r2
 800140e:	b21b      	sxth	r3, r3
 8001410:	81fb      	strh	r3, [r7, #14]
        z ^= ((y >> i) & 1) * x;
 8001412:	79ba      	ldrb	r2, [r7, #6]
 8001414:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001418:	fa42 f303 	asr.w	r3, r2, r3
 800141c:	b29b      	uxth	r3, r3
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	b29a      	uxth	r2, r3
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	b29b      	uxth	r3, r3
 8001428:	fb12 f303 	smulbb	r3, r2, r3
 800142c:	b29b      	uxth	r3, r3
 800142e:	b21a      	sxth	r2, r3
 8001430:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001434:	4053      	eors	r3, r2
 8001436:	b21b      	sxth	r3, r3
 8001438:	81fb      	strh	r3, [r7, #14]
    for (int8_t i = 7; i >= 0; i--) {
 800143a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	3b01      	subs	r3, #1
 8001442:	b2db      	uxtb	r3, r3
 8001444:	737b      	strb	r3, [r7, #13]
 8001446:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800144a:	2b00      	cmp	r3, #0
 800144c:	dace      	bge.n	80013ec <rs_multiply+0x1a>
    }
    return z;
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	b2db      	uxtb	r3, r3
}
 8001452:	4618      	mov	r0, r3
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <rs_init>:

static void rs_init(uint8_t degree, uint8_t *coeff) {
 800145e:	b590      	push	{r4, r7, lr}
 8001460:	b085      	sub	sp, #20
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	6039      	str	r1, [r7, #0]
 8001468:	71fb      	strb	r3, [r7, #7]
    memset(coeff, 0, degree);
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	461a      	mov	r2, r3
 800146e:	2100      	movs	r1, #0
 8001470:	6838      	ldr	r0, [r7, #0]
 8001472:	f004 fd89 	bl	8005f88 <memset>
    coeff[degree - 1] = 1;
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	3b01      	subs	r3, #1
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	4413      	add	r3, r2
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
    
    // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),
    // drop the highest term, and store the rest of the coefficients in order of descending powers.
    // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).
    uint16_t root = 1;
 8001482:	2301      	movs	r3, #1
 8001484:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < degree; i++) {
 8001486:	2300      	movs	r3, #0
 8001488:	737b      	strb	r3, [r7, #13]
 800148a:	e040      	b.n	800150e <rs_init+0xb0>
        // Multiply the current product by (x - r^i)
        for (uint8_t j = 0; j < degree; j++) {
 800148c:	2300      	movs	r3, #0
 800148e:	733b      	strb	r3, [r7, #12]
 8001490:	e023      	b.n	80014da <rs_init+0x7c>
            coeff[j] = rs_multiply(coeff[j], root);
 8001492:	7b3b      	ldrb	r3, [r7, #12]
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	4413      	add	r3, r2
 8001498:	7818      	ldrb	r0, [r3, #0]
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	b2d9      	uxtb	r1, r3
 800149e:	7b3b      	ldrb	r3, [r7, #12]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	18d4      	adds	r4, r2, r3
 80014a4:	f7ff ff95 	bl	80013d2 <rs_multiply>
 80014a8:	4603      	mov	r3, r0
 80014aa:	7023      	strb	r3, [r4, #0]
            if (j + 1 < degree) {
 80014ac:	7b3b      	ldrb	r3, [r7, #12]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	da0e      	bge.n	80014d4 <rs_init+0x76>
                coeff[j] ^= coeff[j + 1];
 80014b6:	7b3b      	ldrb	r3, [r7, #12]
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	7819      	ldrb	r1, [r3, #0]
 80014be:	7b3b      	ldrb	r3, [r7, #12]
 80014c0:	3301      	adds	r3, #1
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	7b3b      	ldrb	r3, [r7, #12]
 80014ca:	6838      	ldr	r0, [r7, #0]
 80014cc:	4403      	add	r3, r0
 80014ce:	404a      	eors	r2, r1
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < degree; j++) {
 80014d4:	7b3b      	ldrb	r3, [r7, #12]
 80014d6:	3301      	adds	r3, #1
 80014d8:	733b      	strb	r3, [r7, #12]
 80014da:	7b3a      	ldrb	r2, [r7, #12]
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d3d7      	bcc.n	8001492 <rs_init+0x34>
            }
        }
        root = (root << 1) ^ ((root >> 7) * 0x11D);  // Multiply by 0x02 mod GF(2^8/0x11D)
 80014e2:	89fb      	ldrh	r3, [r7, #14]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	89fb      	ldrh	r3, [r7, #14]
 80014ea:	09db      	lsrs	r3, r3, #7
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4619      	mov	r1, r3
 80014f0:	00c9      	lsls	r1, r1, #3
 80014f2:	4419      	add	r1, r3
 80014f4:	0049      	lsls	r1, r1, #1
 80014f6:	440b      	add	r3, r1
 80014f8:	4619      	mov	r1, r3
 80014fa:	0109      	lsls	r1, r1, #4
 80014fc:	1acb      	subs	r3, r1, r3
 80014fe:	b29b      	uxth	r3, r3
 8001500:	b21b      	sxth	r3, r3
 8001502:	4053      	eors	r3, r2
 8001504:	b21b      	sxth	r3, r3
 8001506:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < degree; i++) {
 8001508:	7b7b      	ldrb	r3, [r7, #13]
 800150a:	3301      	adds	r3, #1
 800150c:	737b      	strb	r3, [r7, #13]
 800150e:	7b7a      	ldrb	r2, [r7, #13]
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	429a      	cmp	r2, r3
 8001514:	d3ba      	bcc.n	800148c <rs_init+0x2e>
    }
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bd90      	pop	{r4, r7, pc}

08001520 <rs_getRemainder>:

static void rs_getRemainder(uint8_t degree, uint8_t *coeff, uint8_t *data, uint8_t length, uint8_t *result, uint8_t stride) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	461a      	mov	r2, r3
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	4613      	mov	r3, r2
 8001532:	73bb      	strb	r3, [r7, #14]
    // Compute the remainder by performing polynomial division
    
    //for (uint8_t i = 0; i < degree; i++) { result[] = 0; }
    //memset(result, 0, degree);
    
    for (uint8_t i = 0; i < length; i++) {
 8001534:	2300      	movs	r3, #0
 8001536:	75fb      	strb	r3, [r7, #23]
 8001538:	e05b      	b.n	80015f2 <rs_getRemainder+0xd2>
        uint8_t factor = data[i] ^ result[0];
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4053      	eors	r3, r2
 8001548:	753b      	strb	r3, [r7, #20]
        for (uint8_t j = 1; j < degree; j++) {
 800154a:	2301      	movs	r3, #1
 800154c:	75bb      	strb	r3, [r7, #22]
 800154e:	e015      	b.n	800157c <rs_getRemainder+0x5c>
            result[(j - 1) * stride] = result[j * stride];
 8001550:	7dbb      	ldrb	r3, [r7, #22]
 8001552:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	461a      	mov	r2, r3
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	441a      	add	r2, r3
 8001560:	7dbb      	ldrb	r3, [r7, #22]
 8001562:	3b01      	subs	r3, #1
 8001564:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4619      	mov	r1, r3
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	440b      	add	r3, r1
 8001572:	7812      	ldrb	r2, [r2, #0]
 8001574:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 1; j < degree; j++) {
 8001576:	7dbb      	ldrb	r3, [r7, #22]
 8001578:	3301      	adds	r3, #1
 800157a:	75bb      	strb	r3, [r7, #22]
 800157c:	7dba      	ldrb	r2, [r7, #22]
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	429a      	cmp	r2, r3
 8001582:	d3e5      	bcc.n	8001550 <rs_getRemainder+0x30>
        }
        result[(degree - 1) * stride] = 0;
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	3b01      	subs	r3, #1
 8001588:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	461a      	mov	r2, r3
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	4413      	add	r3, r2
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
        
        for (uint8_t j = 0; j < degree; j++) {
 800159a:	2300      	movs	r3, #0
 800159c:	757b      	strb	r3, [r7, #21]
 800159e:	e021      	b.n	80015e4 <rs_getRemainder+0xc4>
            result[j * stride] ^= rs_multiply(coeff[j], factor);
 80015a0:	7d7b      	ldrb	r3, [r7, #21]
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	7d3a      	ldrb	r2, [r7, #20]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff10 	bl	80013d2 <rs_multiply>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4618      	mov	r0, r3
 80015b6:	7d7b      	ldrb	r3, [r7, #21]
 80015b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	4413      	add	r3, r2
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	7d7b      	ldrb	r3, [r7, #21]
 80015ca:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80015ce:	fb01 f303 	mul.w	r3, r1, r3
 80015d2:	4619      	mov	r1, r3
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	440b      	add	r3, r1
 80015d8:	4042      	eors	r2, r0
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < degree; j++) {
 80015de:	7d7b      	ldrb	r3, [r7, #21]
 80015e0:	3301      	adds	r3, #1
 80015e2:	757b      	strb	r3, [r7, #21]
 80015e4:	7d7a      	ldrb	r2, [r7, #21]
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d3d9      	bcc.n	80015a0 <rs_getRemainder+0x80>
    for (uint8_t i = 0; i < length; i++) {
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	3301      	adds	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
 80015f2:	7dfa      	ldrb	r2, [r7, #23]
 80015f4:	7bbb      	ldrb	r3, [r7, #14]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d39f      	bcc.n	800153a <rs_getRemainder+0x1a>
        }
    }
}
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <encodeDataCodewords>:



//#pragma mark - QrCode

static int8_t encodeDataCodewords(BitBucket *dataCodewords, const uint8_t *text, uint16_t length, uint8_t version) {
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	4611      	mov	r1, r2
 8001610:	461a      	mov	r2, r3
 8001612:	460b      	mov	r3, r1
 8001614:	80fb      	strh	r3, [r7, #6]
 8001616:	4613      	mov	r3, r2
 8001618:	717b      	strb	r3, [r7, #5]
    int8_t mode = MODE_BYTE;
 800161a:	2302      	movs	r3, #2
 800161c:	77fb      	strb	r3, [r7, #31]
    
    if (isNumeric((char*)text, length)) {
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	4619      	mov	r1, r3
 8001622:	68b8      	ldr	r0, [r7, #8]
 8001624:	f7fe fe8b 	bl	800033e <isNumeric>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d050      	beq.n	80016d0 <encodeDataCodewords+0xcc>
        mode = MODE_NUMERIC;
 800162e:	2300      	movs	r3, #0
 8001630:	77fb      	strb	r3, [r7, #31]
        bb_appendBits(dataCodewords, 1 << MODE_NUMERIC, 4);
 8001632:	2204      	movs	r2, #4
 8001634:	2101      	movs	r1, #1
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7fe ff32 	bl	80004a0 <bb_appendBits>
        bb_appendBits(dataCodewords, length, getModeBits(version, MODE_NUMERIC));
 800163c:	88fc      	ldrh	r4, [r7, #6]
 800163e:	797b      	ldrb	r3, [r7, #5]
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fe9c 	bl	8000380 <getModeBits>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	4621      	mov	r1, r4
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7fe ff26 	bl	80004a0 <bb_appendBits>

        uint16_t accumData = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	83bb      	strh	r3, [r7, #28]
        uint8_t accumCount = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	76fb      	strb	r3, [r7, #27]
        for (uint16_t i = 0; i < length; i++) {
 800165c:	2300      	movs	r3, #0
 800165e:	833b      	strh	r3, [r7, #24]
 8001660:	e021      	b.n	80016a6 <encodeDataCodewords+0xa2>
            accumData = accumData * 10 + ((char)(text[i]) - '0');
 8001662:	8bbb      	ldrh	r3, [r7, #28]
 8001664:	461a      	mov	r2, r3
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	4413      	add	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	b29a      	uxth	r2, r3
 800166e:	8b3b      	ldrh	r3, [r7, #24]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	440b      	add	r3, r1
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4413      	add	r3, r2
 800167a:	b29b      	uxth	r3, r3
 800167c:	3b30      	subs	r3, #48	; 0x30
 800167e:	83bb      	strh	r3, [r7, #28]
            accumCount++;
 8001680:	7efb      	ldrb	r3, [r7, #27]
 8001682:	3301      	adds	r3, #1
 8001684:	76fb      	strb	r3, [r7, #27]
            if (accumCount == 3) {
 8001686:	7efb      	ldrb	r3, [r7, #27]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d109      	bne.n	80016a0 <encodeDataCodewords+0x9c>
                bb_appendBits(dataCodewords, accumData, 10);
 800168c:	8bbb      	ldrh	r3, [r7, #28]
 800168e:	220a      	movs	r2, #10
 8001690:	4619      	mov	r1, r3
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f7fe ff04 	bl	80004a0 <bb_appendBits>
                accumData = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	83bb      	strh	r3, [r7, #28]
                accumCount = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	76fb      	strb	r3, [r7, #27]
        for (uint16_t i = 0; i < length; i++) {
 80016a0:	8b3b      	ldrh	r3, [r7, #24]
 80016a2:	3301      	adds	r3, #1
 80016a4:	833b      	strh	r3, [r7, #24]
 80016a6:	8b3a      	ldrh	r2, [r7, #24]
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d3d9      	bcc.n	8001662 <encodeDataCodewords+0x5e>
            }
        }
        
        // 1 or 2 digits remaining
        if (accumCount > 0) {
 80016ae:	7efb      	ldrb	r3, [r7, #27]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 8087 	beq.w	80017c4 <encodeDataCodewords+0x1c0>
            bb_appendBits(dataCodewords, accumData, accumCount * 3 + 1);
 80016b6:	8bb9      	ldrh	r1, [r7, #28]
 80016b8:	7efb      	ldrb	r3, [r7, #27]
 80016ba:	461a      	mov	r2, r3
 80016bc:	0052      	lsls	r2, r2, #1
 80016be:	4413      	add	r3, r2
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f7fe fee9 	bl	80004a0 <bb_appendBits>
 80016ce:	e079      	b.n	80017c4 <encodeDataCodewords+0x1c0>
        }
        
    } else if (isAlphanumeric((char*)text, length)) {
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	4619      	mov	r1, r3
 80016d4:	68b8      	ldr	r0, [r7, #8]
 80016d6:	f7fe fe13 	bl	8000300 <isAlphanumeric>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d04d      	beq.n	800177c <encodeDataCodewords+0x178>
        mode = MODE_ALPHANUMERIC;
 80016e0:	2301      	movs	r3, #1
 80016e2:	77fb      	strb	r3, [r7, #31]
        bb_appendBits(dataCodewords, 1 << MODE_ALPHANUMERIC, 4);
 80016e4:	2204      	movs	r2, #4
 80016e6:	2102      	movs	r1, #2
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f7fe fed9 	bl	80004a0 <bb_appendBits>
        bb_appendBits(dataCodewords, length, getModeBits(version, MODE_ALPHANUMERIC));
 80016ee:	88fc      	ldrh	r4, [r7, #6]
 80016f0:	797b      	ldrb	r3, [r7, #5]
 80016f2:	2101      	movs	r1, #1
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe fe43 	bl	8000380 <getModeBits>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	4621      	mov	r1, r4
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f7fe fecd 	bl	80004a0 <bb_appendBits>

        uint16_t accumData = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	82fb      	strh	r3, [r7, #22]
        uint8_t accumCount = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	757b      	strb	r3, [r7, #21]
        for (uint16_t i = 0; i  < length; i++) {
 800170e:	2300      	movs	r3, #0
 8001710:	827b      	strh	r3, [r7, #18]
 8001712:	e025      	b.n	8001760 <encodeDataCodewords+0x15c>
            accumData = accumData * 45 + getAlphanumeric((char)(text[i]));
 8001714:	8afb      	ldrh	r3, [r7, #22]
 8001716:	461a      	mov	r2, r3
 8001718:	0052      	lsls	r2, r2, #1
 800171a:	4413      	add	r3, r2
 800171c:	461a      	mov	r2, r3
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	b29c      	uxth	r4, r3
 8001724:	8a7b      	ldrh	r3, [r7, #18]
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	4413      	add	r3, r2
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fd75 	bl	800021c <getAlphanumeric>
 8001732:	4603      	mov	r3, r0
 8001734:	b29b      	uxth	r3, r3
 8001736:	4423      	add	r3, r4
 8001738:	82fb      	strh	r3, [r7, #22]
            accumCount++;
 800173a:	7d7b      	ldrb	r3, [r7, #21]
 800173c:	3301      	adds	r3, #1
 800173e:	757b      	strb	r3, [r7, #21]
            if (accumCount == 2) {
 8001740:	7d7b      	ldrb	r3, [r7, #21]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d109      	bne.n	800175a <encodeDataCodewords+0x156>
                bb_appendBits(dataCodewords, accumData, 11);
 8001746:	8afb      	ldrh	r3, [r7, #22]
 8001748:	220b      	movs	r2, #11
 800174a:	4619      	mov	r1, r3
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7fe fea7 	bl	80004a0 <bb_appendBits>
                accumData = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	82fb      	strh	r3, [r7, #22]
                accumCount = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	757b      	strb	r3, [r7, #21]
        for (uint16_t i = 0; i  < length; i++) {
 800175a:	8a7b      	ldrh	r3, [r7, #18]
 800175c:	3301      	adds	r3, #1
 800175e:	827b      	strh	r3, [r7, #18]
 8001760:	8a7a      	ldrh	r2, [r7, #18]
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	429a      	cmp	r2, r3
 8001766:	d3d5      	bcc.n	8001714 <encodeDataCodewords+0x110>
            }
        }
        
        // 1 character remaining
        if (accumCount > 0) {
 8001768:	7d7b      	ldrb	r3, [r7, #21]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d02a      	beq.n	80017c4 <encodeDataCodewords+0x1c0>
            bb_appendBits(dataCodewords, accumData, 6);
 800176e:	8afb      	ldrh	r3, [r7, #22]
 8001770:	2206      	movs	r2, #6
 8001772:	4619      	mov	r1, r3
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f7fe fe93 	bl	80004a0 <bb_appendBits>
 800177a:	e023      	b.n	80017c4 <encodeDataCodewords+0x1c0>
        }
        
    } else {
        bb_appendBits(dataCodewords, 1 << MODE_BYTE, 4);
 800177c:	2204      	movs	r2, #4
 800177e:	2104      	movs	r1, #4
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f7fe fe8d 	bl	80004a0 <bb_appendBits>
        bb_appendBits(dataCodewords, length, getModeBits(version, MODE_BYTE));
 8001786:	88fc      	ldrh	r4, [r7, #6]
 8001788:	797b      	ldrb	r3, [r7, #5]
 800178a:	2102      	movs	r1, #2
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fdf7 	bl	8000380 <getModeBits>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	4621      	mov	r1, r4
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f7fe fe81 	bl	80004a0 <bb_appendBits>
        for (uint16_t i = 0; i < length; i++) {
 800179e:	2300      	movs	r3, #0
 80017a0:	823b      	strh	r3, [r7, #16]
 80017a2:	e00b      	b.n	80017bc <encodeDataCodewords+0x1b8>
            bb_appendBits(dataCodewords, (char)(text[i]), 8);
 80017a4:	8a3b      	ldrh	r3, [r7, #16]
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	4413      	add	r3, r2
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2208      	movs	r2, #8
 80017ae:	4619      	mov	r1, r3
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f7fe fe75 	bl	80004a0 <bb_appendBits>
        for (uint16_t i = 0; i < length; i++) {
 80017b6:	8a3b      	ldrh	r3, [r7, #16]
 80017b8:	3301      	adds	r3, #1
 80017ba:	823b      	strh	r3, [r7, #16]
 80017bc:	8a3a      	ldrh	r2, [r7, #16]
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d3ef      	bcc.n	80017a4 <encodeDataCodewords+0x1a0>
        }
    }
    
    //bb_setBits(dataCodewords, length, 4, getModeBits(version, mode));
    
    return mode;
 80017c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3724      	adds	r7, #36	; 0x24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <performErrorCorrection>:

static void performErrorCorrection(uint8_t version, uint8_t ecc, BitBucket *data) {
 80017d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017d4:	b093      	sub	sp, #76	; 0x4c
 80017d6:	af02      	add	r7, sp, #8
 80017d8:	4603      	mov	r3, r0
 80017da:	60ba      	str	r2, [r7, #8]
 80017dc:	73fb      	strb	r3, [r7, #15]
 80017de:	460b      	mov	r3, r1
 80017e0:	73bb      	strb	r3, [r7, #14]
 80017e2:	466b      	mov	r3, sp
 80017e4:	461e      	mov	r6, r3
    
    // See: http://www.thonky.com/qr-code-tutorial/structure-final-message
    
#if LOCK_VERSION == 0
    uint8_t numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecc][version - 1];
 80017e6:	7bba      	ldrb	r2, [r7, #14]
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	1e59      	subs	r1, r3, #1
 80017ec:	48b4      	ldr	r0, [pc, #720]	; (8001ac0 <performErrorCorrection+0x2f0>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4403      	add	r3, r0
 80017f8:	440b      	add	r3, r1
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t totalEcc = NUM_ERROR_CORRECTION_CODEWORDS[ecc][version - 1];
 8001800:	7bba      	ldrb	r2, [r7, #14]
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	1e59      	subs	r1, r3, #1
 8001806:	48af      	ldr	r0, [pc, #700]	; (8001ac4 <performErrorCorrection+0x2f4>)
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001816:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t moduleCount = NUM_RAW_DATA_MODULES[version - 1];
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	3b01      	subs	r3, #1
 800181c:	4aaa      	ldr	r2, [pc, #680]	; (8001ac8 <performErrorCorrection+0x2f8>)
 800181e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001822:	853b      	strh	r3, [r7, #40]	; 0x28
    uint8_t numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecc];
    uint16_t totalEcc = NUM_ERROR_CORRECTION_CODEWORDS[ecc];
    uint16_t moduleCount = NUM_RAW_DATA_MODULES;
#endif
    
    uint8_t blockEccLen = totalEcc / numBlocks;
 8001824:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001826:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800182a:	fb92 f3f3 	sdiv	r3, r2, r3
 800182e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t numShortBlocks = numBlocks - moduleCount / 8 % numBlocks;
 8001832:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001834:	08db      	lsrs	r3, r3, #3
 8001836:	b29b      	uxth	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800183e:	fb92 f1f3 	sdiv	r1, r2, r3
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t shortBlockLen = moduleCount / 8 / numBlocks;
 8001854:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001856:	08db      	lsrs	r3, r3, #3
 8001858:	b29b      	uxth	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001860:	fb92 f3f3 	sdiv	r3, r2, r3
 8001864:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    
    uint8_t shortDataBlockLen = shortBlockLen - blockEccLen;
 8001868:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800186c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    
    uint8_t result[data->capacityBytes];
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	8899      	ldrh	r1, [r3, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	3b01      	subs	r3, #1
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	b28b      	uxth	r3, r1
 8001882:	2200      	movs	r2, #0
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	00c3      	lsls	r3, r0, #3
 8001894:	6838      	ldr	r0, [r7, #0]
 8001896:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800189a:	6838      	ldr	r0, [r7, #0]
 800189c:	00c2      	lsls	r2, r0, #3
 800189e:	b28b      	uxth	r3, r1
 80018a0:	2200      	movs	r2, #0
 80018a2:	469a      	mov	sl, r3
 80018a4:	4693      	mov	fp, r2
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018ba:	460b      	mov	r3, r1
 80018bc:	3307      	adds	r3, #7
 80018be:	08db      	lsrs	r3, r3, #3
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	ebad 0d03 	sub.w	sp, sp, r3
 80018c6:	ab02      	add	r3, sp, #8
 80018c8:	3300      	adds	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
    memset(result, 0, sizeof(result));
 80018cc:	460b      	mov	r3, r1
 80018ce:	461a      	mov	r2, r3
 80018d0:	2100      	movs	r1, #0
 80018d2:	69f8      	ldr	r0, [r7, #28]
 80018d4:	f004 fb58 	bl	8005f88 <memset>
    
    uint8_t coeff[blockEccLen];
 80018d8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80018dc:	460b      	mov	r3, r1
 80018de:	3b01      	subs	r3, #1
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	b2cb      	uxtb	r3, r1
 80018e4:	2200      	movs	r2, #0
 80018e6:	4698      	mov	r8, r3
 80018e8:	4691      	mov	r9, r2
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018fe:	b2cb      	uxtb	r3, r1
 8001900:	2200      	movs	r2, #0
 8001902:	461c      	mov	r4, r3
 8001904:	4615      	mov	r5, r2
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	00eb      	lsls	r3, r5, #3
 8001910:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001914:	00e2      	lsls	r2, r4, #3
 8001916:	460b      	mov	r3, r1
 8001918:	3307      	adds	r3, #7
 800191a:	08db      	lsrs	r3, r3, #3
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	ebad 0d03 	sub.w	sp, sp, r3
 8001922:	ab02      	add	r3, sp, #8
 8001924:	3300      	adds	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
    rs_init(blockEccLen, coeff);
 8001928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800192c:	6979      	ldr	r1, [r7, #20]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fd95 	bl	800145e <rs_init>
    
    uint16_t offset = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	867b      	strh	r3, [r7, #50]	; 0x32
    uint8_t *dataBytes = data->data;
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
    
    
    // Interleave all short blocks
    for (uint8_t i = 0; i < shortDataBlockLen; i++) {
 800193e:	2300      	movs	r3, #0
 8001940:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001944:	e035      	b.n	80019b2 <performErrorCorrection+0x1e2>
        uint16_t index = i;
 8001946:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800194a:	877b      	strh	r3, [r7, #58]	; 0x3a
        uint8_t stride = shortDataBlockLen;
 800194c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001950:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 8001954:	2300      	movs	r3, #0
 8001956:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800195a:	e01f      	b.n	800199c <performErrorCorrection+0x1cc>
            result[offset++] = dataBytes[index];
 800195c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800195e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001960:	441a      	add	r2, r3
 8001962:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001964:	1c59      	adds	r1, r3, #1
 8001966:	8679      	strh	r1, [r7, #50]	; 0x32
 8001968:	4619      	mov	r1, r3
 800196a:	7812      	ldrb	r2, [r2, #0]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	545a      	strb	r2, [r3, r1]
            
#if LOCK_VERSION == 0 || LOCK_VERSION >= 5
            if (blockNum == numShortBlocks) { stride++; }
 8001970:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001974:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001978:	429a      	cmp	r2, r3
 800197a:	d104      	bne.n	8001986 <performErrorCorrection+0x1b6>
 800197c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001980:	3301      	adds	r3, #1
 8001982:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
#endif
            index += stride;
 8001986:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800198a:	b29a      	uxth	r2, r3
 800198c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800198e:	4413      	add	r3, r2
 8001990:	877b      	strh	r3, [r7, #58]	; 0x3a
        for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 8001992:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001996:	3301      	adds	r3, #1
 8001998:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800199c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80019a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d3d9      	bcc.n	800195c <performErrorCorrection+0x18c>
    for (uint8_t i = 0; i < shortDataBlockLen; i++) {
 80019a8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80019ac:	3301      	adds	r3, #1
 80019ae:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80019b2:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80019b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d3c3      	bcc.n	8001946 <performErrorCorrection+0x176>
    
    // Version less than 5 only have short blocks
#if LOCK_VERSION == 0 || LOCK_VERSION >= 5
    {
        // Interleave long blocks
        uint16_t index = shortDataBlockLen * (numShortBlocks + 1);
 80019be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019c8:	3301      	adds	r3, #1
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	fb12 f303 	smulbb	r3, r2, r3
 80019d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        uint8_t stride = shortDataBlockLen;
 80019d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019d6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        for (uint8_t blockNum = 0; blockNum < numBlocks - numShortBlocks; blockNum++) {
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80019e0:	e01d      	b.n	8001a1e <performErrorCorrection+0x24e>
            result[offset++] = dataBytes[index];
 80019e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019e6:	441a      	add	r2, r3
 80019e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80019ea:	1c59      	adds	r1, r3, #1
 80019ec:	8679      	strh	r1, [r7, #50]	; 0x32
 80019ee:	4619      	mov	r1, r3
 80019f0:	7812      	ldrb	r2, [r2, #0]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	545a      	strb	r2, [r3, r1]
            
            if (blockNum == 0) { stride++; }
 80019f6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d104      	bne.n	8001a08 <performErrorCorrection+0x238>
 80019fe:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001a02:	3301      	adds	r3, #1
 8001a04:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            index += stride;
 8001a08:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001a10:	4413      	add	r3, r2
 8001a12:	87fb      	strh	r3, [r7, #62]	; 0x3e
        for (uint8_t blockNum = 0; blockNum < numBlocks - numShortBlocks; blockNum++) {
 8001a14:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8001a1e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001a22:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8001a26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a2a:	1acb      	subs	r3, r1, r3
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbd8      	blt.n	80019e2 <performErrorCorrection+0x212>
        }
    }
#endif
    
    // Add all ecc blocks, interleaved
    uint8_t blockSize = shortDataBlockLen;
 8001a30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001a3e:	e027      	b.n	8001a90 <performErrorCorrection+0x2c0>
        
#if LOCK_VERSION == 0 || LOCK_VERSION >= 5
        if (blockNum == numShortBlocks) { blockSize++; }
 8001a40:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001a44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d104      	bne.n	8001a56 <performErrorCorrection+0x286>
 8001a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a50:	3301      	adds	r3, #1
 8001a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif
        rs_getRemainder(blockEccLen, coeff, dataBytes, blockSize, &result[offset + blockNum], numBlocks);
 8001a56:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001a58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a5c:	4413      	add	r3, r2
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	4413      	add	r3, r2
 8001a62:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8001a66:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8001a6a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001a6e:	9201      	str	r2, [sp, #4]
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	460b      	mov	r3, r1
 8001a74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a76:	6979      	ldr	r1, [r7, #20]
 8001a78:	f7ff fd52 	bl	8001520 <rs_getRemainder>
        dataBytes += blockSize;
 8001a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a82:	4413      	add	r3, r2
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
    for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 8001a86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001a90:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001a94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d3d1      	bcc.n	8001a40 <performErrorCorrection+0x270>
    }
    
    memcpy(data->data, result, data->capacityBytes);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	6898      	ldr	r0, [r3, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	889b      	ldrh	r3, [r3, #4]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	69f9      	ldr	r1, [r7, #28]
 8001aa8:	f004 fa60 	bl	8005f6c <memcpy>
    data->bitOffsetOrWidth = moduleCount;
 8001aac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	46b5      	mov	sp, r6
}
 8001ab4:	bf00      	nop
 8001ab6:	3744      	adds	r7, #68	; 0x44
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001abe:	bf00      	nop
 8001ac0:	08006158 	.word	0x08006158
 8001ac4:	08006018 	.word	0x08006018
 8001ac8:	080061f8 	.word	0x080061f8

08001acc <qrcode_getBufferSize>:
static const uint8_t ECC_FORMAT_BITS = (0x02 << 6) | (0x03 << 4) | (0x00 << 2) | (0x01 << 0);


//#pragma mark - Public QRCode functions

uint16_t qrcode_getBufferSize(uint8_t version) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
    return bb_getGridSizeBytes(4 * version + 17);
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	3311      	adds	r3, #17
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fc7f 	bl	80003e4 <bb_getGridSizeBytes>
 8001ae6:	4603      	mov	r3, r0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <qrcode_initBytes>:

// @TODO: Return error if data is too big.
int8_t qrcode_initBytes(QRCode *qrcode, uint8_t *modules, uint8_t version, uint8_t ecc, uint8_t *data, uint16_t length) {
 8001af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001af4:	b09d      	sub	sp, #116	; 0x74
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6178      	str	r0, [r7, #20]
 8001afa:	6139      	str	r1, [r7, #16]
 8001afc:	4611      	mov	r1, r2
 8001afe:	461a      	mov	r2, r3
 8001b00:	460b      	mov	r3, r1
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	4613      	mov	r3, r2
 8001b06:	73bb      	strb	r3, [r7, #14]
 8001b08:	466b      	mov	r3, sp
 8001b0a:	60bb      	str	r3, [r7, #8]
    uint8_t size = version * 4 + 17;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	3311      	adds	r3, #17
 8001b14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    qrcode->version = version;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	701a      	strb	r2, [r3, #0]
    qrcode->size = size;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001b24:	705a      	strb	r2, [r3, #1]
    qrcode->ecc = ecc;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	7bba      	ldrb	r2, [r7, #14]
 8001b2a:	709a      	strb	r2, [r3, #2]
    qrcode->modules = modules;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	609a      	str	r2, [r3, #8]
    
    uint8_t eccFormatBits = (ECC_FORMAT_BITS >> (2 * ecc)) & 0x03;
 8001b32:	23b1      	movs	r3, #177	; 0xb1
 8001b34:	461a      	mov	r2, r3
 8001b36:	7bbb      	ldrb	r3, [r7, #14]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa42 f303 	asr.w	r3, r2, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    
#if LOCK_VERSION == 0
    uint16_t moduleCount = NUM_RAW_DATA_MODULES[version - 1];
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	4aac      	ldr	r2, [pc, #688]	; (8001e00 <qrcode_initBytes+0x310>)
 8001b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b52:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint16_t dataCapacity = moduleCount / 8 - NUM_ERROR_CORRECTION_CODEWORDS[eccFormatBits][version - 1];
 8001b56:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001b5a:	08db      	lsrs	r3, r3, #3
 8001b5c:	b299      	uxth	r1, r3
 8001b5e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	1e58      	subs	r0, r3, #1
 8001b66:	4ea7      	ldr	r6, [pc, #668]	; (8001e04 <qrcode_initBytes+0x314>)
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4403      	add	r3, r0
 8001b72:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8001b76:	1acb      	subs	r3, r1, r3
 8001b78:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    uint16_t moduleCount = NUM_RAW_DATA_MODULES;
    uint16_t dataCapacity = moduleCount / 8 - NUM_ERROR_CORRECTION_CODEWORDS[eccFormatBits];
#endif
    
    struct BitBucket codewords;
    uint8_t codewordBytes[bb_getBufferSizeBytes(moduleCount)];
 8001b7c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fc44 	bl	800040e <bb_getBufferSizeBytes>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	657b      	str	r3, [r7, #84]	; 0x54
 8001b90:	b28b      	uxth	r3, r1
 8001b92:	2200      	movs	r2, #0
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	00c3      	lsls	r3, r0, #3
 8001ba4:	6838      	ldr	r0, [r7, #0]
 8001ba6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001baa:	6838      	ldr	r0, [r7, #0]
 8001bac:	00c2      	lsls	r2, r0, #3
 8001bae:	b28b      	uxth	r3, r1
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	469a      	mov	sl, r3
 8001bb4:	4693      	mov	fp, r2
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001bc2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001bc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001bca:	460b      	mov	r3, r1
 8001bcc:	3307      	adds	r3, #7
 8001bce:	08db      	lsrs	r3, r3, #3
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	ebad 0d03 	sub.w	sp, sp, r3
 8001bd6:	466b      	mov	r3, sp
 8001bd8:	3300      	adds	r3, #0
 8001bda:	653b      	str	r3, [r7, #80]	; 0x50
    bb_initBuffer(&codewords, codewordBytes, (int32_t)sizeof(codewordBytes));
 8001bdc:	460a      	mov	r2, r1
 8001bde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001be2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fc20 	bl	800042a <bb_initBuffer>
    
    // Place the data code words into the buffer
    int8_t mode = encodeDataCodewords(&codewords, data, length, version);
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8001bf0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001bf4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001bf8:	f7ff fd04 	bl	8001604 <encodeDataCodewords>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
    if (mode < 0) { return -1; }
 8001c02:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	da02      	bge.n	8001c10 <qrcode_initBytes+0x120>
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	e0ef      	b.n	8001df0 <qrcode_initBytes+0x300>
    qrcode->mode = mode;
 8001c10:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	70da      	strb	r2, [r3, #3]
    
    // Add terminator and pad up to a byte if applicable
    uint32_t padding = (dataCapacity * 8) - codewords.bitOffsetOrWidth;
 8001c18:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	663b      	str	r3, [r7, #96]	; 0x60
    if (padding > 4) { padding = 4; }
 8001c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d901      	bls.n	8001c30 <qrcode_initBytes+0x140>
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	663b      	str	r3, [r7, #96]	; 0x60
    bb_appendBits(&codewords, 0, padding);
 8001c30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc30 	bl	80004a0 <bb_appendBits>
    bb_appendBits(&codewords, 0, (8 - codewords.bitOffsetOrWidth % 8) % 8);
 8001c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	425b      	negs	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc23 	bl	80004a0 <bb_appendBits>

    // Pad with alternate bytes until data capacity is reached
    for (uint8_t padByte = 0xEC; codewords.bitOffsetOrWidth < (dataCapacity * 8); padByte ^= 0xEC ^ 0x11) {
 8001c5a:	23ec      	movs	r3, #236	; 0xec
 8001c5c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001c60:	e00e      	b.n	8001c80 <qrcode_initBytes+0x190>
        bb_appendBits(&codewords, padByte, 8);
 8001c62:	f897 1066 	ldrb.w	r1, [r7, #102]	; 0x66
 8001c66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc17 	bl	80004a0 <bb_appendBits>
    for (uint8_t padByte = 0xEC; codewords.bitOffsetOrWidth < (dataCapacity * 8); padByte ^= 0xEC ^ 0x11) {
 8001c72:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001c76:	f083 0302 	eor.w	r3, r3, #2
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c82:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8001c86:	00d2      	lsls	r2, r2, #3
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d3ea      	bcc.n	8001c62 <qrcode_initBytes+0x172>
    }

    BitBucket modulesGrid;
    bb_initGrid(&modulesGrid, modules, size);
 8001c8c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001c90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c94:	6939      	ldr	r1, [r7, #16]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fbe2 	bl	8000460 <bb_initGrid>
    
    BitBucket isFunctionGrid;
    uint8_t isFunctionGridBytes[bb_getGridSizeBytes(size)];
 8001c9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fb9f 	bl	80003e4 <bb_getGridSizeBytes>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	466b      	mov	r3, sp
 8001cac:	461e      	mov	r6, r3
 8001cae:	460b      	mov	r3, r1
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cb4:	b28b      	uxth	r3, r1
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	4698      	mov	r8, r3
 8001cba:	4691      	mov	r9, r2
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ccc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cd0:	b28b      	uxth	r3, r1
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	461c      	mov	r4, r3
 8001cd6:	4615      	mov	r5, r2
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	00eb      	lsls	r3, r5, #3
 8001ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce6:	00e2      	lsls	r2, r4, #3
 8001ce8:	460b      	mov	r3, r1
 8001cea:	3307      	adds	r3, #7
 8001cec:	08db      	lsrs	r3, r3, #3
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	ebad 0d03 	sub.w	sp, sp, r3
 8001cf4:	466b      	mov	r3, sp
 8001cf6:	3300      	adds	r3, #0
 8001cf8:	647b      	str	r3, [r7, #68]	; 0x44
    bb_initGrid(&isFunctionGrid, isFunctionGridBytes, size);
 8001cfa:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fbab 	bl	8000460 <bb_initGrid>
    
    // Draw function patterns, draw all codewords, do masking
    drawFunctionPatterns(&modulesGrid, &isFunctionGrid, version, eccFormatBits);
 8001d0a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	f107 011c 	add.w	r1, r7, #28
 8001d14:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001d18:	f7ff f81a 	bl	8000d50 <drawFunctionPatterns>
    performErrorCorrection(version, eccFormatBits, &codewords);
 8001d1c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d20:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fd52 	bl	80017d0 <performErrorCorrection>
    drawCodewords(&modulesGrid, &isFunctionGrid, &codewords);
 8001d2c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d30:	f107 011c 	add.w	r1, r7, #28
 8001d34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f93f 	bl	8000fbc <drawCodewords>
    
    // Find the best (lowest penalty) mask
    uint8_t mask = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    int32_t minPenalty = INT32_MAX;
 8001d44:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001d48:	66bb      	str	r3, [r7, #104]	; 0x68
    for (uint8_t i = 0; i < 8; i++) {
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001d50:	e031      	b.n	8001db6 <qrcode_initBytes+0x2c6>
        drawFormatBits(&modulesGrid, &isFunctionGrid, eccFormatBits, i);
 8001d52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d56:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001d5a:	f107 011c 	add.w	r1, r7, #28
 8001d5e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001d62:	f7fe fe8c 	bl	8000a7e <drawFormatBits>
        applyMask(&modulesGrid, &isFunctionGrid, i);
 8001d66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001d6a:	f107 011c 	add.w	r1, r7, #28
 8001d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fcaa 	bl	80006cc <applyMask>
        int penalty = getPenaltyScore(&modulesGrid);
 8001d78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff f9ad 	bl	80010dc <getPenaltyScore>
 8001d82:	4603      	mov	r3, r0
 8001d84:	643b      	str	r3, [r7, #64]	; 0x40
        if (penalty < minPenalty) {
 8001d86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	da05      	bge.n	8001d9a <qrcode_initBytes+0x2aa>
            mask = i;
 8001d8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            minPenalty = penalty;
 8001d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d98:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        applyMask(&modulesGrid, &isFunctionGrid, i);  // Undoes the mask due to XOR
 8001d9a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001d9e:	f107 011c 	add.w	r1, r7, #28
 8001da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fc90 	bl	80006cc <applyMask>
    for (uint8_t i = 0; i < 8; i++) {
 8001dac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001db0:	3301      	adds	r3, #1
 8001db2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001db6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001dba:	2b07      	cmp	r3, #7
 8001dbc:	d9c9      	bls.n	8001d52 <qrcode_initBytes+0x262>
    }
    
    qrcode->mask = mask;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001dc4:	711a      	strb	r2, [r3, #4]
    
    // Overwrite old format bits
    drawFormatBits(&modulesGrid, &isFunctionGrid, eccFormatBits, mask);
 8001dc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001dca:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001dce:	f107 011c 	add.w	r1, r7, #28
 8001dd2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001dd6:	f7fe fe52 	bl	8000a7e <drawFormatBits>
    
    // Apply the final choice of mask
    applyMask(&modulesGrid, &isFunctionGrid, mask);
 8001dda:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001dde:	f107 011c 	add.w	r1, r7, #28
 8001de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fc70 	bl	80006cc <applyMask>

    return 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	46b5      	mov	sp, r6
 8001df0:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3774      	adds	r7, #116	; 0x74
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dfe:	bf00      	nop
 8001e00:	080061f8 	.word	0x080061f8
 8001e04:	08006018 	.word	0x08006018

08001e08 <qrcode_initText>:

int8_t qrcode_initText(QRCode *qrcode, uint8_t *modules, uint8_t version, uint8_t ecc, const char *data) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	4611      	mov	r1, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	460b      	mov	r3, r1
 8001e18:	71fb      	strb	r3, [r7, #7]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	71bb      	strb	r3, [r7, #6]
    return qrcode_initBytes(qrcode, modules, version, ecc, (uint8_t*)data, strlen(data));
 8001e1e:	69b8      	ldr	r0, [r7, #24]
 8001e20:	f7fe f9e2 	bl	80001e8 <strlen>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	79b9      	ldrb	r1, [r7, #6]
 8001e2a:	79fa      	ldrb	r2, [r7, #7]
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	460b      	mov	r3, r1
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff fe5a 	bl	8001af0 <qrcode_initBytes>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <qrcode_getModule>:

bool qrcode_getModule(QRCode *qrcode, uint8_t x, uint8_t y) {
 8001e46:	b480      	push	{r7}
 8001e48:	b085      	sub	sp, #20
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	70fb      	strb	r3, [r7, #3]
 8001e52:	4613      	mov	r3, r2
 8001e54:	70bb      	strb	r3, [r7, #2]
    if (x < 0 || x >= qrcode->size || y < 0 || y >= qrcode->size) {
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d204      	bcs.n	8001e6a <qrcode_getModule+0x24>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	78ba      	ldrb	r2, [r7, #2]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d301      	bcc.n	8001e6e <qrcode_getModule+0x28>
        return false;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e01b      	b.n	8001ea6 <qrcode_getModule+0x60>
    }

    uint32_t offset = y * qrcode->size + x;
 8001e6e:	78bb      	ldrb	r3, [r7, #2]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	7852      	ldrb	r2, [r2, #1]
 8001e74:	fb03 f202 	mul.w	r2, r3, r2
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
    return (qrcode->modules[offset >> 3] & (1 << (7 - (offset & 0x07)))) != 0;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	fa42 f303 	asr.w	r3, r2, r3
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf14      	ite	ne
 8001ea0:	2301      	movne	r3, #1
 8001ea2:	2300      	moveq	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <lcdInit>:
 * @brief  Initializes LCD
 * @param  None
 * @retval None
 */
void lcdInit(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af02      	add	r7, sp, #8
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4813      	ldr	r0, [pc, #76]	; (8001f0c <lcdInit+0x58>)
 8001ebe:	f001 fe93 	bl	8003be8 <Ucglib4WireSWSPI_begin>
	ucg_ClearScreen(&ucg);
 8001ec2:	4812      	ldr	r0, [pc, #72]	; (8001f0c <lcdInit+0x58>)
 8001ec4:	f001 fed7 	bl	8003c76 <ucg_ClearScreen>
	ucg_SetFont(&ucg, ucg_font_ncenR12_hr);
 8001ec8:	4911      	ldr	r1, [pc, #68]	; (8001f10 <lcdInit+0x5c>)
 8001eca:	4810      	ldr	r0, [pc, #64]	; (8001f0c <lcdInit+0x58>)
 8001ecc:	f002 fffa 	bl	8004ec4 <ucg_SetFont>
	ucg_SetColor(&ucg, 0, 255, 255, 255);//khoi tao mau chu la mau trang
 8001ed0:	23ff      	movs	r3, #255	; 0xff
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	23ff      	movs	r3, #255	; 0xff
 8001ed6:	22ff      	movs	r2, #255	; 0xff
 8001ed8:	2100      	movs	r1, #0
 8001eda:	480c      	ldr	r0, [pc, #48]	; (8001f0c <lcdInit+0x58>)
 8001edc:	f003 f8d1 	bl	8005082 <ucg_SetColor>
	ucg_SetColor(&ucg, 1, 0, 0, 0);// khoi tao mau backgroud la mau den
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2101      	movs	r1, #1
 8001eea:	4808      	ldr	r0, [pc, #32]	; (8001f0c <lcdInit+0x58>)
 8001eec:	f003 f8c9 	bl	8005082 <ucg_SetColor>
	ucg_SetRotate180(&ucg);
 8001ef0:	4806      	ldr	r0, [pc, #24]	; (8001f0c <lcdInit+0x58>)
 8001ef2:	f003 f9e7 	bl	80052c4 <ucg_SetRotate180>
	ucg_DrawString(&ucg, 25, 60, 0, "Hello Lumi");
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <lcdInit+0x60>)
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2300      	movs	r3, #0
 8001efc:	223c      	movs	r2, #60	; 0x3c
 8001efe:	2119      	movs	r1, #25
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <lcdInit+0x58>)
 8001f02:	f002 ff1b 	bl	8004d3c <ucg_DrawString>
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000044 	.word	0x20000044
 8001f10:	08007410 	.word	0x08007410
 8001f14:	08005fe0 	.word	0x08005fe0

08001f18 <generateQRCode>:
 * @brief  Print qr_code in LCD
 * @param  data
 * @retval None
 */
void generateQRCode(char *pByData,uint8_t byDataLength)
{
 8001f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f1c:	b091      	sub	sp, #68	; 0x44
 8001f1e:	af02      	add	r7, sp, #8
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	70fb      	strb	r3, [r7, #3]
 8001f26:	466b      	mov	r3, sp
 8001f28:	461e      	mov	r6, r3
	  // Create the QR code
	    QRCode qrcode;

	    const uint8_t byEcc = ECC_LEVEL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	    const uint8_t byVersion = VERSION_OF_QR;
 8001f30:	2303      	movs	r3, #3
 8001f32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	    uint8_t pbyQrcodeData[qrcode_getBufferSize(byVersion)];
 8001f36:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fdc6 	bl	8001acc <qrcode_getBufferSize>
 8001f40:	4603      	mov	r3, r0
 8001f42:	4619      	mov	r1, r3
 8001f44:	460b      	mov	r3, r1
 8001f46:	3b01      	subs	r3, #1
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f4a:	b28b      	uxth	r3, r1
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	4698      	mov	r8, r3
 8001f50:	4691      	mov	r9, r2
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f66:	b28b      	uxth	r3, r1
 8001f68:	2200      	movs	r2, #0
 8001f6a:	461c      	mov	r4, r3
 8001f6c:	4615      	mov	r5, r2
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	00eb      	lsls	r3, r5, #3
 8001f78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f7c:	00e2      	lsls	r2, r4, #3
 8001f7e:	460b      	mov	r3, r1
 8001f80:	3307      	adds	r3, #7
 8001f82:	08db      	lsrs	r3, r3, #3
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	ebad 0d03 	sub.w	sp, sp, r3
 8001f8a:	ab02      	add	r3, sp, #8
 8001f8c:	3300      	adds	r3, #0
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28

	    checkDataLength(byDataLength, byEcc, byVersion);
 8001f90:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001f94:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f908 	bl	80021b0 <checkDataLength>

	    qrcode_initText(&qrcode, pbyQrcodeData, byVersion, byEcc, pByData);
 8001fa0:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8001fa4:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001fa8:	f107 000c 	add.w	r0, r7, #12
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fb4:	f7ff ff28 	bl	8001e08 <qrcode_initText>

	    const uint8_t byXyScale = SCALE_ONE_PIXEL;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	    const uint8_t byWidth = WIDTH_LCD;
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	    const uint8_t byHeight = HEIGHT_LCD;
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    uint8_t byXmax = byWidth/2;
 8001fca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fce:	085b      	lsrs	r3, r3, #1
 8001fd0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    uint8_t byYmax = byHeight/2;
 8001fd4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	    uint8_t byOffset = (byXyScale*qrcode.size);
 8001fde:	7b7b      	ldrb	r3, [r7, #13]
 8001fe0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001fe4:	fb12 f303 	smulbb	r3, r2, r3
 8001fe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	    uint8_t byX1 = byXmax - (byOffset/2);
 8001fec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ff0:	085b      	lsrs	r3, r3, #1
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    uint8_t byY1 = byYmax - (byOffset/2);
 8001ffe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002002:	085b      	lsrs	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f887 3020 	strb.w	r3, [r7, #32]


	    uint8_t byPx1 = byX1;
 8002010:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002014:	77fb      	strb	r3, [r7, #31]
	    uint8_t byPy1 = byY1;
 8002016:	f897 3020 	ldrb.w	r3, [r7, #32]
 800201a:	77bb      	strb	r3, [r7, #30]

	    uint8_t byPx2 = byPx1;
 800201c:	7ffb      	ldrb	r3, [r7, #31]
 800201e:	777b      	strb	r3, [r7, #29]
	    uint8_t byPy2 = byPy1;
 8002020:	7fbb      	ldrb	r3, [r7, #30]
 8002022:	773b      	strb	r3, [r7, #28]


	    //Clear LCD
	    ucg_ClearScreen(&ucg);
 8002024:	4840      	ldr	r0, [pc, #256]	; (8002128 <generateQRCode+0x210>)
 8002026:	f001 fe26 	bl	8003c76 <ucg_ClearScreen>

	    // Top quiet zone
	    ucg_SetColor(&ucg, 0, 255, 255, 255);
 800202a:	23ff      	movs	r3, #255	; 0xff
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	23ff      	movs	r3, #255	; 0xff
 8002030:	22ff      	movs	r2, #255	; 0xff
 8002032:	2100      	movs	r1, #0
 8002034:	483c      	ldr	r0, [pc, #240]	; (8002128 <generateQRCode+0x210>)
 8002036:	f003 f824 	bl	8005082 <ucg_SetColor>
	    for (uint8_t y = 0; y < qrcode.size; y++) {
 800203a:	2300      	movs	r3, #0
 800203c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002040:	e066      	b.n	8002110 <generateQRCode+0x1f8>
	        for(uint8_t x = 0; x < qrcode.size; x++) {
 8002042:	2300      	movs	r3, #0
 8002044:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002048:	e058      	b.n	80020fc <generateQRCode+0x1e4>
	            bool mod = qrcode_getModule(&qrcode,x, y);
 800204a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800204e:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002052:	f107 030c 	add.w	r3, r7, #12
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fef5 	bl	8001e46 <qrcode_getModule>
 800205c:	4603      	mov	r3, r0
 800205e:	76fb      	strb	r3, [r7, #27]
	            byPx1 = byX1 + x * byXyScale;
 8002060:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002068:	fb12 f303 	smulbb	r3, r2, r3
 800206c:	b2da      	uxtb	r2, r3
 800206e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002072:	4413      	add	r3, r2
 8002074:	77fb      	strb	r3, [r7, #31]
	            byPy1 = byX1 + y * byXyScale;
 8002076:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800207a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800207e:	fb12 f303 	smulbb	r3, r2, r3
 8002082:	b2da      	uxtb	r2, r3
 8002084:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002088:	4413      	add	r3, r2
 800208a:	77bb      	strb	r3, [r7, #30]
	            byPx2 = byPx1 + byXyScale;
 800208c:	7ffa      	ldrb	r2, [r7, #31]
 800208e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002092:	4413      	add	r3, r2
 8002094:	777b      	strb	r3, [r7, #29]
	            byPy2 = byPy1 + byXyScale;
 8002096:	7fba      	ldrb	r2, [r7, #30]
 8002098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800209c:	4413      	add	r3, r2
 800209e:	773b      	strb	r3, [r7, #28]
	            if(mod){
 80020a0:	7efb      	ldrb	r3, [r7, #27]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d025      	beq.n	80020f2 <generateQRCode+0x1da>
	            	for(uint8_t i =byPx1;i<=byPx2;i++)
 80020a6:	7ffb      	ldrb	r3, [r7, #31]
 80020a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80020ac:	e01c      	b.n	80020e8 <generateQRCode+0x1d0>
	            	{
	            		for(uint8_t k = byPy1; k<= byPy2;k++)
 80020ae:	7fbb      	ldrb	r3, [r7, #30]
 80020b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80020b4:	e00e      	b.n	80020d4 <generateQRCode+0x1bc>
	            		{
	            			ucg_DrawPixel(&ucg, i, k);
 80020b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80020c0:	b212      	sxth	r2, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	4818      	ldr	r0, [pc, #96]	; (8002128 <generateQRCode+0x210>)
 80020c6:	f003 f80a 	bl	80050de <ucg_DrawPixel>
	            		for(uint8_t k = byPy1; k<= byPy2;k++)
 80020ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80020ce:	3301      	adds	r3, #1
 80020d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80020d4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80020d8:	7f3b      	ldrb	r3, [r7, #28]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d9eb      	bls.n	80020b6 <generateQRCode+0x19e>
	            	for(uint8_t i =byPx1;i<=byPx2;i++)
 80020de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80020e2:	3301      	adds	r3, #1
 80020e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80020e8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80020ec:	7f7b      	ldrb	r3, [r7, #29]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d9dd      	bls.n	80020ae <generateQRCode+0x196>
	        for(uint8_t x = 0; x < qrcode.size; x++) {
 80020f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020f6:	3301      	adds	r3, #1
 80020f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80020fc:	7b7b      	ldrb	r3, [r7, #13]
 80020fe:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002102:	429a      	cmp	r2, r3
 8002104:	d3a1      	bcc.n	800204a <generateQRCode+0x132>
	    for (uint8_t y = 0; y < qrcode.size; y++) {
 8002106:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800210a:	3301      	adds	r3, #1
 800210c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002110:	7b7b      	ldrb	r3, [r7, #13]
 8002112:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002116:	429a      	cmp	r2, r3
 8002118:	d393      	bcc.n	8002042 <generateQRCode+0x12a>
 800211a:	46b5      	mov	sp, r6

	            }
	        }
	    }

}
 800211c:	bf00      	nop
 800211e:	373c      	adds	r7, #60	; 0x3c
 8002120:	46bd      	mov	sp, r7
 8002122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002126:	bf00      	nop
 8002128:	20000044 	.word	0x20000044

0800212c <clearLCD>:
 * @brief  Clear LCD
 * @param  None
 * @retval None
 */
void clearLCD(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	ucg_ClearScreen(&ucg);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <clearLCD+0x10>)
 8002132:	f001 fda0 	bl	8003c76 <ucg_ClearScreen>
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000044 	.word	0x20000044

08002140 <printText>:
 * @brief  In Ra chuoi Str ra man hinh
 * @param
 * @retval None
 */
void printText(char *str,uint8_t x,uint8_t y,const ucg_fntpgm_uint8_t *font)
{
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af02      	add	r7, sp, #8
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	72fb      	strb	r3, [r7, #11]
 800214e:	4613      	mov	r3, r2
 8002150:	72bb      	strb	r3, [r7, #10]
	uint8_t byDelta = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	75bb      	strb	r3, [r7, #22]

	ucg_SetFont(&ucg, font);
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4814      	ldr	r0, [pc, #80]	; (80021ac <printText+0x6c>)
 800215a:	f002 feb3 	bl	8004ec4 <ucg_SetFont>
	for(uint8_t i = 0;i<strlen(str);i++)
 800215e:	2300      	movs	r3, #0
 8002160:	75fb      	strb	r3, [r7, #23]
 8002162:	e016      	b.n	8002192 <printText+0x52>
	{
		byDelta = ucg_DrawGlyph(&ucg, x, y , 0, (uint8_t)str[i]);
 8002164:	7afb      	ldrb	r3, [r7, #11]
 8002166:	b219      	sxth	r1, r3
 8002168:	7abb      	ldrb	r3, [r7, #10]
 800216a:	b218      	sxth	r0, r3
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4413      	add	r3, r2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2300      	movs	r3, #0
 8002178:	4602      	mov	r2, r0
 800217a:	480c      	ldr	r0, [pc, #48]	; (80021ac <printText+0x6c>)
 800217c:	f002 fcea 	bl	8004b54 <ucg_DrawGlyph>
 8002180:	4603      	mov	r3, r0
 8002182:	75bb      	strb	r3, [r7, #22]
		x += byDelta;
 8002184:	7afa      	ldrb	r2, [r7, #11]
 8002186:	7dbb      	ldrb	r3, [r7, #22]
 8002188:	4413      	add	r3, r2
 800218a:	72fb      	strb	r3, [r7, #11]
	for(uint8_t i = 0;i<strlen(str);i++)
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	3301      	adds	r3, #1
 8002190:	75fb      	strb	r3, [r7, #23]
 8002192:	7dfc      	ldrb	r4, [r7, #23]
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f7fe f827 	bl	80001e8 <strlen>
 800219a:	4603      	mov	r3, r0
 800219c:	429c      	cmp	r4, r3
 800219e:	d3e1      	bcc.n	8002164 <printText+0x24>
	}
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	371c      	adds	r7, #28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd90      	pop	{r4, r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000044 	.word	0x20000044

080021b0 <checkDataLength>:
 * @brief  Kiem tra do dai chuoi ma QR-Code co the chua
 * @param
 * @retval None
 */
uint8_t checkDataLength(uint8_t byDataLength, uint8_t byEccLevel, uint8_t byVersion)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
 80021ba:	460b      	mov	r3, r1
 80021bc:	71bb      	strb	r3, [r7, #6]
 80021be:	4613      	mov	r3, r2
 80021c0:	717b      	strb	r3, [r7, #5]
	switch(byVersion)
 80021c2:	797b      	ldrb	r3, [r7, #5]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	f200 80da 	bhi.w	8002380 <checkDataLength+0x1d0>
 80021cc:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <checkDataLength+0x24>)
 80021ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d2:	bf00      	nop
 80021d4:	080021ed 	.word	0x080021ed
 80021d8:	08002237 	.word	0x08002237
 80021dc:	08002281 	.word	0x08002281
 80021e0:	080022c1 	.word	0x080022c1
 80021e4:	08002301 	.word	0x08002301
 80021e8:	08002341 	.word	0x08002341
	{
	case 1:
		if(byEccLevel == ECC_LOW)
 80021ec:	79bb      	ldrb	r3, [r7, #6]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d105      	bne.n	80021fe <checkDataLength+0x4e>
		{
			if(byDataLength>19)
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	2b13      	cmp	r3, #19
 80021f6:	f240 80c5 	bls.w	8002384 <checkDataLength+0x1d4>
				return -1;
 80021fa:	23ff      	movs	r3, #255	; 0xff
 80021fc:	e0ce      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 80021fe:	79bb      	ldrb	r3, [r7, #6]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <checkDataLength+0x60>
		{
			if(byDataLength>16)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2b10      	cmp	r3, #16
 8002208:	f240 80bc 	bls.w	8002384 <checkDataLength+0x1d4>
				return -1;
 800220c:	23ff      	movs	r3, #255	; 0xff
 800220e:	e0c5      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 8002210:	79bb      	ldrb	r3, [r7, #6]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d105      	bne.n	8002222 <checkDataLength+0x72>
		{
			if(byDataLength>13)
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	2b0d      	cmp	r3, #13
 800221a:	f240 80b3 	bls.w	8002384 <checkDataLength+0x1d4>
				return -1;
 800221e:	23ff      	movs	r3, #255	; 0xff
 8002220:	e0bc      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 8002222:	79bb      	ldrb	r3, [r7, #6]
 8002224:	2b03      	cmp	r3, #3
 8002226:	f040 80ad 	bne.w	8002384 <checkDataLength+0x1d4>
		{
			if(byDataLength>9)
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2b09      	cmp	r3, #9
 800222e:	f240 80a9 	bls.w	8002384 <checkDataLength+0x1d4>
				return -1;
 8002232:	23ff      	movs	r3, #255	; 0xff
 8002234:	e0b2      	b.n	800239c <checkDataLength+0x1ec>
		}
		break;
	case 2:
		if(byEccLevel == ECC_LOW)
 8002236:	79bb      	ldrb	r3, [r7, #6]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <checkDataLength+0x98>
		{
			if(byDataLength>34)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	2b22      	cmp	r3, #34	; 0x22
 8002240:	f240 80a2 	bls.w	8002388 <checkDataLength+0x1d8>
				return -1;
 8002244:	23ff      	movs	r3, #255	; 0xff
 8002246:	e0a9      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 8002248:	79bb      	ldrb	r3, [r7, #6]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d105      	bne.n	800225a <checkDataLength+0xaa>
		{
			if(byDataLength>28)
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b1c      	cmp	r3, #28
 8002252:	f240 8099 	bls.w	8002388 <checkDataLength+0x1d8>
				return -1;
 8002256:	23ff      	movs	r3, #255	; 0xff
 8002258:	e0a0      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 800225a:	79bb      	ldrb	r3, [r7, #6]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d105      	bne.n	800226c <checkDataLength+0xbc>
		{
			if(byDataLength>22)
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	2b16      	cmp	r3, #22
 8002264:	f240 8090 	bls.w	8002388 <checkDataLength+0x1d8>
				return -1;
 8002268:	23ff      	movs	r3, #255	; 0xff
 800226a:	e097      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 800226c:	79bb      	ldrb	r3, [r7, #6]
 800226e:	2b03      	cmp	r3, #3
 8002270:	f040 808a 	bne.w	8002388 <checkDataLength+0x1d8>
		{
			if(byDataLength>16)
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	2b10      	cmp	r3, #16
 8002278:	f240 8086 	bls.w	8002388 <checkDataLength+0x1d8>
				return -1;
 800227c:	23ff      	movs	r3, #255	; 0xff
 800227e:	e08d      	b.n	800239c <checkDataLength+0x1ec>
		}
		break;
	case 3:
		if(byEccLevel == ECC_LOW)
 8002280:	79bb      	ldrb	r3, [r7, #6]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d104      	bne.n	8002290 <checkDataLength+0xe0>
		{
			if(byDataLength>55)
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b37      	cmp	r3, #55	; 0x37
 800228a:	d97f      	bls.n	800238c <checkDataLength+0x1dc>
				return -1;
 800228c:	23ff      	movs	r3, #255	; 0xff
 800228e:	e085      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 8002290:	79bb      	ldrb	r3, [r7, #6]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d104      	bne.n	80022a0 <checkDataLength+0xf0>
		{
			if(byDataLength>44)
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	2b2c      	cmp	r3, #44	; 0x2c
 800229a:	d977      	bls.n	800238c <checkDataLength+0x1dc>
				return -1;
 800229c:	23ff      	movs	r3, #255	; 0xff
 800229e:	e07d      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 80022a0:	79bb      	ldrb	r3, [r7, #6]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d104      	bne.n	80022b0 <checkDataLength+0x100>
		{
			if(byDataLength>34)
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	2b22      	cmp	r3, #34	; 0x22
 80022aa:	d96f      	bls.n	800238c <checkDataLength+0x1dc>
				return -1;
 80022ac:	23ff      	movs	r3, #255	; 0xff
 80022ae:	e075      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 80022b0:	79bb      	ldrb	r3, [r7, #6]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d16a      	bne.n	800238c <checkDataLength+0x1dc>
		{
			if(byDataLength>26)
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	2b1a      	cmp	r3, #26
 80022ba:	d967      	bls.n	800238c <checkDataLength+0x1dc>
				return -1;
 80022bc:	23ff      	movs	r3, #255	; 0xff
 80022be:	e06d      	b.n	800239c <checkDataLength+0x1ec>
		}
		break;
	case 4:
		if(byEccLevel == ECC_LOW)
 80022c0:	79bb      	ldrb	r3, [r7, #6]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d104      	bne.n	80022d0 <checkDataLength+0x120>
		{
			if(byDataLength>80)
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	2b50      	cmp	r3, #80	; 0x50
 80022ca:	d961      	bls.n	8002390 <checkDataLength+0x1e0>
				return -1;
 80022cc:	23ff      	movs	r3, #255	; 0xff
 80022ce:	e065      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 80022d0:	79bb      	ldrb	r3, [r7, #6]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d104      	bne.n	80022e0 <checkDataLength+0x130>
		{
			if(byDataLength>64)
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	2b40      	cmp	r3, #64	; 0x40
 80022da:	d959      	bls.n	8002390 <checkDataLength+0x1e0>
				return -1;
 80022dc:	23ff      	movs	r3, #255	; 0xff
 80022de:	e05d      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 80022e0:	79bb      	ldrb	r3, [r7, #6]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d104      	bne.n	80022f0 <checkDataLength+0x140>
		{
			if(byDataLength>48)
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	2b30      	cmp	r3, #48	; 0x30
 80022ea:	d951      	bls.n	8002390 <checkDataLength+0x1e0>
				return -1;
 80022ec:	23ff      	movs	r3, #255	; 0xff
 80022ee:	e055      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 80022f0:	79bb      	ldrb	r3, [r7, #6]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d14c      	bne.n	8002390 <checkDataLength+0x1e0>
		{
			if(byDataLength>36)
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b24      	cmp	r3, #36	; 0x24
 80022fa:	d949      	bls.n	8002390 <checkDataLength+0x1e0>
				return -1;
 80022fc:	23ff      	movs	r3, #255	; 0xff
 80022fe:	e04d      	b.n	800239c <checkDataLength+0x1ec>
		}
		break;
	case 5:
		if(byEccLevel == ECC_LOW)
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d104      	bne.n	8002310 <checkDataLength+0x160>
		{
			if(byDataLength>108)
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	2b6c      	cmp	r3, #108	; 0x6c
 800230a:	d943      	bls.n	8002394 <checkDataLength+0x1e4>
				return -1;
 800230c:	23ff      	movs	r3, #255	; 0xff
 800230e:	e045      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 8002310:	79bb      	ldrb	r3, [r7, #6]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d104      	bne.n	8002320 <checkDataLength+0x170>
		{
			if(byDataLength>86)
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	2b56      	cmp	r3, #86	; 0x56
 800231a:	d93b      	bls.n	8002394 <checkDataLength+0x1e4>
				return -1;
 800231c:	23ff      	movs	r3, #255	; 0xff
 800231e:	e03d      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 8002320:	79bb      	ldrb	r3, [r7, #6]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d104      	bne.n	8002330 <checkDataLength+0x180>
		{
			if(byDataLength>62)
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b3e      	cmp	r3, #62	; 0x3e
 800232a:	d933      	bls.n	8002394 <checkDataLength+0x1e4>
				return -1;
 800232c:	23ff      	movs	r3, #255	; 0xff
 800232e:	e035      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 8002330:	79bb      	ldrb	r3, [r7, #6]
 8002332:	2b03      	cmp	r3, #3
 8002334:	d12e      	bne.n	8002394 <checkDataLength+0x1e4>
		{
			if(byDataLength>46)
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	2b2e      	cmp	r3, #46	; 0x2e
 800233a:	d92b      	bls.n	8002394 <checkDataLength+0x1e4>
				return -1;
 800233c:	23ff      	movs	r3, #255	; 0xff
 800233e:	e02d      	b.n	800239c <checkDataLength+0x1ec>
		}
		break;
	case 6:
		if(byEccLevel == ECC_LOW)
 8002340:	79bb      	ldrb	r3, [r7, #6]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d104      	bne.n	8002350 <checkDataLength+0x1a0>
		{
			if(byDataLength>136)
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	2b88      	cmp	r3, #136	; 0x88
 800234a:	d925      	bls.n	8002398 <checkDataLength+0x1e8>
				return -1;
 800234c:	23ff      	movs	r3, #255	; 0xff
 800234e:	e025      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 8002350:	79bb      	ldrb	r3, [r7, #6]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d104      	bne.n	8002360 <checkDataLength+0x1b0>
		{
			if(byDataLength>108)
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	2b6c      	cmp	r3, #108	; 0x6c
 800235a:	d91d      	bls.n	8002398 <checkDataLength+0x1e8>
				return -1;
 800235c:	23ff      	movs	r3, #255	; 0xff
 800235e:	e01d      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 8002360:	79bb      	ldrb	r3, [r7, #6]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d104      	bne.n	8002370 <checkDataLength+0x1c0>
		{
			if(byDataLength>76)
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	2b4c      	cmp	r3, #76	; 0x4c
 800236a:	d915      	bls.n	8002398 <checkDataLength+0x1e8>
				return -1;
 800236c:	23ff      	movs	r3, #255	; 0xff
 800236e:	e015      	b.n	800239c <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 8002370:	79bb      	ldrb	r3, [r7, #6]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d110      	bne.n	8002398 <checkDataLength+0x1e8>
		{
			if(byDataLength>60)
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	2b3c      	cmp	r3, #60	; 0x3c
 800237a:	d90d      	bls.n	8002398 <checkDataLength+0x1e8>
				return -1;
 800237c:	23ff      	movs	r3, #255	; 0xff
 800237e:	e00d      	b.n	800239c <checkDataLength+0x1ec>
		}
		break;
	default:
		break;
 8002380:	bf00      	nop
 8002382:	e00a      	b.n	800239a <checkDataLength+0x1ea>
		break;
 8002384:	bf00      	nop
 8002386:	e008      	b.n	800239a <checkDataLength+0x1ea>
		break;
 8002388:	bf00      	nop
 800238a:	e006      	b.n	800239a <checkDataLength+0x1ea>
		break;
 800238c:	bf00      	nop
 800238e:	e004      	b.n	800239a <checkDataLength+0x1ea>
		break;
 8002390:	bf00      	nop
 8002392:	e002      	b.n	800239a <checkDataLength+0x1ea>
		break;
 8002394:	bf00      	nop
 8002396:	e000      	b.n	800239a <checkDataLength+0x1ea>
		break;
 8002398:	bf00      	nop
	}
	return 0;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <main>:
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/


int main(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
	appInitCommon();
 80023ac:	f000 f806 	bl	80023bc <appInitCommon>

    /* Loop forever */
	while(1)
	{
		processTimerScheduler();
 80023b0:	f001 f9c4 	bl	800373c <processTimerScheduler>
		processSerialUartReceiver();
 80023b4:	f000 f9aa 	bl	800270c <processSerialUartReceiver>
		processTimerScheduler();
 80023b8:	e7fa      	b.n	80023b0 <main+0x8>
	...

080023bc <appInitCommon>:
 * @param  None
 * @retval None
 */

static void appInitCommon(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 80023c0:	f000 fbe0 	bl	8002b84 <SystemCoreClockUpdate>
	TimerInit();
 80023c4:	f001 f8da 	bl	800357c <TimerInit>
	lcdInit();
 80023c8:	f7ff fd74 	bl	8001eb4 <lcdInit>
	serialUartInit();
 80023cc:	f000 fa48 	bl	8002860 <serialUartInit>
	g_RxState = RX_STATE_START_1_BYTE;
 80023d0:	4b02      	ldr	r3, [pc, #8]	; (80023dc <appInitCommon+0x20>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]




}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000208 	.word	0x20000208

080023e0 <processUartReceiveCommandInformationFeedBack>:
 * @param  CmdData_t *pCmd
 * @retval None
 */

static void processUartReceiveCommandInformationFeedBack(CmdData_t *pCmd)
{
 80023e0:	b5b0      	push	{r4, r5, r7, lr}
 80023e2:	b09a      	sub	sp, #104	; 0x68
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

	//1. Khai bao chuoi chua thong tin in ra QR
	char byDataPrint[5+(LENGTH_OF_MAC+LENGTH_OF_VERSION*2 +LENGTH_OF_PID \
 80023e8:	2300      	movs	r3, #0
 80023ea:	643b      	str	r3, [r7, #64]	; 0x40
 80023ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023f0:	2223      	movs	r2, #35	; 0x23
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 fdc7 	bl	8005f88 <memset>
			+ LENGTH_OF_DEVICE_TYPE)*2] = {0};

	//2. Chuoi chua thong tin hien tai
	char pstrMAC[LENGTH_OF_MAC * 2+1] = {0};
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	731a      	strb	r2, [r3, #12]
	char pstrDeviceType[LENGTH_OF_DEVICE_TYPE * 2 +1] = {0};
 800240c:	4ba9      	ldr	r3, [pc, #676]	; (80026b4 <processUartReceiveCommandInformationFeedBack+0x2d4>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	853b      	strh	r3, [r7, #40]	; 0x28
 8002412:	2300      	movs	r3, #0
 8002414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	char pstrPID[LENGTH_OF_PID * 2 +1] = {0};
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
 800241c:	2300      	movs	r3, #0
 800241e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	//3. Xoa du lieu cu
	memset(byDataPrint,0,sizeof(byDataPrint));
 8002422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002426:	2227      	movs	r2, #39	; 0x27
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f003 fdac 	bl	8005f88 <memset>
	//4. Chuyen doi du lieu tu dang Hex sang ma ASCII
	hexToAscii( pstrMAC,pCmd->pbyMAC, LENGTH_OF_MAC);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	1d59      	adds	r1, r3, #5
 8002434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002438:	2208      	movs	r2, #8
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fa76 	bl	800292c <hexToAscii>

	hexToAscii(pstrDeviceType, &(pCmd->deviceType), LENGTH_OF_DEVICE_TYPE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	1c99      	adds	r1, r3, #2
 8002444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002448:	2201      	movs	r2, #1
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fa6e 	bl	800292c <hexToAscii>

	hexToAscii( pstrPID,pCmd->pbyPID, LENGTH_OF_PID);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f103 0110 	add.w	r1, r3, #16
 8002456:	f107 0320 	add.w	r3, r7, #32
 800245a:	2202      	movs	r2, #2
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fa65 	bl	800292c <hexToAscii>

	//5. Quet 2 lan de lay version cua zigbee va bluetooth
	static uint8_t byStatusTemp = 0;

	if(pCmd->protocolType == PROTOCOL_TYPE_ZIGBEE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	785b      	ldrb	r3, [r3, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d112      	bne.n	8002490 <processUartReceiveCommandInformationFeedBack+0xb0>
	{
		byStatusTemp ++;
 800246a:	4b93      	ldr	r3, [pc, #588]	; (80026b8 <processUartReceiveCommandInformationFeedBack+0x2d8>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b91      	ldr	r3, [pc, #580]	; (80026b8 <processUartReceiveCommandInformationFeedBack+0x2d8>)
 8002474:	701a      	strb	r2, [r3, #0]
		memset(g_pstrVersionZigBee,0,sizeof(g_pstrVersionZigBee));
 8002476:	2207      	movs	r2, #7
 8002478:	2100      	movs	r1, #0
 800247a:	4890      	ldr	r0, [pc, #576]	; (80026bc <processUartReceiveCommandInformationFeedBack+0x2dc>)
 800247c:	f003 fd84 	bl	8005f88 <memset>
		hexToAscii( g_pstrVersionZigBee,pCmd->pbyVersion, LENGTH_OF_VERSION);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	330d      	adds	r3, #13
 8002484:	2203      	movs	r2, #3
 8002486:	4619      	mov	r1, r3
 8002488:	488c      	ldr	r0, [pc, #560]	; (80026bc <processUartReceiveCommandInformationFeedBack+0x2dc>)
 800248a:	f000 fa4f 	bl	800292c <hexToAscii>
 800248e:	e01d      	b.n	80024cc <processUartReceiveCommandInformationFeedBack+0xec>
	}
	else if(pCmd->protocolType == PROTOCOL_TYPE_BLUETOOTH)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	785b      	ldrb	r3, [r3, #1]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d112      	bne.n	80024be <processUartReceiveCommandInformationFeedBack+0xde>
	{
		byStatusTemp ++;
 8002498:	4b87      	ldr	r3, [pc, #540]	; (80026b8 <processUartReceiveCommandInformationFeedBack+0x2d8>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b85      	ldr	r3, [pc, #532]	; (80026b8 <processUartReceiveCommandInformationFeedBack+0x2d8>)
 80024a2:	701a      	strb	r2, [r3, #0]
		memset(g_pstrVersionBluetooth,0,sizeof(g_pstrVersionBluetooth));
 80024a4:	2207      	movs	r2, #7
 80024a6:	2100      	movs	r1, #0
 80024a8:	4885      	ldr	r0, [pc, #532]	; (80026c0 <processUartReceiveCommandInformationFeedBack+0x2e0>)
 80024aa:	f003 fd6d 	bl	8005f88 <memset>
		hexToAscii( g_pstrVersionBluetooth,pCmd->pbyVersion, LENGTH_OF_VERSION);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	330d      	adds	r3, #13
 80024b2:	2203      	movs	r2, #3
 80024b4:	4619      	mov	r1, r3
 80024b6:	4882      	ldr	r0, [pc, #520]	; (80026c0 <processUartReceiveCommandInformationFeedBack+0x2e0>)
 80024b8:	f000 fa38 	bl	800292c <hexToAscii>
 80024bc:	e006      	b.n	80024cc <processUartReceiveCommandInformationFeedBack+0xec>
	}else
	{
		hexToAscii( g_pstrVersionZwave,pCmd->pbyVersion, LENGTH_OF_VERSION);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	330d      	adds	r3, #13
 80024c2:	2203      	movs	r2, #3
 80024c4:	4619      	mov	r1, r3
 80024c6:	487f      	ldr	r0, [pc, #508]	; (80026c4 <processUartReceiveCommandInformationFeedBack+0x2e4>)
 80024c8:	f000 fa30 	bl	800292c <hexToAscii>
	}
	//6. Luu gia tri endPointCnt truoc khi so sanh
	if(byStatusTemp%2 !=0)
 80024cc:	4b7a      	ldr	r3, [pc, #488]	; (80026b8 <processUartReceiveCommandInformationFeedBack+0x2d8>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <processUartReceiveCommandInformationFeedBack+0x102>
	{
		g_byEnpointCntLast = pCmd->byEndpointCnt;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	78da      	ldrb	r2, [r3, #3]
 80024de:	4b7a      	ldr	r3, [pc, #488]	; (80026c8 <processUartReceiveCommandInformationFeedBack+0x2e8>)
 80024e0:	701a      	strb	r2, [r3, #0]

	//7. So sanh MAC , Ghep thong tin vao 1 chuoi, va in ma Qr_Code ra man hinh
		//Gia tri dem so lan quet lai ban tin khi thay doi thiet bi co endpoint khac
	static uint8_t byCountTemp = 0;

	if(strcmp(pstrMAC,g_pstrMACLast)!=0 &&(byStatusTemp>=2))
 80024e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e6:	4979      	ldr	r1, [pc, #484]	; (80026cc <processUartReceiveCommandInformationFeedBack+0x2ec>)
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fd fe73 	bl	80001d4 <strcmp>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80d3 	beq.w	800269c <processUartReceiveCommandInformationFeedBack+0x2bc>
 80024f6:	4b70      	ldr	r3, [pc, #448]	; (80026b8 <processUartReceiveCommandInformationFeedBack+0x2d8>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	f240 80ce 	bls.w	800269c <processUartReceiveCommandInformationFeedBack+0x2bc>
	{
		// In ra gia tri khi quet du thong tin

		strcpy(g_pstrMACLast,pstrMAC);
 8002500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002504:	4619      	mov	r1, r3
 8002506:	4871      	ldr	r0, [pc, #452]	; (80026cc <processUartReceiveCommandInformationFeedBack+0x2ec>)
 8002508:	f003 fd55 	bl	8005fb6 <strcpy>

		if(g_byEnpointCntLast == pCmd->byEndpointCnt)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	78da      	ldrb	r2, [r3, #3]
 8002510:	4b6d      	ldr	r3, [pc, #436]	; (80026c8 <processUartReceiveCommandInformationFeedBack+0x2e8>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d177      	bne.n	8002608 <processUartReceiveCommandInformationFeedBack+0x228>
		{

			byCountTemp = 0;
 8002518:	4b6d      	ldr	r3, [pc, #436]	; (80026d0 <processUartReceiveCommandInformationFeedBack+0x2f0>)
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]

			strcat(byDataPrint,pstrMAC);
 800251e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002522:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f003 fd35 	bl	8005f98 <strcat>

			strcat(byDataPrint,",");
 800252e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd fe58 	bl	80001e8 <strlen>
 8002538:	4603      	mov	r3, r0
 800253a:	461a      	mov	r2, r3
 800253c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002540:	4413      	add	r3, r2
 8002542:	4964      	ldr	r1, [pc, #400]	; (80026d4 <processUartReceiveCommandInformationFeedBack+0x2f4>)
 8002544:	461a      	mov	r2, r3
 8002546:	460b      	mov	r3, r1
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	8013      	strh	r3, [r2, #0]

			strcat(byDataPrint,pstrDeviceType);
 800254c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002550:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f003 fd1e 	bl	8005f98 <strcat>

			strcat(byDataPrint,",");
 800255c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002560:	4618      	mov	r0, r3
 8002562:	f7fd fe41 	bl	80001e8 <strlen>
 8002566:	4603      	mov	r3, r0
 8002568:	461a      	mov	r2, r3
 800256a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800256e:	4413      	add	r3, r2
 8002570:	4958      	ldr	r1, [pc, #352]	; (80026d4 <processUartReceiveCommandInformationFeedBack+0x2f4>)
 8002572:	461a      	mov	r2, r3
 8002574:	460b      	mov	r3, r1
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	8013      	strh	r3, [r2, #0]

			strcat(byDataPrint,pstrPID);
 800257a:	f107 0220 	add.w	r2, r7, #32
 800257e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f003 fd07 	bl	8005f98 <strcat>

			strcat(byDataPrint,",");
 800258a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd fe2a 	bl	80001e8 <strlen>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800259c:	4413      	add	r3, r2
 800259e:	494d      	ldr	r1, [pc, #308]	; (80026d4 <processUartReceiveCommandInformationFeedBack+0x2f4>)
 80025a0:	461a      	mov	r2, r3
 80025a2:	460b      	mov	r3, r1
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	8013      	strh	r3, [r2, #0]

			strcat(byDataPrint,g_pstrVersionZigBee);
 80025a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025ac:	4943      	ldr	r1, [pc, #268]	; (80026bc <processUartReceiveCommandInformationFeedBack+0x2dc>)
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 fcf2 	bl	8005f98 <strcat>

			strcat(byDataPrint,",");
 80025b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd fe15 	bl	80001e8 <strlen>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025c6:	4413      	add	r3, r2
 80025c8:	4942      	ldr	r1, [pc, #264]	; (80026d4 <processUartReceiveCommandInformationFeedBack+0x2f4>)
 80025ca:	461a      	mov	r2, r3
 80025cc:	460b      	mov	r3, r1
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	8013      	strh	r3, [r2, #0]

			strcat(byDataPrint,g_pstrVersionBluetooth);
 80025d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025d6:	493a      	ldr	r1, [pc, #232]	; (80026c0 <processUartReceiveCommandInformationFeedBack+0x2e0>)
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 fcdd 	bl	8005f98 <strcat>


			generateQRCode(byDataPrint,strlen(byDataPrint));
 80025de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fd fe00 	bl	80001e8 <strlen>
 80025e8:	4603      	mov	r3, r0
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fc90 	bl	8001f18 <generateQRCode>

			printMACLcd(pstrMAC,8,120,ucg_font_5x7_mf);
 80025f8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80025fc:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <processUartReceiveCommandInformationFeedBack+0x2f8>)
 80025fe:	2278      	movs	r2, #120	; 0x78
 8002600:	2108      	movs	r1, #8
 8002602:	f000 f9d7 	bl	80029b4 <printMACLcd>
 8002606:	e049      	b.n	800269c <processUartReceiveCommandInformationFeedBack+0x2bc>

		}else
		{
			//7. Neu gia tri endPointCnt khac thi cho quet lai lan nua

				if(byCountTemp == 0)
 8002608:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <processUartReceiveCommandInformationFeedBack+0x2f0>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10e      	bne.n	800262e <processUartReceiveCommandInformationFeedBack+0x24e>
				{
					memset(g_pstrMACLast,0,sizeof(g_pstrMACLast));
 8002610:	2211      	movs	r2, #17
 8002612:	2100      	movs	r1, #0
 8002614:	482d      	ldr	r0, [pc, #180]	; (80026cc <processUartReceiveCommandInformationFeedBack+0x2ec>)
 8002616:	f003 fcb7 	bl	8005f88 <memset>
					g_byEnpointCntLast =0;
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <processUartReceiveCommandInformationFeedBack+0x2e8>)
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
					byCountTemp ++;
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <processUartReceiveCommandInformationFeedBack+0x2f0>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	b2da      	uxtb	r2, r3
 8002628:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <processUartReceiveCommandInformationFeedBack+0x2f0>)
 800262a:	701a      	strb	r2, [r3, #0]
 800262c:	e036      	b.n	800269c <processUartReceiveCommandInformationFeedBack+0x2bc>
				}else if(byCountTemp>=1)
 800262e:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <processUartReceiveCommandInformationFeedBack+0x2f0>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d032      	beq.n	800269c <processUartReceiveCommandInformationFeedBack+0x2bc>
				{
					char byText[] = "Firmware ERROR!!";
 8002636:	4b29      	ldr	r3, [pc, #164]	; (80026dc <processUartReceiveCommandInformationFeedBack+0x2fc>)
 8002638:	f107 040c 	add.w	r4, r7, #12
 800263c:	461d      	mov	r5, r3
 800263e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002642:	682b      	ldr	r3, [r5, #0]
 8002644:	7023      	strb	r3, [r4, #0]
					clearLCD();
 8002646:	f7ff fd71 	bl	800212c <clearLCD>
					printText(byText,20,50,ucg_font_6x10_mf);
 800264a:	f107 000c 	add.w	r0, r7, #12
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <processUartReceiveCommandInformationFeedBack+0x300>)
 8002650:	2232      	movs	r2, #50	; 0x32
 8002652:	2114      	movs	r1, #20
 8002654:	f7ff fd74 	bl	8002140 <printText>
					//In ra MAC loi.
					printMACLcd(pstrMAC,8,70,ucg_font_5x7_mf);
 8002658:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800265c:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <processUartReceiveCommandInformationFeedBack+0x2f8>)
 800265e:	2246      	movs	r2, #70	; 0x46
 8002660:	2108      	movs	r1, #8
 8002662:	f000 f9a7 	bl	80029b4 <printMACLcd>
					memset(g_pstrVersionBluetooth,0,sizeof(g_pstrVersionBluetooth));
 8002666:	2207      	movs	r2, #7
 8002668:	2100      	movs	r1, #0
 800266a:	4815      	ldr	r0, [pc, #84]	; (80026c0 <processUartReceiveCommandInformationFeedBack+0x2e0>)
 800266c:	f003 fc8c 	bl	8005f88 <memset>
					memset(g_pstrVersionZigBee,0,sizeof(g_pstrVersionZigBee));
 8002670:	2207      	movs	r2, #7
 8002672:	2100      	movs	r1, #0
 8002674:	4811      	ldr	r0, [pc, #68]	; (80026bc <processUartReceiveCommandInformationFeedBack+0x2dc>)
 8002676:	f003 fc87 	bl	8005f88 <memset>
					memset(pstrPID,0,sizeof(pstrPID));
 800267a:	f107 0320 	add.w	r3, r7, #32
 800267e:	2205      	movs	r2, #5
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f003 fc80 	bl	8005f88 <memset>
					memset(pstrDeviceType,0,sizeof(pstrDeviceType));
 8002688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800268c:	2203      	movs	r2, #3
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f003 fc79 	bl	8005f88 <memset>
					byCountTemp = 0;
 8002696:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <processUartReceiveCommandInformationFeedBack+0x2f0>)
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]



		}
	}
	if(byStatusTemp >=2)
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <processUartReceiveCommandInformationFeedBack+0x2d8>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d902      	bls.n	80026aa <processUartReceiveCommandInformationFeedBack+0x2ca>
	{
		byStatusTemp =0;
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <processUartReceiveCommandInformationFeedBack+0x2d8>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
	}


}
 80026aa:	bf00      	nop
 80026ac:	3768      	adds	r7, #104	; 0x68
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bdb0      	pop	{r4, r5, r7, pc}
 80026b2:	bf00      	nop
 80026b4:	08005ff0 	.word	0x08005ff0
 80026b8:	20000339 	.word	0x20000339
 80026bc:	20000318 	.word	0x20000318
 80026c0:	20000310 	.word	0x20000310
 80026c4:	20000320 	.word	0x20000320
 80026c8:	2000030f 	.word	0x2000030f
 80026cc:	20000328 	.word	0x20000328
 80026d0:	2000033a 	.word	0x2000033a
 80026d4:	08005fec 	.word	0x08005fec
 80026d8:	08006328 	.word	0x08006328
 80026dc:	08005ff4 	.word	0x08005ff4
 80026e0:	08006aa0 	.word	0x08006aa0

080026e4 <procUartCmd>:
 * @brief  Xu ly truong CMD_ID cua thiet bi
 * @param  void *arg
 * @retval None
 */
static void procUartCmd(void *arg)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

	CmdData_t *CmdData = (CmdData_t*)arg;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	60fb      	str	r3, [r7, #12]
	switch(CmdData->byCmdId)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2bff      	cmp	r3, #255	; 0xff
 80026f6:	d103      	bne.n	8002700 <procUartCmd+0x1c>
	{
	case CMD_ID_INFORMATION_FEEDBACK:
		processUartReceiveCommandInformationFeedBack(CmdData);
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f7ff fe71 	bl	80023e0 <processUartReceiveCommandInformationFeedBack>
		break;
 80026fe:	e000      	b.n	8002702 <procUartCmd+0x1e>
	default:
			break;
 8002700:	bf00      	nop
	}

}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <processSerialUartReceiver>:
 * @brief  Xu ly ban tin nhan duoc tu UART
 * @param  None
 * @retval None
 */
static void processSerialUartReceiver(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
	static uint8_t uartState;
	uartState = PollRxBuff();
 8002710:	f000 f826 	bl	8002760 <PollRxBuff>
 8002714:	4603      	mov	r3, r0
 8002716:	461a      	mov	r2, r3
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <processSerialUartReceiver+0x48>)
 800271a:	701a      	strb	r2, [r3, #0]

	if(uartState != UART_STATE_IDLE)
 800271c:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <processSerialUartReceiver+0x48>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d014      	beq.n	800274e <processSerialUartReceiver+0x42>
	{
		switch(uartState)
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <processSerialUartReceiver+0x48>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d002      	beq.n	8002732 <processSerialUartReceiver+0x26>
 800272c:	2b04      	cmp	r3, #4
 800272e:	d007      	beq.n	8002740 <processSerialUartReceiver+0x34>
		case UART_STATE_ERROR:
			uartState = UART_STATE_IDLE;
			g_RxState = RX_STATE_START_1_BYTE;
			break;
		default:
			break;
 8002730:	e00e      	b.n	8002750 <processSerialUartReceiver+0x44>
			procUartCmd((void*)&g_pbyRxDataByte[1]);
 8002732:	4809      	ldr	r0, [pc, #36]	; (8002758 <processSerialUartReceiver+0x4c>)
 8002734:	f7ff ffd6 	bl	80026e4 <procUartCmd>
			g_RxState = RX_STATE_START_1_BYTE;
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <processSerialUartReceiver+0x50>)
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
			break;
 800273e:	e007      	b.n	8002750 <processSerialUartReceiver+0x44>
			uartState = UART_STATE_IDLE;
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <processSerialUartReceiver+0x48>)
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
			g_RxState = RX_STATE_START_1_BYTE;
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <processSerialUartReceiver+0x50>)
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
			break;
 800274c:	e000      	b.n	8002750 <processSerialUartReceiver+0x44>
		}
	}
 800274e:	bf00      	nop
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	2000033b 	.word	0x2000033b
 8002758:	2000020d 	.word	0x2000020d
 800275c:	20000208 	.word	0x20000208

08002760 <PollRxBuff>:
 * @brief  Phan tich ban tin UART nhan duoc, loai bo cac ban tin loi.
 * @param  void *arg
 * @retval None
 */
static uint8_t PollRxBuff(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
	//1. Khai bao bien chua dÃ†Â° lieu lay tu hang doi
	uint8_t RxDataTemp;
	uint8_t UartState = (uint8_t)UART_STATE_IDLE;
 8002766:	2300      	movs	r3, #0
 8002768:	71fb      	strb	r3, [r7, #7]

	//2. Tao vong lap den khi het du lieu trong hang doi
	while((bufNumItems(&g_pUartRxQueue) !=0) && (UartState == UART_STATE_IDLE)){
 800276a:	e061      	b.n	8002830 <PollRxBuff+0xd0>
		//2.0 Lay 1 phan tu trong hang doi
		bufDeDat(&g_pUartRxQueue, &RxDataTemp);
 800276c:	1dbb      	adds	r3, r7, #6
 800276e:	4619      	mov	r1, r3
 8002770:	4836      	ldr	r0, [pc, #216]	; (800284c <PollRxBuff+0xec>)
 8002772:	f002 fe75 	bl	8005460 <bufDeDat>
		switch(g_RxState)
 8002776:	4b36      	ldr	r3, [pc, #216]	; (8002850 <PollRxBuff+0xf0>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b03      	cmp	r3, #3
 800277c:	d854      	bhi.n	8002828 <PollRxBuff+0xc8>
 800277e:	a201      	add	r2, pc, #4	; (adr r2, 8002784 <PollRxBuff+0x24>)
 8002780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002784:	08002795 	.word	0x08002795
 8002788:	080027a9 	.word	0x080027a9
 800278c:	080027cf 	.word	0x080027cf
 8002790:	08002811 	.word	0x08002811
		{
		//2.1 Uart state- Start byte: 0xb1
		case RX_STATE_START_1_BYTE:
		{
			//2.1.1 TH: byte du lieu lay ra la byte start 0xb1
			if(RxDataTemp == BYTE_START_1)
 8002794:	79bb      	ldrb	r3, [r7, #6]
 8002796:	2b4c      	cmp	r3, #76	; 0x4c
 8002798:	d103      	bne.n	80027a2 <PollRxBuff+0x42>
				 * Neu la byte start thi se khoi tao
				 * 1. Bien check xor = 0xff
				 * 2. Khoi tao so byte data doc duoc
				 * 3. Khoi tao g_RxState sang trang thai bat dau doc du lieu
				 */
				g_RxState = RX_STATE_START_2_BYTE;
 800279a:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <PollRxBuff+0xf0>)
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e046      	b.n	8002830 <PollRxBuff+0xd0>
			}
			//2.1.4 TH: con lai
			else
			{
				UartState = UART_STATE_ERROR;
 80027a2:	2304      	movs	r3, #4
 80027a4:	71fb      	strb	r3, [r7, #7]
			}
			break;
 80027a6:	e043      	b.n	8002830 <PollRxBuff+0xd0>
		}
		case RX_STATE_START_2_BYTE:
				{
					//2.1.1 TH: byte du lieu lay ra la byte start 0xb1
					if(RxDataTemp == BYTE_START_2)
 80027a8:	79bb      	ldrb	r3, [r7, #6]
 80027aa:	2b4d      	cmp	r3, #77	; 0x4d
 80027ac:	d109      	bne.n	80027c2 <PollRxBuff+0x62>
						 * Neu la byte start thi se khoi tao
						 * 1. Bien check xor = 0xff
						 * 2. Khoi tao so byte data doc duoc
						 * 3. Khoi tao g_RxState sang trang thai bat dau doc du lieu
						 */
						g_byRxCheckXor = 0;
 80027ae:	4b29      	ldr	r3, [pc, #164]	; (8002854 <PollRxBuff+0xf4>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
						g_byRxIndexByte = 0;
 80027b4:	4b28      	ldr	r3, [pc, #160]	; (8002858 <PollRxBuff+0xf8>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
						g_RxState = RX_STATE_DATA_BYTES;
 80027ba:	4b25      	ldr	r3, [pc, #148]	; (8002850 <PollRxBuff+0xf0>)
 80027bc:	2202      	movs	r2, #2
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	e036      	b.n	8002830 <PollRxBuff+0xd0>
					}
					//2.1.4 TH: con lai
					else
					{
						g_RxState = RX_STATE_START_1_BYTE;
 80027c2:	4b23      	ldr	r3, [pc, #140]	; (8002850 <PollRxBuff+0xf0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
						UartState = UART_STATE_ERROR;
 80027c8:	2304      	movs	r3, #4
 80027ca:	71fb      	strb	r3, [r7, #7]
					}
					break;
 80027cc:	e030      	b.n	8002830 <PollRxBuff+0xd0>
			 * 2. Tinh toan check Xor de xac nhan toan ven cua data da nhan duoc
			 * 3. Neu so byte doc duoc lon hon gia tri ma mang co the luu thi reset va bao loi
			 */
			if(g_byRxIndexByte < RX_MAX_INDEX_BYTE)
			{
				g_pbyRxDataByte[g_byRxIndexByte] = RxDataTemp;
 80027ce:	4b22      	ldr	r3, [pc, #136]	; (8002858 <PollRxBuff+0xf8>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	79b9      	ldrb	r1, [r7, #6]
 80027d6:	4b21      	ldr	r3, [pc, #132]	; (800285c <PollRxBuff+0xfc>)
 80027d8:	5499      	strb	r1, [r3, r2]
				if(g_byRxIndexByte >0)
 80027da:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <PollRxBuff+0xf8>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d006      	beq.n	80027f0 <PollRxBuff+0x90>
				{
					g_byRxCheckXor ^= RxDataTemp;
 80027e2:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <PollRxBuff+0xf4>)
 80027e4:	781a      	ldrb	r2, [r3, #0]
 80027e6:	79bb      	ldrb	r3, [r7, #6]
 80027e8:	4053      	eors	r3, r2
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <PollRxBuff+0xf4>)
 80027ee:	701a      	strb	r2, [r3, #0]
				}
				// Neu la byte cuoi cung thi se chuyen sang check xor
				// Sau byte start la byte chua do dai du lieu
				if(++g_byRxIndexByte == g_pbyRxDataByte[0])
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <PollRxBuff+0xf8>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	3301      	adds	r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	4b17      	ldr	r3, [pc, #92]	; (8002858 <PollRxBuff+0xf8>)
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	4b16      	ldr	r3, [pc, #88]	; (8002858 <PollRxBuff+0xf8>)
 80027fe:	781a      	ldrb	r2, [r3, #0]
 8002800:	4b16      	ldr	r3, [pc, #88]	; (800285c <PollRxBuff+0xfc>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d113      	bne.n	8002830 <PollRxBuff+0xd0>
				{
					g_RxState = RX_STATE_CXOR_BYTE;
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <PollRxBuff+0xf0>)
 800280a:	2203      	movs	r2, #3
 800280c:	701a      	strb	r2, [r3, #0]
			}else
			{
				g_RxState = RX_STATE_START_1_BYTE;
				UartState = UART_STATE_ERROR;
			}
			break;
 800280e:	e00f      	b.n	8002830 <PollRxBuff+0xd0>
			 * Neu byte check xor gui toi bang gia tri tinh duoc thi data duoc chap nhan
			 * Nguoc lai thi bao loi
			 */
			//USART_SendData(USARTx, RxDataTemp);
			//USART_SendData(USARTx, g_byRxCheckXor);
			if(RxDataTemp == g_byRxCheckXor) {
 8002810:	79ba      	ldrb	r2, [r7, #6]
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <PollRxBuff+0xf4>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d103      	bne.n	8002822 <PollRxBuff+0xc2>
				UartState = UART_STATE_DATA_RECEIVED;
 800281a:	2301      	movs	r3, #1
 800281c:	71fb      	strb	r3, [r7, #7]
				return UartState;
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	e010      	b.n	8002844 <PollRxBuff+0xe4>
			} else {
				UartState = UART_STATE_ERROR;
 8002822:	2304      	movs	r3, #4
 8002824:	71fb      	strb	r3, [r7, #7]
			}

			break;
 8002826:	e003      	b.n	8002830 <PollRxBuff+0xd0>
		//2.1 Default
		default:
			g_RxState = RX_STATE_START_1_BYTE;
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <PollRxBuff+0xf0>)
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
			break;
 800282e:	bf00      	nop
	while((bufNumItems(&g_pUartRxQueue) !=0) && (UartState == UART_STATE_IDLE)){
 8002830:	4806      	ldr	r0, [pc, #24]	; (800284c <PollRxBuff+0xec>)
 8002832:	f002 fd7c 	bl	800532e <bufNumItems>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <PollRxBuff+0xe2>
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d094      	beq.n	800276c <PollRxBuff+0xc>
		}

	}
	return UartState;
 8002842:	79fb      	ldrb	r3, [r7, #7]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	200001f8 	.word	0x200001f8
 8002850:	20000208 	.word	0x20000208
 8002854:	2000030c 	.word	0x2000030c
 8002858:	2000030d 	.word	0x2000030d
 800285c:	2000020c 	.word	0x2000020c

08002860 <serialUartInit>:
 * @brief  Usart & Buffer initialization
 * @param  None
 * @retval None
 */
static void serialUartInit(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
	//1. Khoi tao bo dem chua du lieu gui ve
	bufInit(g_pBuffDataRx, &g_pUartRxQueue, sizeof(g_pBuffDataRx[0]), SIZE_BUFF_DATA_RX);
 8002864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002868:	2201      	movs	r2, #1
 800286a:	4904      	ldr	r1, [pc, #16]	; (800287c <serialUartInit+0x1c>)
 800286c:	4804      	ldr	r0, [pc, #16]	; (8002880 <serialUartInit+0x20>)
 800286e:	f002 fd43 	bl	80052f8 <bufInit>

	//2. Khoi tao ket noi USART2
	usartInit();
 8002872:	f000 f807 	bl	8002884 <usartInit>
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200001f8 	.word	0x200001f8
 8002880:	200000f8 	.word	0x200000f8

08002884 <usartInit>:
 * @brief  Usart initialization
 * @param  None
 * @retval None
 */
static void usartInit(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef	GPIO_InitStruct;
		USART_InitTypeDef	USART_InitStruct;
		NVIC_InitTypeDef	NVIC_InitStruct;

		//1. Configuare GPIO & AF
		RCC_AHB1PeriphClockCmd(USART6_GPIO_RCC, ENABLE);
 800288a:	2101      	movs	r1, #1
 800288c:	2001      	movs	r0, #1
 800288e:	f000 fc3f 	bl	8003110 <RCC_AHB1PeriphClockCmd>

		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8002892:	2302      	movs	r3, #2
 8002894:	773b      	strb	r3, [r7, #28]
		GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8002896:	2300      	movs	r3, #0
 8002898:	77bb      	strb	r3, [r7, #30]
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 800289a:	2301      	movs	r3, #1
 800289c:	77fb      	strb	r3, [r7, #31]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800289e:	2303      	movs	r3, #3
 80028a0:	777b      	strb	r3, [r7, #29]

		GPIO_InitStruct.GPIO_Pin = USART6_PIN_RX;
 80028a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a6:	61bb      	str	r3, [r7, #24]
		GPIO_Init(USART6_PORT, &GPIO_InitStruct);
 80028a8:	f107 0318 	add.w	r3, r7, #24
 80028ac:	4619      	mov	r1, r3
 80028ae:	481d      	ldr	r0, [pc, #116]	; (8002924 <usartInit+0xa0>)
 80028b0:	f000 fa96 	bl	8002de0 <GPIO_Init>

		GPIO_PinAFConfig(USART6_PORT, USART6_PINSOURCE_RX, USART6_AF);
 80028b4:	2208      	movs	r2, #8
 80028b6:	210c      	movs	r1, #12
 80028b8:	481a      	ldr	r0, [pc, #104]	; (8002924 <usartInit+0xa0>)
 80028ba:	f000 fb37 	bl	8002f2c <GPIO_PinAFConfig>
		//2. Configuare USART6: Bus APB2
		RCC_APB2PeriphClockCmd(USART6_RCC, ENABLE);
 80028be:	2101      	movs	r1, #1
 80028c0:	2020      	movs	r0, #32
 80028c2:	f000 fc45 	bl	8003150 <RCC_APB2PeriphClockCmd>

		USART_InitStruct.USART_BaudRate = USART6_BAUDRATE;
 80028c6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80028ca:	60bb      	str	r3, [r7, #8]
		USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80028cc:	2300      	movs	r3, #0
 80028ce:	82bb      	strh	r3, [r7, #20]
		USART_InitStruct.USART_Mode = USART_Mode_Rx;
 80028d0:	2304      	movs	r3, #4
 80028d2:	827b      	strh	r3, [r7, #18]
		USART_InitStruct.USART_Parity = USART_Parity_No;
 80028d4:	2300      	movs	r3, #0
 80028d6:	823b      	strh	r3, [r7, #16]
		USART_InitStruct.USART_StopBits = USART_StopBits_1;
 80028d8:	2300      	movs	r3, #0
 80028da:	81fb      	strh	r3, [r7, #14]
		USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 80028dc:	2300      	movs	r3, #0
 80028de:	81bb      	strh	r3, [r7, #12]

		USART_Init(USART6,&USART_InitStruct);
 80028e0:	f107 0308 	add.w	r3, r7, #8
 80028e4:	4619      	mov	r1, r3
 80028e6:	4810      	ldr	r0, [pc, #64]	; (8002928 <usartInit+0xa4>)
 80028e8:	f000 fc52 	bl	8003190 <USART_Init>

		//3. Enable USART6 Receive intterupt
		USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);
 80028ec:	2201      	movs	r2, #1
 80028ee:	f240 5125 	movw	r1, #1317	; 0x525
 80028f2:	480d      	ldr	r0, [pc, #52]	; (8002928 <usartInit+0xa4>)
 80028f4:	f000 fd36 	bl	8003364 <USART_ITConfig>

		//4. Configuare NVIC
		NVIC_InitStruct.NVIC_IRQChannel = USART6_IRQn;
 80028f8:	2347      	movs	r3, #71	; 0x47
 80028fa:	713b      	strb	r3, [r7, #4]
		NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80028fc:	2301      	movs	r3, #1
 80028fe:	71fb      	strb	r3, [r7, #7]
		NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	717b      	strb	r3, [r7, #5]
		NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	71bb      	strb	r3, [r7, #6]

		NVIC_InitStruct.NVIC_IRQChannel = USART6_IRQn;
 8002908:	2347      	movs	r3, #71	; 0x47
 800290a:	713b      	strb	r3, [r7, #4]
		NVIC_Init(&NVIC_InitStruct);
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fa04 	bl	8002d1c <NVIC_Init>

		//5. ENABLE USART6
		USART_Cmd(USART6, ENABLE);
 8002914:	2101      	movs	r1, #1
 8002916:	4804      	ldr	r0, [pc, #16]	; (8002928 <usartInit+0xa4>)
 8002918:	f000 fcf4 	bl	8003304 <USART_Cmd>
}
 800291c:	bf00      	nop
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40020000 	.word	0x40020000
 8002928:	40011400 	.word	0x40011400

0800292c <hexToAscii>:

static void hexToAscii(char *pByDataOutPut,uint8_t *pByDataInPut,uint8_t byDataLength)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	71fb      	strb	r3, [r7, #7]
	uint8_t byMsb,byLsb;

	static char str[2]={0};
	for(uint8_t i = 0; i<byDataLength; i++)
 800293a:	2300      	movs	r3, #0
 800293c:	757b      	strb	r3, [r7, #21]
 800293e:	e02d      	b.n	800299c <hexToAscii+0x70>
	{
		byMsb = (pByDataInPut[i]>>4);
 8002940:	7d7b      	ldrb	r3, [r7, #21]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	4413      	add	r3, r2
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	75fb      	strb	r3, [r7, #23]
		byLsb = pByDataInPut[i] & 0x0F;
 800294c:	7d7b      	ldrb	r3, [r7, #21]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	4413      	add	r3, r2
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	75bb      	strb	r3, [r7, #22]
		if((byMsb>=0)&&(byMsb<=9))
 800295a:	7dfb      	ldrb	r3, [r7, #23]
 800295c:	2b09      	cmp	r3, #9
 800295e:	d803      	bhi.n	8002968 <hexToAscii+0x3c>
		{
			byMsb += 48;
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	3330      	adds	r3, #48	; 0x30
 8002964:	75fb      	strb	r3, [r7, #23]
 8002966:	e002      	b.n	800296e <hexToAscii+0x42>
		}else
		{
			byMsb += 55;
 8002968:	7dfb      	ldrb	r3, [r7, #23]
 800296a:	3337      	adds	r3, #55	; 0x37
 800296c:	75fb      	strb	r3, [r7, #23]
		}
		if((byLsb>=0)&&(byLsb<=9))
 800296e:	7dbb      	ldrb	r3, [r7, #22]
 8002970:	2b09      	cmp	r3, #9
 8002972:	d803      	bhi.n	800297c <hexToAscii+0x50>
		{
			byLsb += 48;
 8002974:	7dbb      	ldrb	r3, [r7, #22]
 8002976:	3330      	adds	r3, #48	; 0x30
 8002978:	75bb      	strb	r3, [r7, #22]
 800297a:	e002      	b.n	8002982 <hexToAscii+0x56>
		}else
		{
			byLsb += 55;
 800297c:	7dbb      	ldrb	r3, [r7, #22]
 800297e:	3337      	adds	r3, #55	; 0x37
 8002980:	75bb      	strb	r3, [r7, #22]
		}
		str[0] = (char)byMsb;
 8002982:	4a0b      	ldr	r2, [pc, #44]	; (80029b0 <hexToAscii+0x84>)
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	7013      	strb	r3, [r2, #0]
		str[1] = (char)byLsb;
 8002988:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <hexToAscii+0x84>)
 800298a:	7dbb      	ldrb	r3, [r7, #22]
 800298c:	7053      	strb	r3, [r2, #1]
		strcat(pByDataOutPut,str);
 800298e:	4908      	ldr	r1, [pc, #32]	; (80029b0 <hexToAscii+0x84>)
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f003 fb01 	bl	8005f98 <strcat>
	for(uint8_t i = 0; i<byDataLength; i++)
 8002996:	7d7b      	ldrb	r3, [r7, #21]
 8002998:	3301      	adds	r3, #1
 800299a:	757b      	strb	r3, [r7, #21]
 800299c:	7d7a      	ldrb	r2, [r7, #21]
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d3cd      	bcc.n	8002940 <hexToAscii+0x14>
	}
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2000033c 	.word	0x2000033c

080029b4 <printMACLcd>:
 * @brief  In ra man hinh MAC cua thiet bi theo form XX:XX:XX:XX
 * @param
 * @retval None
 */
void printMACLcd(char *pTextMAC,uint8_t x,uint8_t y,const ucg_fntpgm_uint8_t *font)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b08d      	sub	sp, #52	; 0x34
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	72fb      	strb	r3, [r7, #11]
 80029c2:	4613      	mov	r3, r2
 80029c4:	72bb      	strb	r3, [r7, #10]

	char strTemp[24];

	char strTemp2[] = ":";
 80029c6:	233a      	movs	r3, #58	; 0x3a
 80029c8:	823b      	strh	r3, [r7, #16]

	memset(strTemp,0,sizeof(strTemp));
 80029ca:	f107 0314 	add.w	r3, r7, #20
 80029ce:	2218      	movs	r2, #24
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 fad8 	bl	8005f88 <memset>

	uint8_t j = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t i = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for(i = 0; i<strlen(pTextMAC); i++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80029ea:	e02c      	b.n	8002a46 <printMACLcd+0x92>
	{
			if((i%2 == 0)&&(i !=0))
 80029ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d110      	bne.n	8002a1c <printMACLcd+0x68>
 80029fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00c      	beq.n	8002a1c <printMACLcd+0x68>
			{
				j++;
 8002a02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a06:	3301      	adds	r3, #1
 8002a08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				strcat(strTemp,strTemp2);
 8002a0c:	f107 0210 	add.w	r2, r7, #16
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f003 fabe 	bl	8005f98 <strcat>
			}
			strTemp[j] = pTextMAC[i];
 8002a1c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	441a      	add	r2, r3
 8002a24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a28:	7812      	ldrb	r2, [r2, #0]
 8002a2a:	3330      	adds	r3, #48	; 0x30
 8002a2c:	443b      	add	r3, r7
 8002a2e:	f803 2c1c 	strb.w	r2, [r3, #-28]
			j++;
 8002a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a36:	3301      	adds	r3, #1
 8002a38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(i = 0; i<strlen(pTextMAC); i++)
 8002a3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a40:	3301      	adds	r3, #1
 8002a42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002a46:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f7fd fbcc 	bl	80001e8 <strlen>
 8002a50:	4603      	mov	r3, r0
 8002a52:	429c      	cmp	r4, r3
 8002a54:	d3ca      	bcc.n	80029ec <printMACLcd+0x38>
	}
	printText(strTemp,x,y,font);
 8002a56:	7aba      	ldrb	r2, [r7, #10]
 8002a58:	7af9      	ldrb	r1, [r7, #11]
 8002a5a:	f107 0014 	add.w	r0, r7, #20
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f7ff fb6e 	bl	8002140 <printText>

}
 8002a64:	bf00      	nop
 8002a66:	3734      	adds	r7, #52	; 0x34
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd90      	pop	{r4, r7, pc}

08002a6c <USART6x_IRQHandler>:
 * @brief
 * @param  None
 * @retval None
 */
void USART6x_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
	uint8_t byData;
	if(USART_GetITStatus(USART6, USART_IT_RXNE) == SET)
 8002a72:	f240 5125 	movw	r1, #1317	; 0x525
 8002a76:	4810      	ldr	r0, [pc, #64]	; (8002ab8 <USART6x_IRQHandler+0x4c>)
 8002a78:	f000 fcbc 	bl	80033f4 <USART_GetITStatus>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d115      	bne.n	8002aae <USART6x_IRQHandler+0x42>
	{
		byData = USART_ReceiveData(USART6);
 8002a82:	480d      	ldr	r0, [pc, #52]	; (8002ab8 <USART6x_IRQHandler+0x4c>)
 8002a84:	f000 fc5e 	bl	8003344 <USART_ReceiveData>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	71fb      	strb	r3, [r7, #7]
		g_byRxNumByte++;
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <USART6x_IRQHandler+0x50>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	3301      	adds	r3, #1
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <USART6x_IRQHandler+0x50>)
 8002a98:	701a      	strb	r2, [r3, #0]
		bufEnDat(&g_pUartRxQueue,&byData);
 8002a9a:	1dfb      	adds	r3, r7, #7
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4808      	ldr	r0, [pc, #32]	; (8002ac0 <USART6x_IRQHandler+0x54>)
 8002aa0:	f002 fc90 	bl	80053c4 <bufEnDat>
		USART_ClearITPendingBit(USART6, USART_IT_RXNE);
 8002aa4:	f240 5125 	movw	r1, #1317	; 0x525
 8002aa8:	4803      	ldr	r0, [pc, #12]	; (8002ab8 <USART6x_IRQHandler+0x4c>)
 8002aaa:	f000 fcfe 	bl	80034aa <USART_ClearITPendingBit>
	}
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40011400 	.word	0x40011400
 8002abc:	2000030e 	.word	0x2000030e
 8002ac0:	200001f8 	.word	0x200001f8

08002ac4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ac4:	480d      	ldr	r0, [pc, #52]	; (8002afc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ac6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ac8:	f000 f826 	bl	8002b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002acc:	480c      	ldr	r0, [pc, #48]	; (8002b00 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ace:	490d      	ldr	r1, [pc, #52]	; (8002b04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ad0:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <LoopForever+0xe>)
  movs r3, #0
 8002ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ad4:	e002      	b.n	8002adc <LoopCopyDataInit>

08002ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ada:	3304      	adds	r3, #4

08002adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ae0:	d3f9      	bcc.n	8002ad6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ae4:	4c0a      	ldr	r4, [pc, #40]	; (8002b10 <LoopForever+0x16>)
  movs r3, #0
 8002ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ae8:	e001      	b.n	8002aee <LoopFillZerobss>

08002aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aec:	3204      	adds	r2, #4

08002aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002af0:	d3fb      	bcc.n	8002aea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002af2:	f003 fa17 	bl	8005f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002af6:	f7ff fc57 	bl	80023a8 <main>

08002afa <LoopForever>:

LoopForever:
    b LoopForever
 8002afa:	e7fe      	b.n	8002afa <LoopForever>
  ldr   r0, =_estack
 8002afc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b04:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002b08:	08007bc0 	.word	0x08007bc0
  ldr r2, =_sbss
 8002b0c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002b10:	200014e4 	.word	0x200014e4

08002b14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b14:	e7fe      	b.n	8002b14 <ADC_IRQHandler>
	...

08002b18 <SystemInit>:
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <SystemInit+0x60>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	4a15      	ldr	r2, [pc, #84]	; (8002b78 <SystemInit+0x60>)
 8002b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002b2c:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <SystemInit+0x64>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <SystemInit+0x64>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <SystemInit+0x64>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <SystemInit+0x64>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a0e      	ldr	r2, [pc, #56]	; (8002b7c <SystemInit+0x64>)
 8002b44:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <SystemInit+0x64>)
 8002b50:	4a0b      	ldr	r2, [pc, #44]	; (8002b80 <SystemInit+0x68>)
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <SystemInit+0x64>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a08      	ldr	r2, [pc, #32]	; (8002b7c <SystemInit+0x64>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <SystemInit+0x64>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	f000 f889 	bl	8002c7c <SetSysClock>
 8002b6a:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <SystemInit+0x60>)
 8002b6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b70:	609a      	str	r2, [r3, #8]
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	e000ed00 	.word	0xe000ed00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	24003010 	.word	0x24003010

08002b84 <SystemCoreClockUpdate>:
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	2302      	movs	r3, #2
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <SystemCoreClockUpdate+0xe4>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d007      	beq.n	8002bbe <SystemCoreClockUpdate+0x3a>
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d009      	beq.n	8002bc6 <SystemCoreClockUpdate+0x42>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d13d      	bne.n	8002c32 <SystemCoreClockUpdate+0xae>
 8002bb6:	4b2d      	ldr	r3, [pc, #180]	; (8002c6c <SystemCoreClockUpdate+0xe8>)
 8002bb8:	4a2d      	ldr	r2, [pc, #180]	; (8002c70 <SystemCoreClockUpdate+0xec>)
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e03d      	b.n	8002c3a <SystemCoreClockUpdate+0xb6>
 8002bbe:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <SystemCoreClockUpdate+0xe8>)
 8002bc0:	4a2c      	ldr	r2, [pc, #176]	; (8002c74 <SystemCoreClockUpdate+0xf0>)
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e039      	b.n	8002c3a <SystemCoreClockUpdate+0xb6>
 8002bc6:	4b28      	ldr	r3, [pc, #160]	; (8002c68 <SystemCoreClockUpdate+0xe4>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	0d9b      	lsrs	r3, r3, #22
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <SystemCoreClockUpdate+0xe4>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00c      	beq.n	8002bfc <SystemCoreClockUpdate+0x78>
 8002be2:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <SystemCoreClockUpdate+0xf0>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bea:	4a1f      	ldr	r2, [pc, #124]	; (8002c68 <SystemCoreClockUpdate+0xe4>)
 8002bec:	6852      	ldr	r2, [r2, #4]
 8002bee:	0992      	lsrs	r2, r2, #6
 8002bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bf4:	fb02 f303 	mul.w	r3, r2, r3
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	e00b      	b.n	8002c14 <SystemCoreClockUpdate+0x90>
 8002bfc:	4a1c      	ldr	r2, [pc, #112]	; (8002c70 <SystemCoreClockUpdate+0xec>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c04:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <SystemCoreClockUpdate+0xe4>)
 8002c06:	6852      	ldr	r2, [r2, #4]
 8002c08:	0992      	lsrs	r2, r2, #6
 8002c0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c0e:	fb02 f303 	mul.w	r3, r2, r3
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <SystemCoreClockUpdate+0xe4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	4a0f      	ldr	r2, [pc, #60]	; (8002c6c <SystemCoreClockUpdate+0xe8>)
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	e003      	b.n	8002c3a <SystemCoreClockUpdate+0xb6>
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <SystemCoreClockUpdate+0xe8>)
 8002c34:	4a0e      	ldr	r2, [pc, #56]	; (8002c70 <SystemCoreClockUpdate+0xec>)
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	bf00      	nop
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <SystemCoreClockUpdate+0xe4>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	4a0c      	ldr	r2, [pc, #48]	; (8002c78 <SystemCoreClockUpdate+0xf4>)
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <SystemCoreClockUpdate+0xe8>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	fa22 f303 	lsr.w	r3, r2, r3
 8002c56:	4a05      	ldr	r2, [pc, #20]	; (8002c6c <SystemCoreClockUpdate+0xe8>)
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	00f42400 	.word	0x00f42400
 8002c74:	017d7840 	.word	0x017d7840
 8002c78:	20000004 	.word	0x20000004

08002c7c <SetSysClock>:
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <SetSysClock+0x90>)
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <SetSysClock+0x90>)
 8002c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8c:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <SetSysClock+0x94>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1f      	ldr	r2, [pc, #124]	; (8002d10 <SetSysClock+0x94>)
 8002c92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <SetSysClock+0x90>)
 8002c9a:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <SetSysClock+0x90>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	6093      	str	r3, [r2, #8]
 8002ca0:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <SetSysClock+0x90>)
 8002ca2:	4a1a      	ldr	r2, [pc, #104]	; (8002d0c <SetSysClock+0x90>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	6093      	str	r3, [r2, #8]
 8002ca8:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <SetSysClock+0x90>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <SetSysClock+0x90>)
 8002cae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cb2:	6093      	str	r3, [r2, #8]
 8002cb4:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <SetSysClock+0x90>)
 8002cb6:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <SetSysClock+0x98>)
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <SetSysClock+0x90>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <SetSysClock+0x90>)
 8002cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	bf00      	nop
 8002cc8:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <SetSysClock+0x90>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f9      	beq.n	8002cc8 <SetSysClock+0x4c>
 8002cd4:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <SetSysClock+0x9c>)
 8002cd6:	f240 6202 	movw	r2, #1538	; 0x602
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <SetSysClock+0x90>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <SetSysClock+0x90>)
 8002ce2:	f023 0303 	bic.w	r3, r3, #3
 8002ce6:	6093      	str	r3, [r2, #8]
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <SetSysClock+0x90>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <SetSysClock+0x90>)
 8002cee:	f043 0302 	orr.w	r3, r3, #2
 8002cf2:	6093      	str	r3, [r2, #8]
 8002cf4:	bf00      	nop
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <SetSysClock+0x90>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d1f9      	bne.n	8002cf6 <SetSysClock+0x7a>
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40007000 	.word	0x40007000
 8002d14:	08015410 	.word	0x08015410
 8002d18:	40023c00 	.word	0x40023c00

08002d1c <NVIC_Init>:
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73bb      	strb	r3, [r7, #14]
 8002d2c:	230f      	movs	r3, #15
 8002d2e:	737b      	strb	r3, [r7, #13]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	78db      	ldrb	r3, [r3, #3]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d039      	beq.n	8002dac <NVIC_Init+0x90>
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <NVIC_Init+0xbc>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	73fb      	strb	r3, [r7, #15]
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	f1c3 0304 	rsb	r3, r3, #4
 8002d4e:	73bb      	strb	r3, [r7, #14]
 8002d50:	7b7a      	ldrb	r2, [r7, #13]
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	fa42 f303 	asr.w	r3, r2, r3
 8002d58:	737b      	strb	r3, [r7, #13]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	785b      	ldrb	r3, [r3, #1]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	7bbb      	ldrb	r3, [r7, #14]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	789a      	ldrb	r2, [r3, #2]
 8002d6c:	7b7b      	ldrb	r3, [r7, #13]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	73fb      	strb	r3, [r7, #15]
 8002d7e:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <NVIC_Init+0xc0>)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	4413      	add	r3, r2
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	4911      	ldr	r1, [pc, #68]	; (8002ddc <NVIC_Init+0xc0>)
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	7812      	ldrb	r2, [r2, #0]
 8002d9a:	0952      	lsrs	r2, r2, #5
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	4610      	mov	r0, r2
 8002da0:	2201      	movs	r2, #1
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 8002daa:	e00f      	b.n	8002dcc <NVIC_Init+0xb0>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	4909      	ldr	r1, [pc, #36]	; (8002ddc <NVIC_Init+0xc0>)
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	7812      	ldrb	r2, [r2, #0]
 8002dba:	0952      	lsrs	r2, r2, #5
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	f100 0320 	add.w	r3, r0, #32
 8002dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00
 8002ddc:	e000e100 	.word	0xe000e100

08002de0 <GPIO_Init>:
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	e076      	b.n	8002eea <GPIO_Init+0x10a>
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d165      	bne.n	8002ee4 <GPIO_Init+0x104>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	2103      	movs	r1, #3
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	401a      	ands	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	791b      	ldrb	r3, [r3, #4]
 8002e36:	4619      	mov	r1, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	791b      	ldrb	r3, [r3, #4]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d003      	beq.n	8002e56 <GPIO_Init+0x76>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	791b      	ldrb	r3, [r3, #4]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d12e      	bne.n	8002eb4 <GPIO_Init+0xd4>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2103      	movs	r1, #3
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	401a      	ands	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	795b      	ldrb	r3, [r3, #5]
 8002e74:	4619      	mov	r1, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	2301      	movs	r3, #1
 8002e90:	408b      	lsls	r3, r1
 8002e92:	43db      	mvns	r3, r3
 8002e94:	401a      	ands	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	7992      	ldrb	r2, [r2, #6]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	b292      	uxth	r2, r2
 8002ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eac:	b292      	uxth	r2, r2
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2103      	movs	r1, #3
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	60da      	str	r2, [r3, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	79db      	ldrb	r3, [r3, #7]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	60da      	str	r2, [r3, #12]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b0f      	cmp	r3, #15
 8002eee:	d985      	bls.n	8002dfc <GPIO_Init+0x1c>
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <GPIO_WriteBit>:
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	807b      	strh	r3, [r7, #2]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	707b      	strb	r3, [r7, #1]
 8002f0c:	787b      	ldrb	r3, [r7, #1]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <GPIO_WriteBit+0x1e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	887a      	ldrh	r2, [r7, #2]
 8002f16:	831a      	strh	r2, [r3, #24]
 8002f18:	e002      	b.n	8002f20 <GPIO_WriteBit+0x24>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	887a      	ldrh	r2, [r7, #2]
 8002f1e:	835a      	strh	r2, [r3, #26]
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <GPIO_PinAFConfig>:
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	2300      	movs	r3, #0
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	787a      	ldrb	r2, [r7, #1]
 8002f46:	887b      	ldrh	r3, [r7, #2]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	887b      	ldrh	r3, [r7, #2]
 8002f56:	08db      	lsrs	r3, r3, #3
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3208      	adds	r2, #8
 8002f60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f64:	887b      	ldrh	r3, [r7, #2]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	210f      	movs	r1, #15
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	8879      	ldrh	r1, [r7, #2]
 8002f76:	08c9      	lsrs	r1, r1, #3
 8002f78:	b289      	uxth	r1, r1
 8002f7a:	4608      	mov	r0, r1
 8002f7c:	ea02 0103 	and.w	r1, r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f100 0208 	add.w	r2, r0, #8
 8002f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002f8a:	887b      	ldrh	r3, [r7, #2]
 8002f8c:	08db      	lsrs	r3, r3, #3
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	461a      	mov	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3208      	adds	r2, #8
 8002f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	887b      	ldrh	r3, [r7, #2]
 8002fa2:	08db      	lsrs	r3, r3, #3
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3208      	adds	r2, #8
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <RCC_GetClocksFreq>:
 8002fc0:	b480      	push	{r7}
 8002fc2:	b089      	sub	sp, #36	; 0x24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	2302      	movs	r3, #2
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	4b47      	ldr	r3, [pc, #284]	; (8003100 <RCC_GetClocksFreq+0x140>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d007      	beq.n	8003000 <RCC_GetClocksFreq+0x40>
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d009      	beq.n	8003008 <RCC_GetClocksFreq+0x48>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d13d      	bne.n	8003074 <RCC_GetClocksFreq+0xb4>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a42      	ldr	r2, [pc, #264]	; (8003104 <RCC_GetClocksFreq+0x144>)
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e03d      	b.n	800307c <RCC_GetClocksFreq+0xbc>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a41      	ldr	r2, [pc, #260]	; (8003108 <RCC_GetClocksFreq+0x148>)
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e039      	b.n	800307c <RCC_GetClocksFreq+0xbc>
 8003008:	4b3d      	ldr	r3, [pc, #244]	; (8003100 <RCC_GetClocksFreq+0x140>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	0d9b      	lsrs	r3, r3, #22
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	4b3a      	ldr	r3, [pc, #232]	; (8003100 <RCC_GetClocksFreq+0x140>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00c      	beq.n	800303e <RCC_GetClocksFreq+0x7e>
 8003024:	4a38      	ldr	r2, [pc, #224]	; (8003108 <RCC_GetClocksFreq+0x148>)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	fbb2 f3f3 	udiv	r3, r2, r3
 800302c:	4a34      	ldr	r2, [pc, #208]	; (8003100 <RCC_GetClocksFreq+0x140>)
 800302e:	6852      	ldr	r2, [r2, #4]
 8003030:	0992      	lsrs	r2, r2, #6
 8003032:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	61fb      	str	r3, [r7, #28]
 800303c:	e00b      	b.n	8003056 <RCC_GetClocksFreq+0x96>
 800303e:	4a31      	ldr	r2, [pc, #196]	; (8003104 <RCC_GetClocksFreq+0x144>)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	4a2e      	ldr	r2, [pc, #184]	; (8003100 <RCC_GetClocksFreq+0x140>)
 8003048:	6852      	ldr	r2, [r2, #4]
 800304a:	0992      	lsrs	r2, r2, #6
 800304c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	4b2a      	ldr	r3, [pc, #168]	; (8003100 <RCC_GetClocksFreq+0x140>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	0c1b      	lsrs	r3, r3, #16
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	3301      	adds	r3, #1
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	fbb2 f2f3 	udiv	r2, r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e003      	b.n	800307c <RCC_GetClocksFreq+0xbc>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a23      	ldr	r2, [pc, #140]	; (8003104 <RCC_GetClocksFreq+0x144>)
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	bf00      	nop
 800307c:	4b20      	ldr	r3, [pc, #128]	; (8003100 <RCC_GetClocksFreq+0x140>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	4a1f      	ldr	r2, [pc, #124]	; (800310c <RCC_GetClocksFreq+0x14c>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	4413      	add	r3, r2
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	40da      	lsrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	4b16      	ldr	r3, [pc, #88]	; (8003100 <RCC_GetClocksFreq+0x140>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80030ac:	61bb      	str	r3, [r7, #24]
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	0a9b      	lsrs	r3, r3, #10
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	4a15      	ldr	r2, [pc, #84]	; (800310c <RCC_GetClocksFreq+0x14c>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4413      	add	r3, r2
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	40da      	lsrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <RCC_GetClocksFreq+0x140>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	0b5b      	lsrs	r3, r3, #13
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	4a0b      	ldr	r2, [pc, #44]	; (800310c <RCC_GetClocksFreq+0x14c>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4413      	add	r3, r2
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	40da      	lsrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	60da      	str	r2, [r3, #12]
 80030f4:	bf00      	nop
 80030f6:	3724      	adds	r7, #36	; 0x24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40023800 	.word	0x40023800
 8003104:	00f42400 	.word	0x00f42400
 8003108:	017d7840 	.word	0x017d7840
 800310c:	20000014 	.word	0x20000014

08003110 <RCC_AHB1PeriphClockCmd>:
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	70fb      	strb	r3, [r7, #3]
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <RCC_AHB1PeriphClockCmd+0x20>
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <RCC_AHB1PeriphClockCmd+0x3c>)
 8003124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003126:	4909      	ldr	r1, [pc, #36]	; (800314c <RCC_AHB1PeriphClockCmd+0x3c>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4313      	orrs	r3, r2
 800312c:	630b      	str	r3, [r1, #48]	; 0x30
 800312e:	e006      	b.n	800313e <RCC_AHB1PeriphClockCmd+0x2e>
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <RCC_AHB1PeriphClockCmd+0x3c>)
 8003132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	43db      	mvns	r3, r3
 8003138:	4904      	ldr	r1, [pc, #16]	; (800314c <RCC_AHB1PeriphClockCmd+0x3c>)
 800313a:	4013      	ands	r3, r2
 800313c:	630b      	str	r3, [r1, #48]	; 0x30
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800

08003150 <RCC_APB2PeriphClockCmd>:
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	70fb      	strb	r3, [r7, #3]
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d006      	beq.n	8003170 <RCC_APB2PeriphClockCmd+0x20>
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <RCC_APB2PeriphClockCmd+0x3c>)
 8003164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003166:	4909      	ldr	r1, [pc, #36]	; (800318c <RCC_APB2PeriphClockCmd+0x3c>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4313      	orrs	r3, r2
 800316c:	644b      	str	r3, [r1, #68]	; 0x44
 800316e:	e006      	b.n	800317e <RCC_APB2PeriphClockCmd+0x2e>
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <RCC_APB2PeriphClockCmd+0x3c>)
 8003172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	43db      	mvns	r3, r3
 8003178:	4904      	ldr	r1, [pc, #16]	; (800318c <RCC_APB2PeriphClockCmd+0x3c>)
 800317a:	4013      	ands	r3, r2
 800317c:	644b      	str	r3, [r1, #68]	; 0x44
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800

08003190 <USART_Init>:
 8003190:	b580      	push	{r7, lr}
 8003192:	b08a      	sub	sp, #40	; 0x28
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
 800319e:	2300      	movs	r3, #0
 80031a0:	623b      	str	r3, [r7, #32]
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	2300      	movs	r3, #0
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	8a1b      	ldrh	r3, [r3, #16]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	88db      	ldrh	r3, [r3, #6]
 80031be:	461a      	mov	r2, r3
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	4313      	orrs	r3, r2
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	821a      	strh	r2, [r3, #16]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	899b      	ldrh	r3, [r3, #12]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031dc:	f023 030c 	bic.w	r3, r3, #12
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	889a      	ldrh	r2, [r3, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	891b      	ldrh	r3, [r3, #8]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	895b      	ldrh	r3, [r3, #10]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	4313      	orrs	r3, r2
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	b29a      	uxth	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	819a      	strh	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	8a9b      	ldrh	r3, [r3, #20]
 800320a:	b29b      	uxth	r3, r3
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	899b      	ldrh	r3, [r3, #12]
 800321a:	461a      	mov	r2, r3
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	4313      	orrs	r3, r2
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	b29a      	uxth	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	829a      	strh	r2, [r3, #20]
 800322a:	f107 0308 	add.w	r3, r7, #8
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fec6 	bl	8002fc0 <RCC_GetClocksFreq>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a30      	ldr	r2, [pc, #192]	; (80032f8 <USART_Init+0x168>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d003      	beq.n	8003244 <USART_Init+0xb4>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a2f      	ldr	r2, [pc, #188]	; (80032fc <USART_Init+0x16c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d102      	bne.n	800324a <USART_Init+0xba>
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	623b      	str	r3, [r7, #32]
 8003248:	e001      	b.n	800324e <USART_Init+0xbe>
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	623b      	str	r3, [r7, #32]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	899b      	ldrh	r3, [r3, #12]
 8003252:	b29b      	uxth	r3, r3
 8003254:	b21b      	sxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	da0c      	bge.n	8003274 <USART_Init+0xe4>
 800325a:	6a3a      	ldr	r2, [r7, #32]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	009a      	lsls	r2, r3, #2
 8003264:	441a      	add	r2, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	e00b      	b.n	800328c <USART_Init+0xfc>
 8003274:	6a3a      	ldr	r2, [r7, #32]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	009a      	lsls	r2, r3, #2
 800327e:	441a      	add	r2, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <USART_Init+0x170>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	2264      	movs	r2, #100	; 0x64
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	899b      	ldrh	r3, [r3, #12]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	da0c      	bge.n	80032d0 <USART_Init+0x140>
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	3332      	adds	r3, #50	; 0x32
 80032bc:	4a10      	ldr	r2, [pc, #64]	; (8003300 <USART_Init+0x170>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ca:	4313      	orrs	r3, r2
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
 80032ce:	e00b      	b.n	80032e8 <USART_Init+0x158>
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	3332      	adds	r3, #50	; 0x32
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <USART_Init+0x170>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e4:	4313      	orrs	r3, r2
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	811a      	strh	r2, [r3, #8]
 80032f0:	bf00      	nop
 80032f2:	3728      	adds	r7, #40	; 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40011000 	.word	0x40011000
 80032fc:	40011400 	.word	0x40011400
 8003300:	51eb851f 	.word	0x51eb851f

08003304 <USART_Cmd>:
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	70fb      	strb	r3, [r7, #3]
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <USART_Cmd+0x24>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	899b      	ldrh	r3, [r3, #12]
 800331a:	b29b      	uxth	r3, r3
 800331c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003320:	b29a      	uxth	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	819a      	strh	r2, [r3, #12]
 8003326:	e007      	b.n	8003338 <USART_Cmd+0x34>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	899b      	ldrh	r3, [r3, #12]
 800332c:	b29b      	uxth	r3, r3
 800332e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003332:	b29a      	uxth	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	819a      	strh	r2, [r3, #12]
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <USART_ReceiveData>:
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	889b      	ldrh	r3, [r3, #4]
 8003350:	b29b      	uxth	r3, r3
 8003352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003356:	b29b      	uxth	r3, r3
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <USART_ITConfig>:
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	807b      	strh	r3, [r7, #2]
 8003370:	4613      	mov	r3, r2
 8003372:	707b      	strb	r3, [r7, #1]
 8003374:	2300      	movs	r3, #0
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	2300      	movs	r3, #0
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	b2db      	uxtb	r3, r3
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	887b      	ldrh	r3, [r7, #2]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d103      	bne.n	80033b2 <USART_ITConfig+0x4e>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	330c      	adds	r3, #12
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	e009      	b.n	80033c6 <USART_ITConfig+0x62>
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d103      	bne.n	80033c0 <USART_ITConfig+0x5c>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	3310      	adds	r3, #16
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	e002      	b.n	80033c6 <USART_ITConfig+0x62>
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	3314      	adds	r3, #20
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	787b      	ldrb	r3, [r7, #1]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d006      	beq.n	80033da <USART_ITConfig+0x76>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	e006      	b.n	80033e8 <USART_ITConfig+0x84>
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	6819      	ldr	r1, [r3, #0]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	400a      	ands	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <USART_GetITStatus>:
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	807b      	strh	r3, [r7, #2]
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	2300      	movs	r3, #0
 800340e:	74fb      	strb	r3, [r7, #19]
 8003410:	887b      	ldrh	r3, [r7, #2]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	b2db      	uxtb	r3, r3
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	887b      	ldrh	r3, [r7, #2]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	2201      	movs	r2, #1
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d107      	bne.n	8003442 <USART_GetITStatus+0x4e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	899b      	ldrh	r3, [r3, #12]
 8003436:	b29b      	uxth	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	4013      	ands	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	e011      	b.n	8003466 <USART_GetITStatus+0x72>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d107      	bne.n	8003458 <USART_GetITStatus+0x64>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8a1b      	ldrh	r3, [r3, #16]
 800344c:	b29b      	uxth	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	4013      	ands	r3, r2
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e006      	b.n	8003466 <USART_GetITStatus+0x72>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8a9b      	ldrh	r3, [r3, #20]
 800345c:	b29b      	uxth	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	4013      	ands	r3, r2
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	887b      	ldrh	r3, [r7, #2]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	b29b      	uxth	r3, r3
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4013      	ands	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <USART_GetITStatus+0xa4>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <USART_GetITStatus+0xa4>
 8003492:	2301      	movs	r3, #1
 8003494:	74fb      	strb	r3, [r7, #19]
 8003496:	e001      	b.n	800349c <USART_GetITStatus+0xa8>
 8003498:	2300      	movs	r3, #0
 800349a:	74fb      	strb	r3, [r7, #19]
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	4618      	mov	r0, r3
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <USART_ClearITPendingBit>:
 80034aa:	b480      	push	{r7}
 80034ac:	b085      	sub	sp, #20
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	807b      	strh	r3, [r7, #2]
 80034b6:	2300      	movs	r3, #0
 80034b8:	81fb      	strh	r3, [r7, #14]
 80034ba:	2300      	movs	r3, #0
 80034bc:	81bb      	strh	r3, [r7, #12]
 80034be:	887b      	ldrh	r3, [r7, #2]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	81fb      	strh	r3, [r7, #14]
 80034c4:	89fb      	ldrh	r3, [r7, #14]
 80034c6:	2201      	movs	r2, #1
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	81bb      	strh	r3, [r7, #12]
 80034ce:	89bb      	ldrh	r3, [r7, #12]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	801a      	strh	r2, [r3, #0]
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <NVIC_SetPriority>:
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	6039      	str	r1, [r7, #0]
 80034ee:	71fb      	strb	r3, [r7, #7]
 80034f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	da0b      	bge.n	8003510 <NVIC_SetPriority+0x2c>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	490c      	ldr	r1, [pc, #48]	; (8003530 <NVIC_SetPriority+0x4c>)
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	3b04      	subs	r3, #4
 8003506:	0112      	lsls	r2, r2, #4
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	440b      	add	r3, r1
 800350c:	761a      	strb	r2, [r3, #24]
 800350e:	e009      	b.n	8003524 <NVIC_SetPriority+0x40>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	b2da      	uxtb	r2, r3
 8003514:	4907      	ldr	r1, [pc, #28]	; (8003534 <NVIC_SetPriority+0x50>)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	0112      	lsls	r2, r2, #4
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	440b      	add	r3, r1
 8003520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000ed00 	.word	0xe000ed00
 8003534:	e000e100 	.word	0xe000e100

08003538 <SysTick_Config>:
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003548:	d301      	bcc.n	800354e <SysTick_Config+0x16>
 800354a:	2301      	movs	r3, #1
 800354c:	e00f      	b.n	800356e <SysTick_Config+0x36>
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <SysTick_Config+0x40>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	6053      	str	r3, [r2, #4]
 8003556:	210f      	movs	r1, #15
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	f7ff ffc2 	bl	80034e4 <NVIC_SetPriority>
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <SysTick_Config+0x40>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
 8003566:	4b04      	ldr	r3, [pc, #16]	; (8003578 <SysTick_Config+0x40>)
 8003568:	2207      	movs	r2, #7
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	2300      	movs	r3, #0
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	e000e010 	.word	0xe000e010

0800357c <TimerInit>:
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	463b      	mov	r3, r7
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fd1b 	bl	8002fc0 <RCC_GetClocksFreq>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <TimerInit+0x3c>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ffcf 	bl	8003538 <SysTick_Config>
 800359a:	2101      	movs	r1, #1
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f7ff ffa0 	bl	80034e4 <NVIC_SetPriority>
 80035a4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80035a8:	2100      	movs	r1, #0
 80035aa:	4804      	ldr	r0, [pc, #16]	; (80035bc <TimerInit+0x40>)
 80035ac:	f001 ff9a 	bl	80054e4 <memsetl>
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	10624dd3 	.word	0x10624dd3
 80035bc:	20000340 	.word	0x20000340

080035c0 <TimerStart>:
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	71fb      	strb	r3, [r7, #7]
 80035d0:	2300      	movs	r3, #0
 80035d2:	75fb      	strb	r3, [r7, #23]
 80035d4:	e04c      	b.n	8003670 <TimerStart+0xb0>
 80035d6:	7dfa      	ldrb	r2, [r7, #23]
 80035d8:	4929      	ldr	r1, [pc, #164]	; (8003680 <TimerStart+0xc0>)
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	440b      	add	r3, r1
 80035e4:	3310      	adds	r3, #16
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d13e      	bne.n	800366a <TimerStart+0xaa>
 80035ec:	7dfa      	ldrb	r2, [r7, #23]
 80035ee:	4924      	ldr	r1, [pc, #144]	; (8003680 <TimerStart+0xc0>)
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	440b      	add	r3, r1
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	7dfa      	ldrb	r2, [r7, #23]
 8003600:	491f      	ldr	r1, [pc, #124]	; (8003680 <TimerStart+0xc0>)
 8003602:	4613      	mov	r3, r2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4413      	add	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	440b      	add	r3, r1
 800360c:	3310      	adds	r3, #16
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	7dfa      	ldrb	r2, [r7, #23]
 8003614:	491a      	ldr	r1, [pc, #104]	; (8003680 <TimerStart+0xc0>)
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	440b      	add	r3, r1
 8003620:	330c      	adds	r3, #12
 8003622:	79fa      	ldrb	r2, [r7, #7]
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	7dfa      	ldrb	r2, [r7, #23]
 8003628:	4915      	ldr	r1, [pc, #84]	; (8003680 <TimerStart+0xc0>)
 800362a:	4613      	mov	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	440b      	add	r3, r1
 8003634:	3314      	adds	r3, #20
 8003636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	7dfc      	ldrb	r4, [r7, #23]
 800363c:	f000 f872 	bl	8003724 <GetMilSecTick>
 8003640:	4601      	mov	r1, r0
 8003642:	4a0f      	ldr	r2, [pc, #60]	; (8003680 <TimerStart+0xc0>)
 8003644:	4623      	mov	r3, r4
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4423      	add	r3, r4
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	3304      	adds	r3, #4
 8003650:	6019      	str	r1, [r3, #0]
 8003652:	7dfa      	ldrb	r2, [r7, #23]
 8003654:	490a      	ldr	r1, [pc, #40]	; (8003680 <TimerStart+0xc0>)
 8003656:	4613      	mov	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	440b      	add	r3, r1
 8003660:	3308      	adds	r3, #8
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	e006      	b.n	8003678 <TimerStart+0xb8>
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	3301      	adds	r3, #1
 800366e:	75fb      	strb	r3, [r7, #23]
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	2b0f      	cmp	r3, #15
 8003674:	d9af      	bls.n	80035d6 <TimerStart+0x16>
 8003676:	23ff      	movs	r3, #255	; 0xff
 8003678:	4618      	mov	r0, r3
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	bd90      	pop	{r4, r7, pc}
 8003680:	20000340 	.word	0x20000340

08003684 <TimerStop>:
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	2b0f      	cmp	r3, #15
 8003692:	d80a      	bhi.n	80036aa <TimerStop+0x26>
 8003694:	79fa      	ldrb	r2, [r7, #7]
 8003696:	4922      	ldr	r1, [pc, #136]	; (8003720 <TimerStop+0x9c>)
 8003698:	4613      	mov	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	440b      	add	r3, r1
 80036a2:	3310      	adds	r3, #16
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <TimerStop+0x2a>
 80036aa:	2300      	movs	r3, #0
 80036ac:	e031      	b.n	8003712 <TimerStop+0x8e>
 80036ae:	79fa      	ldrb	r2, [r7, #7]
 80036b0:	491b      	ldr	r1, [pc, #108]	; (8003720 <TimerStop+0x9c>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	440b      	add	r3, r1
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	79fa      	ldrb	r2, [r7, #7]
 80036c2:	4917      	ldr	r1, [pc, #92]	; (8003720 <TimerStop+0x9c>)
 80036c4:	4613      	mov	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	440b      	add	r3, r1
 80036ce:	3310      	adds	r3, #16
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	79fa      	ldrb	r2, [r7, #7]
 80036d6:	4912      	ldr	r1, [pc, #72]	; (8003720 <TimerStop+0x9c>)
 80036d8:	4613      	mov	r3, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4413      	add	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	440b      	add	r3, r1
 80036e2:	330c      	adds	r3, #12
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	79fa      	ldrb	r2, [r7, #7]
 80036ea:	490d      	ldr	r1, [pc, #52]	; (8003720 <TimerStop+0x9c>)
 80036ec:	4613      	mov	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4413      	add	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	440b      	add	r3, r1
 80036f6:	3308      	adds	r3, #8
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	79fa      	ldrb	r2, [r7, #7]
 80036fe:	4908      	ldr	r1, [pc, #32]	; (8003720 <TimerStop+0x9c>)
 8003700:	4613      	mov	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4413      	add	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	440b      	add	r3, r1
 800370a:	3304      	adds	r3, #4
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	2301      	movs	r3, #1
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000340 	.word	0x20000340

08003724 <GetMilSecTick>:
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
 8003728:	4b03      	ldr	r3, [pc, #12]	; (8003738 <GetMilSecTick+0x14>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	200004c0 	.word	0x200004c0

0800373c <processTimerScheduler>:
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	2300      	movs	r3, #0
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	e068      	b.n	800381a <processTimerScheduler+0xde>
 8003748:	7bfa      	ldrb	r2, [r7, #15]
 800374a:	4937      	ldr	r1, [pc, #220]	; (8003828 <processTimerScheduler+0xec>)
 800374c:	4613      	mov	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	440b      	add	r3, r1
 8003756:	3310      	adds	r3, #16
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d05a      	beq.n	8003814 <processTimerScheduler+0xd8>
 800375e:	7bfb      	ldrb	r3, [r7, #15]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 f863 	bl	800382c <TimeExpired>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d053      	beq.n	8003814 <processTimerScheduler+0xd8>
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	492e      	ldr	r1, [pc, #184]	; (8003828 <processTimerScheduler+0xec>)
 8003770:	4613      	mov	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4413      	add	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	440b      	add	r3, r1
 800377a:	3310      	adds	r3, #16
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	7bfa      	ldrb	r2, [r7, #15]
 8003782:	4929      	ldr	r1, [pc, #164]	; (8003828 <processTimerScheduler+0xec>)
 8003784:	4613      	mov	r3, r2
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4413      	add	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	440b      	add	r3, r1
 800378e:	3314      	adds	r3, #20
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	607b      	str	r3, [r7, #4]
 8003794:	7bfa      	ldrb	r2, [r7, #15]
 8003796:	4924      	ldr	r1, [pc, #144]	; (8003828 <processTimerScheduler+0xec>)
 8003798:	4613      	mov	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4413      	add	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	440b      	add	r3, r1
 80037a2:	330c      	adds	r3, #12
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2bff      	cmp	r3, #255	; 0xff
 80037aa:	d020      	beq.n	80037ee <processTimerScheduler+0xb2>
 80037ac:	7bfa      	ldrb	r2, [r7, #15]
 80037ae:	491e      	ldr	r1, [pc, #120]	; (8003828 <processTimerScheduler+0xec>)
 80037b0:	4613      	mov	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4413      	add	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	440b      	add	r3, r1
 80037ba:	330c      	adds	r3, #12
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d014      	beq.n	80037ee <processTimerScheduler+0xb2>
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	4918      	ldr	r1, [pc, #96]	; (8003828 <processTimerScheduler+0xec>)
 80037c8:	4613      	mov	r3, r2
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	4413      	add	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	440b      	add	r3, r1
 80037d2:	330c      	adds	r3, #12
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b2d8      	uxtb	r0, r3
 80037dc:	4912      	ldr	r1, [pc, #72]	; (8003828 <processTimerScheduler+0xec>)
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	440b      	add	r3, r1
 80037e8:	330c      	adds	r3, #12
 80037ea:	4602      	mov	r2, r0
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	490d      	ldr	r1, [pc, #52]	; (8003828 <processTimerScheduler+0xec>)
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	440b      	add	r3, r1
 80037fc:	330c      	adds	r3, #12
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d103      	bne.n	800380e <processTimerScheduler+0xd2>
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ff3b 	bl	8003684 <TimerStop>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	3301      	adds	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	2b0f      	cmp	r3, #15
 800381e:	d993      	bls.n	8003748 <processTimerScheduler+0xc>
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20000340 	.word	0x20000340

0800382c <TimeExpired>:
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	b672      	cpsid	i
 800383c:	f7ff ff72 	bl	8003724 <GetMilSecTick>
 8003840:	60b8      	str	r0, [r7, #8]
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	2b0f      	cmp	r3, #15
 8003846:	d80a      	bhi.n	800385e <TimeExpired+0x32>
 8003848:	79fa      	ldrb	r2, [r7, #7]
 800384a:	492a      	ldr	r1, [pc, #168]	; (80038f4 <TimeExpired+0xc8>)
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	440b      	add	r3, r1
 8003856:	3310      	adds	r3, #16
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d102      	bne.n	8003864 <TimeExpired+0x38>
 800385e:	b662      	cpsie	i
 8003860:	2300      	movs	r3, #0
 8003862:	e042      	b.n	80038ea <TimeExpired+0xbe>
 8003864:	79fa      	ldrb	r2, [r7, #7]
 8003866:	4923      	ldr	r1, [pc, #140]	; (80038f4 <TimeExpired+0xc8>)
 8003868:	4613      	mov	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	440b      	add	r3, r1
 8003872:	3304      	adds	r3, #4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	429a      	cmp	r2, r3
 800387a:	d30c      	bcc.n	8003896 <TimeExpired+0x6a>
 800387c:	79fa      	ldrb	r2, [r7, #7]
 800387e:	491d      	ldr	r1, [pc, #116]	; (80038f4 <TimeExpired+0xc8>)
 8003880:	4613      	mov	r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	4413      	add	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	440b      	add	r3, r1
 800388a:	3304      	adds	r3, #4
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	e00e      	b.n	80038b4 <TimeExpired+0x88>
 8003896:	79fa      	ldrb	r2, [r7, #7]
 8003898:	4916      	ldr	r1, [pc, #88]	; (80038f4 <TimeExpired+0xc8>)
 800389a:	4613      	mov	r3, r2
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4413      	add	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	440b      	add	r3, r1
 80038a4:	3304      	adds	r3, #4
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	43db      	mvns	r3, r3
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	79fa      	ldrb	r2, [r7, #7]
 80038b6:	490f      	ldr	r1, [pc, #60]	; (80038f4 <TimeExpired+0xc8>)
 80038b8:	4613      	mov	r3, r2
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	4413      	add	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	440b      	add	r3, r1
 80038c2:	3308      	adds	r3, #8
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d202      	bcs.n	80038d2 <TimeExpired+0xa6>
 80038cc:	b662      	cpsie	i
 80038ce:	2300      	movs	r3, #0
 80038d0:	e00b      	b.n	80038ea <TimeExpired+0xbe>
 80038d2:	79fa      	ldrb	r2, [r7, #7]
 80038d4:	4907      	ldr	r1, [pc, #28]	; (80038f4 <TimeExpired+0xc8>)
 80038d6:	4613      	mov	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4413      	add	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	440b      	add	r3, r1
 80038e0:	3304      	adds	r3, #4
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	b662      	cpsie	i
 80038e8:	2301      	movs	r3, #1
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000340 	.word	0x20000340

080038f8 <SysTick_Handler>:
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <SysTick_Handler+0x18>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3301      	adds	r3, #1
 8003902:	4a03      	ldr	r2, [pc, #12]	; (8003910 <SysTick_Handler+0x18>)
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	bf00      	nop
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	200004c0 	.word	0x200004c0

08003914 <delayMicroseconds>:
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <ucg_gpio_init>:
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	2101      	movs	r1, #1
 8003930:	2007      	movs	r0, #7
 8003932:	f7ff fbed 	bl	8003110 <RCC_AHB1PeriphClockCmd>
 8003936:	2301      	movs	r3, #1
 8003938:	713b      	strb	r3, [r7, #4]
 800393a:	2303      	movs	r3, #3
 800393c:	717b      	strb	r3, [r7, #5]
 800393e:	2300      	movs	r3, #0
 8003940:	71bb      	strb	r3, [r7, #6]
 8003942:	2300      	movs	r3, #0
 8003944:	71fb      	strb	r3, [r7, #7]
 8003946:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	463b      	mov	r3, r7
 800394e:	4619      	mov	r1, r3
 8003950:	480a      	ldr	r0, [pc, #40]	; (800397c <ucg_gpio_init+0x54>)
 8003952:	f7ff fa45 	bl	8002de0 <GPIO_Init>
 8003956:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	463b      	mov	r3, r7
 800395e:	4619      	mov	r1, r3
 8003960:	4807      	ldr	r0, [pc, #28]	; (8003980 <ucg_gpio_init+0x58>)
 8003962:	f7ff fa3d 	bl	8002de0 <GPIO_Init>
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	463b      	mov	r3, r7
 800396c:	4619      	mov	r1, r3
 800396e:	4805      	ldr	r0, [pc, #20]	; (8003984 <ucg_gpio_init+0x5c>)
 8003970:	f7ff fa36 	bl	8002de0 <GPIO_Init>
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40020000 	.word	0x40020000
 8003980:	40020400 	.word	0x40020400
 8003984:	40020800 	.word	0x40020800

08003988 <ucg_com_arduino_send_generic_SW_SPI>:
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
 8003994:	2308      	movs	r3, #8
 8003996:	73fb      	strb	r3, [r7, #15]
 8003998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800399c:	2b00      	cmp	r3, #0
 800399e:	da05      	bge.n	80039ac <ucg_com_arduino_send_generic_SW_SPI+0x24>
 80039a0:	2201      	movs	r2, #1
 80039a2:	2180      	movs	r1, #128	; 0x80
 80039a4:	4814      	ldr	r0, [pc, #80]	; (80039f8 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80039a6:	f7ff faa9 	bl	8002efc <GPIO_WriteBit>
 80039aa:	e004      	b.n	80039b6 <ucg_com_arduino_send_generic_SW_SPI+0x2e>
 80039ac:	2200      	movs	r2, #0
 80039ae:	2180      	movs	r1, #128	; 0x80
 80039b0:	4811      	ldr	r0, [pc, #68]	; (80039f8 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80039b2:	f7ff faa3 	bl	8002efc <GPIO_WriteBit>
 80039b6:	2001      	movs	r0, #1
 80039b8:	f7ff ffac 	bl	8003914 <delayMicroseconds>
 80039bc:	2201      	movs	r2, #1
 80039be:	2120      	movs	r1, #32
 80039c0:	480d      	ldr	r0, [pc, #52]	; (80039f8 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80039c2:	f7ff fa9b 	bl	8002efc <GPIO_WriteBit>
 80039c6:	2001      	movs	r0, #1
 80039c8:	f7ff ffa4 	bl	8003914 <delayMicroseconds>
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
 80039d2:	2200      	movs	r2, #0
 80039d4:	2120      	movs	r1, #32
 80039d6:	4808      	ldr	r0, [pc, #32]	; (80039f8 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80039d8:	f7ff fa90 	bl	8002efc <GPIO_WriteBit>
 80039dc:	2001      	movs	r0, #1
 80039de:	f7ff ff99 	bl	8003914 <delayMicroseconds>
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	70fb      	strb	r3, [r7, #3]
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1d4      	bne.n	8003998 <ucg_com_arduino_send_generic_SW_SPI+0x10>
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40020000 	.word	0x40020000

080039fc <ucg_com_arduino_generic_SW_SPI>:
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	817b      	strh	r3, [r7, #10]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	813b      	strh	r3, [r7, #8]
 8003a0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a12:	3b0a      	subs	r3, #10
 8003a14:	2b0b      	cmp	r3, #11
 8003a16:	f200 80dc 	bhi.w	8003bd2 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <ucg_com_arduino_generic_SW_SPI+0x24>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a51 	.word	0x08003a51
 8003a24:	08003bd3 	.word	0x08003bd3
 8003a28:	08003aa3 	.word	0x08003aa3
 8003a2c:	08003aad 	.word	0x08003aad
 8003a30:	08003abd 	.word	0x08003abd
 8003a34:	08003acd 	.word	0x08003acd
 8003a38:	08003adf 	.word	0x08003adf
 8003a3c:	08003aff 	.word	0x08003aff
 8003a40:	08003b27 	.word	0x08003b27
 8003a44:	08003b5d 	.word	0x08003b5d
 8003a48:	08003b7b 	.word	0x08003b7b
 8003a4c:	08003bcb 	.word	0x08003bcb
 8003a50:	f7ff ff6a 	bl	8003928 <ucg_gpio_init>
 8003a54:	2201      	movs	r2, #1
 8003a56:	2180      	movs	r1, #128	; 0x80
 8003a58:	4860      	ldr	r0, [pc, #384]	; (8003bdc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003a5a:	f7ff fa4f 	bl	8002efc <GPIO_WriteBit>
 8003a5e:	2201      	movs	r2, #1
 8003a60:	2140      	movs	r1, #64	; 0x40
 8003a62:	485f      	ldr	r0, [pc, #380]	; (8003be0 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8003a64:	f7ff fa4a 	bl	8002efc <GPIO_WriteBit>
 8003a68:	2201      	movs	r2, #1
 8003a6a:	2180      	movs	r1, #128	; 0x80
 8003a6c:	485d      	ldr	r0, [pc, #372]	; (8003be4 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8003a6e:	f7ff fa45 	bl	8002efc <GPIO_WriteBit>
 8003a72:	2201      	movs	r2, #1
 8003a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a78:	4858      	ldr	r0, [pc, #352]	; (8003bdc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003a7a:	f7ff fa3f 	bl	8002efc <GPIO_WriteBit>
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2120      	movs	r1, #32
 8003a82:	4856      	ldr	r0, [pc, #344]	; (8003bdc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003a84:	f7ff fa3a 	bl	8002efc <GPIO_WriteBit>
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a8e:	4854      	ldr	r0, [pc, #336]	; (8003be0 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8003a90:	f7ff fa34 	bl	8002efc <GPIO_WriteBit>
 8003a94:	2201      	movs	r2, #1
 8003a96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a9a:	4850      	ldr	r0, [pc, #320]	; (8003bdc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003a9c:	f7ff fa2e 	bl	8002efc <GPIO_WriteBit>
 8003aa0:	e097      	b.n	8003bd2 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003aa2:	893b      	ldrh	r3, [r7, #8]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff35 	bl	8003914 <delayMicroseconds>
 8003aaa:	e092      	b.n	8003bd2 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003aac:	893b      	ldrh	r3, [r7, #8]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2180      	movs	r1, #128	; 0x80
 8003ab4:	484b      	ldr	r0, [pc, #300]	; (8003be4 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8003ab6:	f7ff fa21 	bl	8002efc <GPIO_WriteBit>
 8003aba:	e08a      	b.n	8003bd2 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003abc:	893b      	ldrh	r3, [r7, #8]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	2140      	movs	r1, #64	; 0x40
 8003ac4:	4846      	ldr	r0, [pc, #280]	; (8003be0 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8003ac6:	f7ff fa19 	bl	8002efc <GPIO_WriteBit>
 8003aca:	e082      	b.n	8003bd2 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003acc:	893b      	ldrh	r3, [r7, #8]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ad6:	4841      	ldr	r0, [pc, #260]	; (8003bdc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003ad8:	f7ff fa10 	bl	8002efc <GPIO_WriteBit>
 8003adc:	e079      	b.n	8003bd2 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003ade:	893b      	ldrh	r3, [r7, #8]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f7ff ff4f 	bl	8003988 <ucg_com_arduino_send_generic_SW_SPI>
 8003aea:	e072      	b.n	8003bd2 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	4619      	mov	r1, r3
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7ff ff48 	bl	8003988 <ucg_com_arduino_send_generic_SW_SPI>
 8003af8:	893b      	ldrh	r3, [r7, #8]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	813b      	strh	r3, [r7, #8]
 8003afe:	893b      	ldrh	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f3      	bne.n	8003aec <ucg_com_arduino_generic_SW_SPI+0xf0>
 8003b04:	e065      	b.n	8003bd2 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f7ff ff3b 	bl	8003988 <ucg_com_arduino_send_generic_SW_SPI>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3301      	adds	r3, #1
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7ff ff34 	bl	8003988 <ucg_com_arduino_send_generic_SW_SPI>
 8003b20:	893b      	ldrh	r3, [r7, #8]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	813b      	strh	r3, [r7, #8]
 8003b26:	893b      	ldrh	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1ec      	bne.n	8003b06 <ucg_com_arduino_generic_SW_SPI+0x10a>
 8003b2c:	e051      	b.n	8003bd2 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	4619      	mov	r1, r3
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff ff27 	bl	8003988 <ucg_com_arduino_send_generic_SW_SPI>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	4619      	mov	r1, r3
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f7ff ff20 	bl	8003988 <ucg_com_arduino_send_generic_SW_SPI>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3302      	adds	r3, #2
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f7ff ff19 	bl	8003988 <ucg_com_arduino_send_generic_SW_SPI>
 8003b56:	893b      	ldrh	r3, [r7, #8]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	813b      	strh	r3, [r7, #8]
 8003b5c:	893b      	ldrh	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e5      	bne.n	8003b2e <ucg_com_arduino_generic_SW_SPI+0x132>
 8003b62:	e036      	b.n	8003bd2 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	607a      	str	r2, [r7, #4]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f7ff ff0a 	bl	8003988 <ucg_com_arduino_send_generic_SW_SPI>
 8003b74:	893b      	ldrh	r3, [r7, #8]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	813b      	strh	r3, [r7, #8]
 8003b7a:	893b      	ldrh	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f1      	bne.n	8003b64 <ucg_com_arduino_generic_SW_SPI+0x168>
 8003b80:	e027      	b.n	8003bd2 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d010      	beq.n	8003bac <ucg_com_arduino_generic_SW_SPI+0x1b0>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d106      	bne.n	8003ba0 <ucg_com_arduino_generic_SW_SPI+0x1a4>
 8003b92:	2200      	movs	r2, #0
 8003b94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b98:	4810      	ldr	r0, [pc, #64]	; (8003bdc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003b9a:	f7ff f9af 	bl	8002efc <GPIO_WriteBit>
 8003b9e:	e005      	b.n	8003bac <ucg_com_arduino_generic_SW_SPI+0x1b0>
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ba6:	480d      	ldr	r0, [pc, #52]	; (8003bdc <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003ba8:	f7ff f9a8 	bl	8002efc <GPIO_WriteBit>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f7ff fee5 	bl	8003988 <ucg_com_arduino_send_generic_SW_SPI>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	607b      	str	r3, [r7, #4]
 8003bc4:	893b      	ldrh	r3, [r7, #8]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	813b      	strh	r3, [r7, #8]
 8003bca:	893b      	ldrh	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1d8      	bne.n	8003b82 <ucg_com_arduino_generic_SW_SPI+0x186>
 8003bd0:	bf00      	nop
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40020000 	.word	0x40020000
 8003be0:	40020400 	.word	0x40020400
 8003be4:	40020800 	.word	0x40020800

08003be8 <Ucglib4WireSWSPI_begin>:
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	70fb      	strb	r3, [r7, #3]
 8003bf4:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <Ucglib4WireSWSPI_begin+0x2c>)
 8003bf6:	4a08      	ldr	r2, [pc, #32]	; (8003c18 <Ucglib4WireSWSPI_begin+0x30>)
 8003bf8:	4908      	ldr	r1, [pc, #32]	; (8003c1c <Ucglib4WireSWSPI_begin+0x34>)
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f001 f9b0 	bl	8004f60 <ucg_Init>
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	4619      	mov	r1, r3
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 ff94 	bl	8004b32 <ucg_SetFontMode>
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	080039fd 	.word	0x080039fd
 8003c18:	08004255 	.word	0x08004255
 8003c1c:	08004399 	.word	0x08004399

08003c20 <ucg_DrawBox>:
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	4608      	mov	r0, r1
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	817b      	strh	r3, [r7, #10]
 8003c32:	460b      	mov	r3, r1
 8003c34:	813b      	strh	r3, [r7, #8]
 8003c36:	4613      	mov	r3, r2
 8003c38:	80fb      	strh	r3, [r7, #6]
 8003c3a:	e014      	b.n	8003c66 <ucg_DrawBox+0x46>
 8003c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c40:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003c44:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f001 f9fb 	bl	8005044 <ucg_DrawHLine>
 8003c4e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	833b      	strh	r3, [r7, #24]
 8003c5a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3301      	adds	r3, #1
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	813b      	strh	r3, [r7, #8]
 8003c66:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	dce6      	bgt.n	8003c3c <ucg_DrawBox+0x1c>
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <ucg_ClearScreen>:
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af02      	add	r7, sp, #8
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	2300      	movs	r3, #0
 8003c84:	2200      	movs	r2, #0
 8003c86:	2100      	movs	r1, #0
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f001 f9fa 	bl	8005082 <ucg_SetColor>
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fb3b 	bl	800430a <ucg_SetMaxClipRange>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff ffb9 	bl	8003c20 <ucg_DrawBox>
 8003cae:	23ff      	movs	r3, #255	; 0xff
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	23ff      	movs	r3, #255	; 0xff
 8003cb4:	22ff      	movs	r2, #255	; 0xff
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f001 f9e2 	bl	8005082 <ucg_SetColor>
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <ucg_ccs_init>:
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	4608      	mov	r0, r1
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	70fb      	strb	r3, [r7, #3]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	70bb      	strb	r3, [r7, #2]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	803b      	strh	r3, [r7, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	705a      	strb	r2, [r3, #1]
 8003ce6:	78bb      	ldrb	r3, [r7, #2]
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	78fb      	ldrb	r3, [r7, #3]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	b21a      	sxth	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	809a      	strh	r2, [r3, #4]
 8003cf8:	883b      	ldrh	r3, [r7, #0]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	b21a      	sxth	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	811a      	strh	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	805a      	strh	r2, [r3, #2]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d10:	461a      	mov	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d18:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d1c:	b21a      	sxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	80da      	strh	r2, [r3, #6]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	da0c      	bge.n	8003d46 <ucg_ccs_init+0x80>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	425b      	negs	r3, r3
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	b21a      	sxth	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	809a      	strh	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d44:	805a      	strh	r2, [r3, #2]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003d52:	fb93 f1f2 	sdiv	r1, r3, r2
 8003d56:	fb02 f201 	mul.w	r2, r2, r1
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	b21a      	sxth	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	815a      	strh	r2, [r3, #10]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d68:	0fda      	lsrs	r2, r3, #31
 8003d6a:	4413      	add	r3, r2
 8003d6c:	105b      	asrs	r3, r3, #1
 8003d6e:	b21a      	sxth	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	819a      	strh	r2, [r3, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <ucg_ccs_step>:
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	781a      	ldrb	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	b21a      	sxth	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	819a      	strh	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	db16      	blt.n	8003dfa <ucg_ccs_step+0x74>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	781a      	ldrb	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	4413      	add	r3, r2
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	701a      	strb	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	b21a      	sxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	819a      	strh	r2, [r3, #12]
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <ucg_ccs_seek>:
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	807b      	strh	r3, [r7, #2]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	781a      	ldrb	r2, [r3, #0]
 8003e22:	887b      	ldrh	r3, [r7, #2]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	fb12 f303 	smulbb	r3, r2, r3
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	887b      	ldrh	r3, [r7, #2]
 8003e3a:	fb12 f303 	smulbb	r3, r2, r3
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e46:	0fd9      	lsrs	r1, r3, #31
 8003e48:	440b      	add	r3, r1
 8003e4a:	105b      	asrs	r3, r3, #1
 8003e4c:	b21b      	sxth	r3, r3
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	81fb      	strh	r3, [r7, #14]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	db0e      	blt.n	8003e7e <ucg_ccs_seek+0x78>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	781a      	ldrb	r2, [r3, #0]
 8003e64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8003e6e:	fb93 f3f1 	sdiv	r3, r3, r1
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	701a      	strb	r2, [r3, #0]
 8003e7c:	e00d      	b.n	8003e9a <ucg_ccs_seek+0x94>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	781a      	ldrb	r2, [r3, #0]
 8003e82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8003e8c:	fb93 f3f1 	sdiv	r3, r3, r1
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003ea4:	fb93 f1f2 	sdiv	r1, r3, r2
 8003ea8:	fb02 f201 	mul.w	r2, r2, r1
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	b21a      	sxth	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	819a      	strh	r2, [r3, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	781a      	ldrb	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	785b      	ldrb	r3, [r3, #1]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <ucg_dev_default_cb>:
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	817b      	strh	r3, [r7, #10]
 8003ede:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	d00a      	beq.n	8003efc <ucg_dev_default_cb+0x2c>
 8003ee6:	2b17      	cmp	r3, #23
 8003ee8:	d10f      	bne.n	8003f0a <ucg_dev_default_cb+0x3a>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	4798      	blx	r3
 8003ef8:	4603      	mov	r3, r0
 8003efa:	e007      	b.n	8003f0c <ucg_dev_default_cb+0x3c>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	3370      	adds	r3, #112	; 0x70
 8003f02:	6810      	ldr	r0, [r2, #0]
 8003f04:	6851      	ldr	r1, [r2, #4]
 8003f06:	c303      	stmia	r3!, {r0, r1}
 8003f08:	bf00      	nop
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <ucg_ext_none>:
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	817b      	strh	r3, [r7, #10]
 8003f22:	2301      	movs	r3, #1
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <ucg_handle_st7735_l90fx>:
 8003f30:	b590      	push	{r4, r7, lr}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f001 fb89 	bl	8005650 <ucg_clip_l90fx>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d053      	beq.n	8003fec <ucg_handle_st7735_l90fx+0xbc>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d008      	beq.n	8003f60 <ucg_handle_st7735_l90fx+0x30>
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d00b      	beq.n	8003f6a <ucg_handle_st7735_l90fx+0x3a>
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d11b      	bne.n	8003f8e <ucg_handle_st7735_l90fx+0x5e>
 8003f56:	4928      	ldr	r1, [pc, #160]	; (8003ff8 <ucg_handle_st7735_l90fx+0xc8>)
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f001 fea7 	bl	8005cac <ucg_com_SendCmdSeq>
 8003f5e:	e028      	b.n	8003fb2 <ucg_handle_st7735_l90fx+0x82>
 8003f60:	4926      	ldr	r1, [pc, #152]	; (8003ffc <ucg_handle_st7735_l90fx+0xcc>)
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f001 fea2 	bl	8005cac <ucg_com_SendCmdSeq>
 8003f68:	e023      	b.n	8003fb2 <ucg_handle_st7735_l90fx+0x82>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f6e:	81fb      	strh	r3, [r7, #14]
 8003f70:	89fb      	ldrh	r3, [r7, #14]
 8003f72:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	b21a      	sxth	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	849a      	strh	r2, [r3, #36]	; 0x24
 8003f7e:	4920      	ldr	r1, [pc, #128]	; (8004000 <ucg_handle_st7735_l90fx+0xd0>)
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f001 fe93 	bl	8005cac <ucg_com_SendCmdSeq>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	89fa      	ldrh	r2, [r7, #14]
 8003f8a:	849a      	strh	r2, [r3, #36]	; 0x24
 8003f8c:	e011      	b.n	8003fb2 <ucg_handle_st7735_l90fx+0x82>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f92:	81fb      	strh	r3, [r7, #14]
 8003f94:	89fb      	ldrh	r3, [r7, #14]
 8003f96:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	b21a      	sxth	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	84da      	strh	r2, [r3, #38]	; 0x26
 8003fa2:	4918      	ldr	r1, [pc, #96]	; (8004004 <ucg_handle_st7735_l90fx+0xd4>)
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f001 fe81 	bl	8005cac <ucg_com_SendCmdSeq>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	89fa      	ldrh	r2, [r7, #14]
 8003fae:	84da      	strh	r2, [r3, #38]	; 0x26
 8003fb0:	bf00      	nop
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fb8:	723b      	strb	r3, [r7, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fc0:	727b      	strb	r3, [r7, #9]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003fc8:	72bb      	strb	r3, [r7, #10]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69dc      	ldr	r4, [r3, #28]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	f107 0308 	add.w	r3, r7, #8
 8003fda:	2113      	movs	r1, #19
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	47a0      	blx	r4
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f001 fdae 	bl	8005b44 <ucg_com_SetCSLineStatus>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <ucg_handle_st7735_l90fx+0xbe>
 8003fec:	2300      	movs	r3, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd90      	pop	{r4, r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	08006268 	.word	0x08006268
 8003ffc:	08006288 	.word	0x08006288
 8004000:	080062ac 	.word	0x080062ac
 8004004:	080062d0 	.word	0x080062d0

08004008 <ucg_handle_st7735_l90se>:
 8004008:	b590      	push	{r4, r7, lr}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	2300      	movs	r3, #0
 8004012:	75fb      	strb	r3, [r7, #23]
 8004014:	e01a      	b.n	800404c <ucg_handle_st7735_l90se+0x44>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f103 0146 	add.w	r1, r3, #70	; 0x46
 800401c:	7dfa      	ldrb	r2, [r7, #23]
 800401e:	4613      	mov	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	18c8      	adds	r0, r1, r3
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4413      	add	r3, r2
 800402e:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8004032:	7dfb      	ldrb	r3, [r7, #23]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4413      	add	r3, r2
 8004038:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004042:	f7ff fe40 	bl	8003cc6 <ucg_ccs_init>
 8004046:	7dfb      	ldrb	r3, [r7, #23]
 8004048:	3301      	adds	r3, #1
 800404a:	75fb      	strb	r3, [r7, #23]
 800404c:	7dfb      	ldrb	r3, [r7, #23]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d9e1      	bls.n	8004016 <ucg_handle_st7735_l90se+0xe>
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f001 fc7c 	bl	8005950 <ucg_clip_l90se>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d071      	beq.n	8004142 <ucg_handle_st7735_l90se+0x13a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004064:	2b01      	cmp	r3, #1
 8004066:	d008      	beq.n	800407a <ucg_handle_st7735_l90se+0x72>
 8004068:	2b02      	cmp	r3, #2
 800406a:	d00b      	beq.n	8004084 <ucg_handle_st7735_l90se+0x7c>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d11b      	bne.n	80040a8 <ucg_handle_st7735_l90se+0xa0>
 8004070:	4936      	ldr	r1, [pc, #216]	; (800414c <ucg_handle_st7735_l90se+0x144>)
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f001 fe1a 	bl	8005cac <ucg_com_SendCmdSeq>
 8004078:	e028      	b.n	80040cc <ucg_handle_st7735_l90se+0xc4>
 800407a:	4935      	ldr	r1, [pc, #212]	; (8004150 <ucg_handle_st7735_l90se+0x148>)
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f001 fe15 	bl	8005cac <ucg_com_SendCmdSeq>
 8004082:	e023      	b.n	80040cc <ucg_handle_st7735_l90se+0xc4>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004088:	827b      	strh	r3, [r7, #18]
 800408a:	8a7b      	ldrh	r3, [r7, #18]
 800408c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8004090:	b29b      	uxth	r3, r3
 8004092:	b21a      	sxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	849a      	strh	r2, [r3, #36]	; 0x24
 8004098:	492e      	ldr	r1, [pc, #184]	; (8004154 <ucg_handle_st7735_l90se+0x14c>)
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f001 fe06 	bl	8005cac <ucg_com_SendCmdSeq>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8a7a      	ldrh	r2, [r7, #18]
 80040a4:	849a      	strh	r2, [r3, #36]	; 0x24
 80040a6:	e011      	b.n	80040cc <ucg_handle_st7735_l90se+0xc4>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ac:	827b      	strh	r3, [r7, #18]
 80040ae:	8a7b      	ldrh	r3, [r7, #18]
 80040b0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	b21a      	sxth	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	84da      	strh	r2, [r3, #38]	; 0x26
 80040bc:	4926      	ldr	r1, [pc, #152]	; (8004158 <ucg_handle_st7735_l90se+0x150>)
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f001 fdf4 	bl	8005cac <ucg_com_SendCmdSeq>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8a7a      	ldrh	r2, [r7, #18]
 80040c8:	84da      	strh	r2, [r3, #38]	; 0x26
 80040ca:	bf00      	nop
 80040cc:	2300      	movs	r3, #0
 80040ce:	82bb      	strh	r3, [r7, #20]
 80040d0:	e02a      	b.n	8004128 <ucg_handle_st7735_l90se+0x120>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80040d8:	733b      	strb	r3, [r7, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80040e0:	737b      	strb	r3, [r7, #13]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80040e8:	73bb      	strb	r3, [r7, #14]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69dc      	ldr	r4, [r3, #28]
 80040ee:	f107 030c 	add.w	r3, r7, #12
 80040f2:	2201      	movs	r2, #1
 80040f4:	2113      	movs	r1, #19
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	47a0      	blx	r4
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3346      	adds	r3, #70	; 0x46
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fe41 	bl	8003d86 <ucg_ccs_step>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3346      	adds	r3, #70	; 0x46
 8004108:	330e      	adds	r3, #14
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fe3b 	bl	8003d86 <ucg_ccs_step>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3346      	adds	r3, #70	; 0x46
 8004114:	331c      	adds	r3, #28
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff fe35 	bl	8003d86 <ucg_ccs_step>
 800411c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004120:	b29b      	uxth	r3, r3
 8004122:	3301      	adds	r3, #1
 8004124:	b29b      	uxth	r3, r3
 8004126:	82bb      	strh	r3, [r7, #20]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800412e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004132:	429a      	cmp	r2, r3
 8004134:	dbcd      	blt.n	80040d2 <ucg_handle_st7735_l90se+0xca>
 8004136:	2101      	movs	r1, #1
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f001 fd03 	bl	8005b44 <ucg_com_SetCSLineStatus>
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <ucg_handle_st7735_l90se+0x13c>
 8004142:	2300      	movs	r3, #0
 8004144:	4618      	mov	r0, r3
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	bd90      	pop	{r4, r7, pc}
 800414c:	08006268 	.word	0x08006268
 8004150:	08006288 	.word	0x08006288
 8004154:	080062ac 	.word	0x080062ac
 8004158:	080062d0 	.word	0x080062d0

0800415c <ucg_dev_ic_st7735_18>:
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	460b      	mov	r3, r1
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	817b      	strh	r3, [r7, #10]
 800416a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800416e:	3b0a      	subs	r3, #10
 8004170:	2b0b      	cmp	r3, #11
 8004172:	d85f      	bhi.n	8004234 <ucg_dev_ic_st7735_18+0xd8>
 8004174:	a201      	add	r2, pc, #4	; (adr r2, 800417c <ucg_dev_ic_st7735_18+0x20>)
 8004176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417a:	bf00      	nop
 800417c:	080041ad 	.word	0x080041ad
 8004180:	080041c7 	.word	0x080041c7
 8004184:	08004235 	.word	0x08004235
 8004188:	08004235 	.word	0x08004235
 800418c:	08004235 	.word	0x08004235
 8004190:	080041d3 	.word	0x080041d3
 8004194:	08004235 	.word	0x08004235
 8004198:	08004235 	.word	0x08004235
 800419c:	08004235 	.word	0x08004235
 80041a0:	08004235 	.word	0x08004235
 80041a4:	080041e3 	.word	0x080041e3
 80041a8:	0800422b 	.word	0x0800422b
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2202      	movs	r2, #2
 80041b0:	841a      	strh	r2, [r3, #32]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	845a      	strh	r2, [r3, #34]	; 0x22
 80041b8:	2242      	movs	r2, #66	; 0x42
 80041ba:	2164      	movs	r1, #100	; 0x64
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f001 fc10 	bl	80059e2 <ucg_com_PowerUp>
 80041c2:	4603      	mov	r3, r0
 80041c4:	e03e      	b.n	8004244 <ucg_dev_ic_st7735_18+0xe8>
 80041c6:	4921      	ldr	r1, [pc, #132]	; (800424c <ucg_dev_ic_st7735_18+0xf0>)
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f001 fd6f 	bl	8005cac <ucg_com_SendCmdSeq>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e038      	b.n	8004244 <ucg_dev_ic_st7735_18+0xe8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2280      	movs	r2, #128	; 0x80
 80041d6:	801a      	strh	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2280      	movs	r2, #128	; 0x80
 80041dc:	805a      	strh	r2, [r3, #2]
 80041de:	2301      	movs	r3, #1
 80041e0:	e030      	b.n	8004244 <ucg_dev_ic_st7735_18+0xe8>
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f001 fa1b 	bl	800561e <ucg_clip_is_pixel_visible>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d01b      	beq.n	8004226 <ucg_dev_ic_st7735_18+0xca>
 80041ee:	4918      	ldr	r1, [pc, #96]	; (8004250 <ucg_dev_ic_st7735_18+0xf4>)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f001 fd5b 	bl	8005cac <ucg_com_SendCmdSeq>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041fc:	753b      	strb	r3, [r7, #20]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004204:	757b      	strb	r3, [r7, #21]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800420c:	75bb      	strb	r3, [r7, #22]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	69dc      	ldr	r4, [r3, #28]
 8004212:	f107 0314 	add.w	r3, r7, #20
 8004216:	2201      	movs	r2, #1
 8004218:	2113      	movs	r1, #19
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	47a0      	blx	r4
 800421e:	2101      	movs	r1, #1
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f001 fc8f 	bl	8005b44 <ucg_com_SetCSLineStatus>
 8004226:	2301      	movs	r3, #1
 8004228:	e00c      	b.n	8004244 <ucg_dev_ic_st7735_18+0xe8>
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f7ff fe80 	bl	8003f30 <ucg_handle_st7735_l90fx>
 8004230:	2301      	movs	r3, #1
 8004232:	e007      	b.n	8004244 <ucg_dev_ic_st7735_18+0xe8>
 8004234:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4619      	mov	r1, r3
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff fe47 	bl	8003ed0 <ucg_dev_default_cb>
 8004242:	4603      	mov	r3, r0
 8004244:	4618      	mov	r0, r3
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	bd90      	pop	{r4, r7, pc}
 800424c:	080062f4 	.word	0x080062f4
 8004250:	08006248 	.word	0x08006248

08004254 <ucg_ext_st7735_18>:
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	460b      	mov	r3, r1
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	817b      	strh	r3, [r7, #10]
 8004262:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004266:	2b17      	cmp	r3, #23
 8004268:	d103      	bne.n	8004272 <ucg_ext_st7735_18+0x1e>
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff fecc 	bl	8004008 <ucg_handle_st7735_l90se>
 8004270:	bf00      	nop
 8004272:	2301      	movs	r3, #1
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <ucg_PowerDown>:
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <ucg_PowerDown+0x2c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2200      	movs	r2, #0
 8004298:	210b      	movs	r1, #11
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	7813      	ldrb	r3, [r2, #0]
 80042a2:	f36f 0300 	bfc	r3, #0, #1
 80042a6:	7013      	strb	r3, [r2, #0]
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <ucg_PowerUp>:
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ffdf 	bl	800427c <ucg_PowerDown>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2200      	movs	r2, #0
 80042c4:	210a      	movs	r1, #10
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
 80042ca:	4603      	mov	r3, r0
 80042cc:	81fb      	strh	r3, [r7, #14]
 80042ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d004      	beq.n	80042e0 <ucg_PowerUp+0x30>
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	7813      	ldrb	r3, [r2, #0]
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	7013      	strb	r3, [r2, #0]
 80042e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <ucg_SetClipBox>:
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	210c      	movs	r1, #12
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <ucg_SetMaxClipRange>:
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	f107 030c 	add.w	r3, r7, #12
 8004318:	3202      	adds	r2, #2
 800431a:	6810      	ldr	r0, [r2, #0]
 800431c:	6018      	str	r0, [r3, #0]
 800431e:	2300      	movs	r3, #0
 8004320:	813b      	strh	r3, [r7, #8]
 8004322:	2300      	movs	r3, #0
 8004324:	817b      	strh	r3, [r7, #10]
 8004326:	f107 0308 	add.w	r3, r7, #8
 800432a:	4619      	mov	r1, r3
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ffdd 	bl	80042ec <ucg_SetClipBox>
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <ucg_GetDimension>:
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	3202      	adds	r2, #2
 800434a:	210f      	movs	r1, #15
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	4798      	blx	r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff ffda 	bl	800430a <ucg_SetMaxClipRange>
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <ucg_DrawPixelWithArg>:
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2200      	movs	r2, #0
 800436c:	2114      	movs	r1, #20
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <ucg_DrawL90FXWithArg>:
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	3224      	adds	r2, #36	; 0x24
 800438a:	2115      	movs	r1, #21
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4798      	blx	r3
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <ucg_dev_st7735_18x128x128>:
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	460b      	mov	r3, r1
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	817b      	strh	r3, [r7, #10]
 80043a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80043aa:	2b0b      	cmp	r3, #11
 80043ac:	d015      	beq.n	80043da <ucg_dev_st7735_18x128x128+0x42>
 80043ae:	2b0f      	cmp	r3, #15
 80043b0:	d01c      	beq.n	80043ec <ucg_dev_st7735_18x128x128+0x54>
 80043b2:	2b0a      	cmp	r3, #10
 80043b4:	d122      	bne.n	80043fc <ucg_dev_st7735_18x128x128+0x64>
 80043b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4619      	mov	r1, r3
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f7ff fecc 	bl	800415c <ucg_dev_ic_st7735_18>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <ucg_dev_st7735_18x128x128+0x36>
 80043ca:	2300      	movs	r3, #0
 80043cc:	e01e      	b.n	800440c <ucg_dev_st7735_18x128x128+0x74>
 80043ce:	4911      	ldr	r1, [pc, #68]	; (8004414 <ucg_dev_st7735_18x128x128+0x7c>)
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f001 fc6b 	bl	8005cac <ucg_com_SendCmdSeq>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e018      	b.n	800440c <ucg_dev_st7735_18x128x128+0x74>
 80043da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	4619      	mov	r1, r3
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff feba 	bl	800415c <ucg_dev_ic_st7735_18>
 80043e8:	4603      	mov	r3, r0
 80043ea:	e00f      	b.n	800440c <ucg_dev_st7735_18x128x128+0x74>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2280      	movs	r2, #128	; 0x80
 80043f0:	801a      	strh	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2280      	movs	r2, #128	; 0x80
 80043f6:	805a      	strh	r2, [r3, #2]
 80043f8:	2301      	movs	r3, #1
 80043fa:	e007      	b.n	800440c <ucg_dev_st7735_18x128x128+0x74>
 80043fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4619      	mov	r1, r3
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7ff fea9 	bl	800415c <ucg_dev_ic_st7735_18>
 800440a:	4603      	mov	r3, r0
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	080062fc 	.word	0x080062fc

08004418 <ucg_font_get_byte>:
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	70fb      	strb	r3, [r7, #3]
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <ucg_font_get_word>:
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4413      	add	r3, r2
 800444e:	607b      	str	r3, [r7, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	81fb      	strh	r3, [r7, #14]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3301      	adds	r3, #1
 800445a:	607b      	str	r3, [r7, #4]
 800445c:	89fb      	ldrh	r3, [r7, #14]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	81fb      	strh	r3, [r7, #14]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	b29a      	uxth	r2, r3
 8004468:	89fb      	ldrh	r3, [r7, #14]
 800446a:	4413      	add	r3, r2
 800446c:	81fb      	strh	r3, [r7, #14]
 800446e:	89fb      	ldrh	r3, [r7, #14]
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <ucg_read_font_info>:
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
 8004486:	2100      	movs	r1, #0
 8004488:	6838      	ldr	r0, [r7, #0]
 800448a:	f7ff ffc5 	bl	8004418 <ucg_font_get_byte>
 800448e:	4603      	mov	r3, r0
 8004490:	461a      	mov	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	2101      	movs	r1, #1
 8004498:	6838      	ldr	r0, [r7, #0]
 800449a:	f7ff ffbd 	bl	8004418 <ucg_font_get_byte>
 800449e:	4603      	mov	r3, r0
 80044a0:	461a      	mov	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	705a      	strb	r2, [r3, #1]
 80044a6:	2102      	movs	r1, #2
 80044a8:	6838      	ldr	r0, [r7, #0]
 80044aa:	f7ff ffb5 	bl	8004418 <ucg_font_get_byte>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	709a      	strb	r2, [r3, #2]
 80044b6:	2103      	movs	r1, #3
 80044b8:	6838      	ldr	r0, [r7, #0]
 80044ba:	f7ff ffad 	bl	8004418 <ucg_font_get_byte>
 80044be:	4603      	mov	r3, r0
 80044c0:	461a      	mov	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	70da      	strb	r2, [r3, #3]
 80044c6:	2104      	movs	r1, #4
 80044c8:	6838      	ldr	r0, [r7, #0]
 80044ca:	f7ff ffa5 	bl	8004418 <ucg_font_get_byte>
 80044ce:	4603      	mov	r3, r0
 80044d0:	461a      	mov	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	711a      	strb	r2, [r3, #4]
 80044d6:	2105      	movs	r1, #5
 80044d8:	6838      	ldr	r0, [r7, #0]
 80044da:	f7ff ff9d 	bl	8004418 <ucg_font_get_byte>
 80044de:	4603      	mov	r3, r0
 80044e0:	461a      	mov	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	715a      	strb	r2, [r3, #5]
 80044e6:	2106      	movs	r1, #6
 80044e8:	6838      	ldr	r0, [r7, #0]
 80044ea:	f7ff ff95 	bl	8004418 <ucg_font_get_byte>
 80044ee:	4603      	mov	r3, r0
 80044f0:	461a      	mov	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	719a      	strb	r2, [r3, #6]
 80044f6:	2107      	movs	r1, #7
 80044f8:	6838      	ldr	r0, [r7, #0]
 80044fa:	f7ff ff8d 	bl	8004418 <ucg_font_get_byte>
 80044fe:	4603      	mov	r3, r0
 8004500:	461a      	mov	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	71da      	strb	r2, [r3, #7]
 8004506:	2108      	movs	r1, #8
 8004508:	6838      	ldr	r0, [r7, #0]
 800450a:	f7ff ff85 	bl	8004418 <ucg_font_get_byte>
 800450e:	4603      	mov	r3, r0
 8004510:	461a      	mov	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	721a      	strb	r2, [r3, #8]
 8004516:	2109      	movs	r1, #9
 8004518:	6838      	ldr	r0, [r7, #0]
 800451a:	f7ff ff7d 	bl	8004418 <ucg_font_get_byte>
 800451e:	4603      	mov	r3, r0
 8004520:	b25a      	sxtb	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	725a      	strb	r2, [r3, #9]
 8004526:	210a      	movs	r1, #10
 8004528:	6838      	ldr	r0, [r7, #0]
 800452a:	f7ff ff75 	bl	8004418 <ucg_font_get_byte>
 800452e:	4603      	mov	r3, r0
 8004530:	b25a      	sxtb	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	729a      	strb	r2, [r3, #10]
 8004536:	210b      	movs	r1, #11
 8004538:	6838      	ldr	r0, [r7, #0]
 800453a:	f7ff ff6d 	bl	8004418 <ucg_font_get_byte>
 800453e:	4603      	mov	r3, r0
 8004540:	b25a      	sxtb	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	72da      	strb	r2, [r3, #11]
 8004546:	210c      	movs	r1, #12
 8004548:	6838      	ldr	r0, [r7, #0]
 800454a:	f7ff ff65 	bl	8004418 <ucg_font_get_byte>
 800454e:	4603      	mov	r3, r0
 8004550:	b25a      	sxtb	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	731a      	strb	r2, [r3, #12]
 8004556:	210d      	movs	r1, #13
 8004558:	6838      	ldr	r0, [r7, #0]
 800455a:	f7ff ff5d 	bl	8004418 <ucg_font_get_byte>
 800455e:	4603      	mov	r3, r0
 8004560:	b25a      	sxtb	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	735a      	strb	r2, [r3, #13]
 8004566:	210e      	movs	r1, #14
 8004568:	6838      	ldr	r0, [r7, #0]
 800456a:	f7ff ff55 	bl	8004418 <ucg_font_get_byte>
 800456e:	4603      	mov	r3, r0
 8004570:	b25a      	sxtb	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	739a      	strb	r2, [r3, #14]
 8004576:	210f      	movs	r1, #15
 8004578:	6838      	ldr	r0, [r7, #0]
 800457a:	f7ff ff4d 	bl	8004418 <ucg_font_get_byte>
 800457e:	4603      	mov	r3, r0
 8004580:	b25a      	sxtb	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	73da      	strb	r2, [r3, #15]
 8004586:	2110      	movs	r1, #16
 8004588:	6838      	ldr	r0, [r7, #0]
 800458a:	f7ff ff45 	bl	8004418 <ucg_font_get_byte>
 800458e:	4603      	mov	r3, r0
 8004590:	b25a      	sxtb	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	741a      	strb	r2, [r3, #16]
 8004596:	2111      	movs	r1, #17
 8004598:	6838      	ldr	r0, [r7, #0]
 800459a:	f7ff ff4f 	bl	800443c <ucg_font_get_word>
 800459e:	4603      	mov	r3, r0
 80045a0:	461a      	mov	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	825a      	strh	r2, [r3, #18]
 80045a6:	2113      	movs	r1, #19
 80045a8:	6838      	ldr	r0, [r7, #0]
 80045aa:	f7ff ff47 	bl	800443c <ucg_font_get_word>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	829a      	strh	r2, [r3, #20]
 80045b6:	bf00      	nop
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <ucg_font_decode_get_unsigned_bits>:
 80045be:	b480      	push	{r7}
 80045c0:	b085      	sub	sp, #20
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	460b      	mov	r3, r1
 80045c8:	70fb      	strb	r3, [r7, #3]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	7b1b      	ldrb	r3, [r3, #12]
 80045ce:	737b      	strb	r3, [r7, #13]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	73fb      	strb	r3, [r7, #15]
 80045d8:	7bfa      	ldrb	r2, [r7, #15]
 80045da:	7b7b      	ldrb	r3, [r7, #13]
 80045dc:	fa42 f303 	asr.w	r3, r2, r3
 80045e0:	73fb      	strb	r3, [r7, #15]
 80045e2:	7b7b      	ldrb	r3, [r7, #13]
 80045e4:	73bb      	strb	r3, [r7, #14]
 80045e6:	7bba      	ldrb	r2, [r7, #14]
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	4413      	add	r3, r2
 80045ec:	73bb      	strb	r3, [r7, #14]
 80045ee:	7bbb      	ldrb	r3, [r7, #14]
 80045f0:	2b07      	cmp	r3, #7
 80045f2:	d91a      	bls.n	800462a <ucg_font_decode_get_unsigned_bits+0x6c>
 80045f4:	2308      	movs	r3, #8
 80045f6:	733b      	strb	r3, [r7, #12]
 80045f8:	7b3a      	ldrb	r2, [r7, #12]
 80045fa:	7b7b      	ldrb	r3, [r7, #13]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	733b      	strb	r3, [r7, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	7b3b      	ldrb	r3, [r7, #12]
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	b25a      	sxtb	r2, r3
 800461a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800461e:	4313      	orrs	r3, r2
 8004620:	b25b      	sxtb	r3, r3
 8004622:	73fb      	strb	r3, [r7, #15]
 8004624:	7bbb      	ldrb	r3, [r7, #14]
 8004626:	3b08      	subs	r3, #8
 8004628:	73bb      	strb	r3, [r7, #14]
 800462a:	78fb      	ldrb	r3, [r7, #3]
 800462c:	f04f 32ff 	mov.w	r2, #4294967295
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	b2db      	uxtb	r3, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	b2da      	uxtb	r2, r3
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	4013      	ands	r3, r2
 800463e:	73fb      	strb	r3, [r7, #15]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	7bba      	ldrb	r2, [r7, #14]
 8004644:	731a      	strb	r2, [r3, #12]
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <ucg_font_decode_get_signed_bits>:
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	4619      	mov	r1, r3
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff ffaa 	bl	80045be <ucg_font_decode_get_unsigned_bits>
 800466a:	4603      	mov	r3, r0
 800466c:	73fb      	strb	r3, [r7, #15]
 800466e:	2301      	movs	r3, #1
 8004670:	73bb      	strb	r3, [r7, #14]
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	3b01      	subs	r3, #1
 8004676:	70fb      	strb	r3, [r7, #3]
 8004678:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	73bb      	strb	r3, [r7, #14]
 8004684:	7bfa      	ldrb	r2, [r7, #15]
 8004686:	7bbb      	ldrb	r3, [r7, #14]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	b2db      	uxtb	r3, r3
 800468c:	73fb      	strb	r3, [r7, #15]
 800468e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <ucg_add_vector_y>:
 800469a:	b490      	push	{r4, r7}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	4604      	mov	r4, r0
 80046a2:	4608      	mov	r0, r1
 80046a4:	4611      	mov	r1, r2
 80046a6:	461a      	mov	r2, r3
 80046a8:	4623      	mov	r3, r4
 80046aa:	80fb      	strh	r3, [r7, #6]
 80046ac:	4603      	mov	r3, r0
 80046ae:	717b      	strb	r3, [r7, #5]
 80046b0:	460b      	mov	r3, r1
 80046b2:	713b      	strb	r3, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	70fb      	strb	r3, [r7, #3]
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d00b      	beq.n	80046d6 <ucg_add_vector_y+0x3c>
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d011      	beq.n	80046e6 <ucg_add_vector_y+0x4c>
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d117      	bne.n	80046f6 <ucg_add_vector_y+0x5c>
 80046c6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	88fb      	ldrh	r3, [r7, #6]
 80046ce:	4413      	add	r3, r2
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	80fb      	strh	r3, [r7, #6]
 80046d4:	e017      	b.n	8004706 <ucg_add_vector_y+0x6c>
 80046d6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80046da:	b29a      	uxth	r2, r3
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	4413      	add	r3, r2
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	80fb      	strh	r3, [r7, #6]
 80046e4:	e00f      	b.n	8004706 <ucg_add_vector_y+0x6c>
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	80fb      	strh	r3, [r7, #6]
 80046f4:	e007      	b.n	8004706 <ucg_add_vector_y+0x6c>
 80046f6:	88fa      	ldrh	r2, [r7, #6]
 80046f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	b29b      	uxth	r3, r3
 8004702:	80fb      	strh	r3, [r7, #6]
 8004704:	bf00      	nop
 8004706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bc90      	pop	{r4, r7}
 8004712:	4770      	bx	lr

08004714 <ucg_add_vector_x>:
 8004714:	b490      	push	{r4, r7}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	4604      	mov	r4, r0
 800471c:	4608      	mov	r0, r1
 800471e:	4611      	mov	r1, r2
 8004720:	461a      	mov	r2, r3
 8004722:	4623      	mov	r3, r4
 8004724:	80fb      	strh	r3, [r7, #6]
 8004726:	4603      	mov	r3, r0
 8004728:	717b      	strb	r3, [r7, #5]
 800472a:	460b      	mov	r3, r1
 800472c:	713b      	strb	r3, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	70fb      	strb	r3, [r7, #3]
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d00b      	beq.n	8004750 <ucg_add_vector_x+0x3c>
 8004738:	2b02      	cmp	r3, #2
 800473a:	d011      	beq.n	8004760 <ucg_add_vector_x+0x4c>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d117      	bne.n	8004770 <ucg_add_vector_x+0x5c>
 8004740:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004744:	b29a      	uxth	r2, r3
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	4413      	add	r3, r2
 800474a:	b29b      	uxth	r3, r3
 800474c:	80fb      	strh	r3, [r7, #6]
 800474e:	e017      	b.n	8004780 <ucg_add_vector_x+0x6c>
 8004750:	88fa      	ldrh	r2, [r7, #6]
 8004752:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004756:	b29b      	uxth	r3, r3
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	b29b      	uxth	r3, r3
 800475c:	80fb      	strh	r3, [r7, #6]
 800475e:	e00f      	b.n	8004780 <ucg_add_vector_x+0x6c>
 8004760:	88fa      	ldrh	r2, [r7, #6]
 8004762:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004766:	b29b      	uxth	r3, r3
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	b29b      	uxth	r3, r3
 800476c:	80fb      	strh	r3, [r7, #6]
 800476e:	e007      	b.n	8004780 <ucg_add_vector_x+0x6c>
 8004770:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004774:	b29a      	uxth	r2, r3
 8004776:	88fb      	ldrh	r3, [r7, #6]
 8004778:	4413      	add	r3, r2
 800477a:	b29b      	uxth	r3, r3
 800477c:	80fb      	strh	r3, [r7, #6]
 800477e:	bf00      	nop
 8004780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bc90      	pop	{r4, r7}
 800478c:	4770      	bx	lr

0800478e <ucg_font_decode_len>:
 800478e:	b590      	push	{r4, r7, lr}
 8004790:	b089      	sub	sp, #36	; 0x24
 8004792:	af02      	add	r7, sp, #8
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	70fb      	strb	r3, [r7, #3]
 800479a:	4613      	mov	r3, r2
 800479c:	70bb      	strb	r3, [r7, #2]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3380      	adds	r3, #128	; 0x80
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	75fb      	strb	r3, [r7, #23]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80047ae:	757b      	strb	r3, [r7, #21]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80047b6:	753b      	strb	r3, [r7, #20]
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80047be:	73fb      	strb	r3, [r7, #15]
 80047c0:	7bfa      	ldrb	r2, [r7, #15]
 80047c2:	7d7b      	ldrb	r3, [r7, #21]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	75bb      	strb	r3, [r7, #22]
 80047cc:	7dfa      	ldrb	r2, [r7, #23]
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d201      	bcs.n	80047d8 <ucg_font_decode_len+0x4a>
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	75bb      	strb	r3, [r7, #22]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	889b      	ldrh	r3, [r3, #4]
 80047dc:	81bb      	strh	r3, [r7, #12]
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	88db      	ldrh	r3, [r3, #6]
 80047e2:	817b      	strh	r3, [r7, #10]
 80047e4:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80047e8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	7b9b      	ldrb	r3, [r3, #14]
 80047f0:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 80047f4:	f7ff ff8e 	bl	8004714 <ucg_add_vector_x>
 80047f8:	4603      	mov	r3, r0
 80047fa:	81bb      	strh	r3, [r7, #12]
 80047fc:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004800:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	7b9b      	ldrb	r3, [r3, #14]
 8004808:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 800480c:	f7ff ff45 	bl	800469a <ucg_add_vector_y>
 8004810:	4603      	mov	r3, r0
 8004812:	817b      	strh	r3, [r7, #10]
 8004814:	78bb      	ldrb	r3, [r7, #2]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d011      	beq.n	800483e <ucg_font_decode_len+0xb0>
 800481a:	7dbb      	ldrb	r3, [r7, #22]
 800481c:	b21c      	sxth	r4, r3
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	7b9b      	ldrb	r3, [r3, #14]
 8004822:	b21b      	sxth	r3, r3
 8004824:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8004828:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	9201      	str	r2, [sp, #4]
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	4623      	mov	r3, r4
 8004834:	4602      	mov	r2, r0
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fbc0 	bl	8004fbc <ucg_Draw90Line>
 800483c:	e014      	b.n	8004868 <ucg_font_decode_len+0xda>
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	7b5b      	ldrb	r3, [r3, #13]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d110      	bne.n	8004868 <ucg_font_decode_len+0xda>
 8004846:	7dbb      	ldrb	r3, [r7, #22]
 8004848:	b21c      	sxth	r4, r3
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	7b9b      	ldrb	r3, [r3, #14]
 800484e:	b21b      	sxth	r3, r3
 8004850:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8004854:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	9201      	str	r2, [sp, #4]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	4623      	mov	r3, r4
 8004860:	4602      	mov	r2, r0
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fbaa 	bl	8004fbc <ucg_Draw90Line>
 8004868:	7dfa      	ldrb	r2, [r7, #23]
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	429a      	cmp	r2, r3
 800486e:	d309      	bcc.n	8004884 <ucg_font_decode_len+0xf6>
 8004870:	7dfa      	ldrb	r2, [r7, #23]
 8004872:	7bfb      	ldrb	r3, [r7, #15]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	75fb      	strb	r3, [r7, #23]
 8004878:	2300      	movs	r3, #0
 800487a:	757b      	strb	r3, [r7, #21]
 800487c:	7d3b      	ldrb	r3, [r7, #20]
 800487e:	3301      	adds	r3, #1
 8004880:	753b      	strb	r3, [r7, #20]
 8004882:	e799      	b.n	80047b8 <ucg_font_decode_len+0x2a>
 8004884:	bf00      	nop
 8004886:	7d7a      	ldrb	r2, [r7, #21]
 8004888:	7dfb      	ldrb	r3, [r7, #23]
 800488a:	4413      	add	r3, r2
 800488c:	757b      	strb	r3, [r7, #21]
 800488e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	721a      	strb	r2, [r3, #8]
 8004896:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	725a      	strb	r2, [r3, #9]
 800489e:	bf00      	nop
 80048a0:	371c      	adds	r7, #28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd90      	pop	{r4, r7, pc}

080048a6 <ucg_font_setup_decode>:
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3380      	adds	r3, #128	; 0x80
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	731a      	strb	r2, [r3, #12]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80048dc:	4619      	mov	r1, r3
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f7ff fe6d 	bl	80045be <ucg_font_decode_get_unsigned_bits>
 80048e4:	4603      	mov	r3, r0
 80048e6:	b25a      	sxtb	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	729a      	strb	r2, [r3, #10]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80048f2:	4619      	mov	r1, r3
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f7ff fe62 	bl	80045be <ucg_font_decode_get_unsigned_bits>
 80048fa:	4603      	mov	r3, r0
 80048fc:	b25a      	sxtb	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	72da      	strb	r2, [r3, #11]
 8004902:	bf00      	nop
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <ucg_font_decode_glyph>:
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	6039      	str	r1, [r7, #0]
 8004914:	6839      	ldr	r1, [r7, #0]
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff ffc5 	bl	80048a6 <ucg_font_setup_decode>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8004922:	73fb      	strb	r3, [r7, #15]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f7ff fe8e 	bl	8004654 <ucg_font_decode_get_signed_bits>
 8004938:	4603      	mov	r3, r0
 800493a:	73bb      	strb	r3, [r7, #14]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f7ff fe82 	bl	8004654 <ucg_font_decode_get_signed_bits>
 8004950:	4603      	mov	r3, r0
 8004952:	737b      	strb	r3, [r7, #13]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004960:	4619      	mov	r1, r3
 8004962:	4610      	mov	r0, r2
 8004964:	f7ff fe76 	bl	8004654 <ucg_font_decode_get_signed_bits>
 8004968:	4603      	mov	r3, r0
 800496a:	733b      	strb	r3, [r7, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f993 308a 	ldrsb.w	r3, [r3, #138]	; 0x8a
 8004972:	2b00      	cmp	r3, #0
 8004974:	dd69      	ble.n	8004a4a <ucg_font_decode_glyph+0x140>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	; 0x84
 800497c:	7bfa      	ldrb	r2, [r7, #15]
 800497e:	7b7b      	ldrb	r3, [r7, #13]
 8004980:	4413      	add	r3, r2
 8004982:	b2db      	uxtb	r3, r3
 8004984:	425b      	negs	r3, r3
 8004986:	b2db      	uxtb	r3, r3
 8004988:	b25a      	sxtb	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004990:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8004994:	f7ff febe 	bl	8004714 <ucg_add_vector_x>
 8004998:	4603      	mov	r3, r0
 800499a:	461a      	mov	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	; 0x86
 80049a8:	7bfa      	ldrb	r2, [r7, #15]
 80049aa:	7b7b      	ldrb	r3, [r7, #13]
 80049ac:	4413      	add	r3, r2
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	425b      	negs	r3, r3
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	b25a      	sxtb	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80049bc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80049c0:	f7ff fe6b 	bl	800469a <ucg_add_vector_y>
 80049c4:	4603      	mov	r3, r0
 80049c6:	461a      	mov	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80049ea:	4619      	mov	r1, r3
 80049ec:	4610      	mov	r0, r2
 80049ee:	f7ff fde6 	bl	80045be <ucg_font_decode_get_unsigned_bits>
 80049f2:	4603      	mov	r3, r0
 80049f4:	72fb      	strb	r3, [r7, #11]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f7ff fdda 	bl	80045be <ucg_font_decode_get_unsigned_bits>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	72bb      	strb	r3, [r7, #10]
 8004a0e:	7afb      	ldrb	r3, [r7, #11]
 8004a10:	2200      	movs	r2, #0
 8004a12:	4619      	mov	r1, r3
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff feba 	bl	800478e <ucg_font_decode_len>
 8004a1a:	7abb      	ldrb	r3, [r7, #10]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	4619      	mov	r1, r3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff feb4 	bl	800478e <ucg_font_decode_len>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3380      	adds	r3, #128	; 0x80
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fdc6 	bl	80045be <ucg_font_decode_get_unsigned_bits>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1ea      	bne.n	8004a0e <ucg_font_decode_glyph+0x104>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f993 3089 	ldrsb.w	r3, [r3, #137]	; 0x89
 8004a3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	dd00      	ble.n	8004a48 <ucg_font_decode_glyph+0x13e>
 8004a46:	e7ca      	b.n	80049de <ucg_font_decode_glyph+0xd4>
 8004a48:	bf00      	nop
 8004a4a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <ucg_font_get_glyph_data>:
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	70fb      	strb	r3, [r7, #3]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3315      	adds	r3, #21
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	2b60      	cmp	r3, #96	; 0x60
 8004a72:	d907      	bls.n	8004a84 <ucg_font_get_glyph_data+0x2e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	e009      	b.n	8004a98 <ucg_font_get_glyph_data+0x42>
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	2b40      	cmp	r3, #64	; 0x40
 8004a88:	d906      	bls.n	8004a98 <ucg_font_get_glyph_data+0x42>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8004a90:	461a      	mov	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4413      	add	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00e      	beq.n	8004ac0 <ucg_font_get_glyph_data+0x6a>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d101      	bne.n	8004ab0 <ucg_font_get_glyph_data+0x5a>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	e009      	b.n	8004ac4 <ucg_font_get_glyph_data+0x6e>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	e7eb      	b.n	8004a98 <ucg_font_get_glyph_data+0x42>
 8004ac0:	bf00      	nop
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <ucg_font_draw_glyph>:
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	4608      	mov	r0, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	461a      	mov	r2, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	817b      	strh	r3, [r7, #10]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	813b      	strh	r3, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	71fb      	strb	r3, [r7, #7]
 8004aea:	2300      	movs	r3, #0
 8004aec:	82fb      	strh	r3, [r7, #22]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	897a      	ldrh	r2, [r7, #10]
 8004af2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	893a      	ldrh	r2, [r7, #8]
 8004afa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	79fa      	ldrb	r2, [r7, #7]
 8004b02:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8004b06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7ff ffa2 	bl	8004a56 <ucg_font_get_glyph_data>
 8004b12:	6138      	str	r0, [r7, #16]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <ucg_font_draw_glyph+0x56>
 8004b1a:	6939      	ldr	r1, [r7, #16]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff fef4 	bl	800490a <ucg_font_decode_glyph>
 8004b22:	4603      	mov	r3, r0
 8004b24:	82fb      	strh	r3, [r7, #22]
 8004b26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <ucg_SetFontMode>:
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	70fb      	strb	r3, [r7, #3]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	78fa      	ldrb	r2, [r7, #3]
 8004b42:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <ucg_DrawGlyph>:
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	4611      	mov	r1, r2
 8004b60:	461a      	mov	r2, r3
 8004b62:	4603      	mov	r3, r0
 8004b64:	817b      	strh	r3, [r7, #10]
 8004b66:	460b      	mov	r3, r1
 8004b68:	813b      	strh	r3, [r7, #8]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	71fb      	strb	r3, [r7, #7]
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d837      	bhi.n	8004be4 <ucg_DrawGlyph+0x90>
 8004b74:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <ucg_DrawGlyph+0x28>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004b8d 	.word	0x08004b8d
 8004b80:	08004ba3 	.word	0x08004ba3
 8004b84:	08004bb9 	.word	0x08004bb9
 8004b88:	08004bcf 	.word	0x08004bcf
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	4798      	blx	r3
 8004b94:	4603      	mov	r3, r0
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	893b      	ldrh	r3, [r7, #8]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	813b      	strh	r3, [r7, #8]
 8004ba0:	e020      	b.n	8004be4 <ucg_DrawGlyph+0x90>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	4798      	blx	r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	897a      	ldrh	r2, [r7, #10]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	817b      	strh	r3, [r7, #10]
 8004bb6:	e015      	b.n	8004be4 <ucg_DrawGlyph+0x90>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	4798      	blx	r3
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	893a      	ldrh	r2, [r7, #8]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	813b      	strh	r3, [r7, #8]
 8004bcc:	e00a      	b.n	8004be4 <ucg_DrawGlyph+0x90>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	4798      	blx	r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	897b      	ldrh	r3, [r7, #10]
 8004bdc:	4413      	add	r3, r2
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	817b      	strh	r3, [r7, #10]
 8004be2:	bf00      	nop
 8004be4:	79f8      	ldrb	r0, [r7, #7]
 8004be6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004bea:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004bee:	7e3b      	ldrb	r3, [r7, #24]
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7ff ff6b 	bl	8004ad0 <ucg_font_draw_glyph>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <task_drawString>:
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	81fb      	strh	r3, [r7, #14]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	4b45      	ldr	r3, [pc, #276]	; (8004d2c <task_drawString+0x128>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <task_drawString+0x1e>
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d01e      	beq.n	8004c5e <task_drawString+0x5a>
 8004c20:	e07b      	b.n	8004d1a <task_drawString+0x116>
 8004c22:	4843      	ldr	r0, [pc, #268]	; (8004d30 <task_drawString+0x12c>)
 8004c24:	f000 fb83 	bl	800532e <bufNumItems>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <task_drawString+0x3a>
 8004c2e:	4941      	ldr	r1, [pc, #260]	; (8004d34 <task_drawString+0x130>)
 8004c30:	483f      	ldr	r0, [pc, #252]	; (8004d30 <task_drawString+0x12c>)
 8004c32:	f000 fc15 	bl	8005460 <bufDeDat>
 8004c36:	4b3d      	ldr	r3, [pc, #244]	; (8004d2c <task_drawString+0x128>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	e071      	b.n	8004d22 <task_drawString+0x11e>
 8004c3e:	4b3e      	ldr	r3, [pc, #248]	; (8004d38 <task_drawString+0x134>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2bff      	cmp	r3, #255	; 0xff
 8004c44:	d007      	beq.n	8004c56 <task_drawString+0x52>
 8004c46:	4b3c      	ldr	r3, [pc, #240]	; (8004d38 <task_drawString+0x134>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe fd1a 	bl	8003684 <TimerStop>
 8004c50:	4b39      	ldr	r3, [pc, #228]	; (8004d38 <task_drawString+0x134>)
 8004c52:	22ff      	movs	r2, #255	; 0xff
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	4b35      	ldr	r3, [pc, #212]	; (8004d2c <task_drawString+0x128>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	701a      	strb	r2, [r3, #0]
 8004c5c:	e061      	b.n	8004d22 <task_drawString+0x11e>
 8004c5e:	4b35      	ldr	r3, [pc, #212]	; (8004d34 <task_drawString+0x130>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d054      	beq.n	8004d12 <task_drawString+0x10e>
 8004c68:	4b32      	ldr	r3, [pc, #200]	; (8004d34 <task_drawString+0x130>)
 8004c6a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004c6e:	4b31      	ldr	r3, [pc, #196]	; (8004d34 <task_drawString+0x130>)
 8004c70:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004c74:	4b2f      	ldr	r3, [pc, #188]	; (8004d34 <task_drawString+0x130>)
 8004c76:	7918      	ldrb	r0, [r3, #4]
 8004c78:	4b2e      	ldr	r3, [pc, #184]	; (8004d34 <task_drawString+0x130>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	4603      	mov	r3, r0
 8004c82:	68b8      	ldr	r0, [r7, #8]
 8004c84:	f7ff ff66 	bl	8004b54 <ucg_DrawGlyph>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	81fb      	strh	r3, [r7, #14]
 8004c8c:	4b29      	ldr	r3, [pc, #164]	; (8004d34 <task_drawString+0x130>)
 8004c8e:	791b      	ldrb	r3, [r3, #4]
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d837      	bhi.n	8004d04 <task_drawString+0x100>
 8004c94:	a201      	add	r2, pc, #4	; (adr r2, 8004c9c <task_drawString+0x98>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004cad 	.word	0x08004cad
 8004ca0:	08004cc3 	.word	0x08004cc3
 8004ca4:	08004cd9 	.word	0x08004cd9
 8004ca8:	08004cef 	.word	0x08004cef
 8004cac:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <task_drawString+0x130>)
 8004cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	89fb      	ldrh	r3, [r7, #14]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	b21a      	sxth	r2, r3
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <task_drawString+0x130>)
 8004cbe:	801a      	strh	r2, [r3, #0]
 8004cc0:	e021      	b.n	8004d06 <task_drawString+0x102>
 8004cc2:	4b1c      	ldr	r3, [pc, #112]	; (8004d34 <task_drawString+0x130>)
 8004cc4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	89fb      	ldrh	r3, [r7, #14]
 8004ccc:	4413      	add	r3, r2
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	b21a      	sxth	r2, r3
 8004cd2:	4b18      	ldr	r3, [pc, #96]	; (8004d34 <task_drawString+0x130>)
 8004cd4:	805a      	strh	r2, [r3, #2]
 8004cd6:	e016      	b.n	8004d06 <task_drawString+0x102>
 8004cd8:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <task_drawString+0x130>)
 8004cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	89fb      	ldrh	r3, [r7, #14]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	b21a      	sxth	r2, r3
 8004ce8:	4b12      	ldr	r3, [pc, #72]	; (8004d34 <task_drawString+0x130>)
 8004cea:	801a      	strh	r2, [r3, #0]
 8004cec:	e00b      	b.n	8004d06 <task_drawString+0x102>
 8004cee:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <task_drawString+0x130>)
 8004cf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	89fb      	ldrh	r3, [r7, #14]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	b21a      	sxth	r2, r3
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <task_drawString+0x130>)
 8004d00:	805a      	strh	r2, [r3, #2]
 8004d02:	e000      	b.n	8004d06 <task_drawString+0x102>
 8004d04:	bf00      	nop
 8004d06:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <task_drawString+0x130>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <task_drawString+0x130>)
 8004d0e:	6093      	str	r3, [r2, #8]
 8004d10:	e007      	b.n	8004d22 <task_drawString+0x11e>
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <task_drawString+0x128>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e003      	b.n	8004d22 <task_drawString+0x11e>
 8004d1a:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <task_drawString+0x128>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	200014d4 	.word	0x200014d4
 8004d30:	200004c4 	.word	0x200004c4
 8004d34:	200014d8 	.word	0x200014d8
 8004d38:	20000024 	.word	0x20000024

08004d3c <ucg_DrawString>:
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08a      	sub	sp, #40	; 0x28
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	4608      	mov	r0, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	817b      	strh	r3, [r7, #10]
 8004d4e:	460b      	mov	r3, r1
 8004d50:	813b      	strh	r3, [r7, #8]
 8004d52:	4613      	mov	r3, r2
 8004d54:	71fb      	strb	r3, [r7, #7]
 8004d56:	2300      	movs	r3, #0
 8004d58:	83fb      	strh	r3, [r7, #30]
 8004d5a:	897b      	ldrh	r3, [r7, #10]
 8004d5c:	823b      	strh	r3, [r7, #16]
 8004d5e:	893b      	ldrh	r3, [r7, #8]
 8004d60:	827b      	strh	r3, [r7, #18]
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	753b      	strb	r3, [r7, #20]
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	f107 0310 	add.w	r3, r7, #16
 8004d6e:	4619      	mov	r1, r3
 8004d70:	480c      	ldr	r0, [pc, #48]	; (8004da4 <ucg_DrawString+0x68>)
 8004d72:	f000 fb27 	bl	80053c4 <bufEnDat>
 8004d76:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <ucg_DrawString+0x6c>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2bff      	cmp	r3, #255	; 0xff
 8004d7c:	d10b      	bne.n	8004d96 <ucg_DrawString+0x5a>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <ucg_DrawString+0x70>)
 8004d84:	22ff      	movs	r2, #255	; 0xff
 8004d86:	211e      	movs	r1, #30
 8004d88:	4809      	ldr	r0, [pc, #36]	; (8004db0 <ucg_DrawString+0x74>)
 8004d8a:	f7fe fc19 	bl	80035c0 <TimerStart>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	461a      	mov	r2, r3
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <ucg_DrawString+0x6c>)
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	200004c4 	.word	0x200004c4
 8004da8:	20000024 	.word	0x20000024
 8004dac:	08004c05 	.word	0x08004c05
 8004db0:	08006008 	.word	0x08006008

08004db4 <ucg_UpdateRefHeight>:
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d05d      	beq.n	8004e80 <ucg_UpdateRefHeight+0xcc>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f993 209d 	ldrsb.w	r2, [r3, #157]	; 0x9d
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f993 209e 	ldrsb.w	r2, [r3, #158]	; 0x9e
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d04d      	beq.n	8004e82 <ucg_UpdateRefHeight+0xce>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d11c      	bne.n	8004e2a <ucg_UpdateRefHeight+0x76>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f993 20ac 	ldrsb.w	r2, [r3, #172]	; 0xac
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f993 309f 	ldrsb.w	r3, [r3, #159]	; 0x9f
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	da05      	bge.n	8004e0c <ucg_UpdateRefHeight+0x58>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f993 209f 	ldrsb.w	r2, [r3, #159]	; 0x9f
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	dd32      	ble.n	8004e82 <ucg_UpdateRefHeight+0xce>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f993 20a0 	ldrsb.w	r2, [r3, #160]	; 0xa0
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8004e28:	e02b      	b.n	8004e82 <ucg_UpdateRefHeight+0xce>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f993 30ac 	ldrsb.w	r3, [r3, #172]	; 0xac
 8004e30:	461a      	mov	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8004e38:	4619      	mov	r1, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8004e40:	440b      	add	r3, r1
 8004e42:	429a      	cmp	r2, r3
 8004e44:	da0d      	bge.n	8004e62 <ucg_UpdateRefHeight+0xae>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	b25a      	sxtb	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	dd07      	ble.n	8004e82 <ucg_UpdateRefHeight+0xce>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f993 209c 	ldrsb.w	r2, [r3, #156]	; 0x9c
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8004e7e:	e000      	b.n	8004e82 <ucg_UpdateRefHeight+0xce>
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <ucg_font_calc_vref_font>:
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	2300      	movs	r3, #0
 8004e96:	4618      	mov	r0, r3
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <ucg_SetFontPosBaseline>:
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <ucg_SetFontPosBaseline+0x1c>)
 8004eb0:	67da      	str	r2, [r3, #124]	; 0x7c
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	08004e8d 	.word	0x08004e8d

08004ec4 <ucg_SetFont>:
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d012      	beq.n	8004efe <ucg_SetFont+0x3a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	679a      	str	r2, [r3, #120]	; 0x78
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	3390      	adds	r3, #144	; 0x90
 8004ee2:	6839      	ldr	r1, [r7, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fac9 	bl	800447c <ucg_read_font_info>
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff ff62 	bl	8004db4 <ucg_UpdateRefHeight>
 8004ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ef4:	220c      	movs	r2, #12
 8004ef6:	4904      	ldr	r1, [pc, #16]	; (8004f08 <ucg_SetFont+0x44>)
 8004ef8:	4804      	ldr	r0, [pc, #16]	; (8004f0c <ucg_SetFont+0x48>)
 8004efa:	f000 f9fd 	bl	80052f8 <bufInit>
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	200004c4 	.word	0x200004c4
 8004f0c:	200004d4 	.word	0x200004d4

08004f10 <ucg_init_struct>:
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	7813      	ldrb	r3, [r2, #0]
 8004f1c:	f36f 0300 	bfc	r3, #0, #1
 8004f20:	7013      	strb	r3, [r2, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	611a      	str	r2, [r3, #16]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	865a      	strh	r2, [r3, #50]	; 0x32
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	679a      	str	r2, [r3, #120]	; 0x78
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <ucg_Init>:
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7ff ffce 	bl	8004f10 <ucg_init_struct>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d103      	bne.n	8004f82 <ucg_Init+0x22>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4a0e      	ldr	r2, [pc, #56]	; (8004fb8 <ucg_Init+0x58>)
 8004f7e:	60da      	str	r2, [r3, #12]
 8004f80:	e002      	b.n	8004f88 <ucg_Init+0x28>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	60da      	str	r2, [r3, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	609a      	str	r2, [r3, #8]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	61da      	str	r2, [r3, #28]
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f7ff ff85 	bl	8004ea4 <ucg_SetFontPosBaseline>
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f7ff f988 	bl	80042b0 <ucg_PowerUp>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	82fb      	strh	r3, [r7, #22]
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7ff f9c8 	bl	800433a <ucg_GetDimension>
 8004faa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	08003f15 	.word	0x08003f15

08004fbc <ucg_Draw90Line>:
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4603      	mov	r3, r0
 8004fcc:	817b      	strh	r3, [r7, #10]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	813b      	strh	r3, [r7, #8]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	80fb      	strh	r3, [r7, #6]
 8004fd6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004fda:	68f9      	ldr	r1, [r7, #12]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	4413      	add	r3, r2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	333a      	adds	r3, #58	; 0x3a
 8004fe6:	781a      	ldrb	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004fee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004ff2:	68f9      	ldr	r1, [r7, #12]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	4413      	add	r3, r2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	333b      	adds	r3, #59	; 0x3b
 8004ffe:	781a      	ldrb	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005006:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	4613      	mov	r3, r2
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	4413      	add	r3, r2
 8005012:	440b      	add	r3, r1
 8005014:	333c      	adds	r3, #60	; 0x3c
 8005016:	781a      	ldrb	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	897a      	ldrh	r2, [r7, #10]
 8005022:	849a      	strh	r2, [r3, #36]	; 0x24
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	893a      	ldrh	r2, [r7, #8]
 8005028:	84da      	strh	r2, [r3, #38]	; 0x26
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	88fa      	ldrh	r2, [r7, #6]
 800502e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8b3a      	ldrh	r2, [r7, #24]
 8005034:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f7ff f99f 	bl	800437a <ucg_DrawL90FXWithArg>
 800503c:	bf00      	nop
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <ucg_DrawHLine>:
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	4608      	mov	r0, r1
 800504e:	4611      	mov	r1, r2
 8005050:	461a      	mov	r2, r3
 8005052:	4603      	mov	r3, r0
 8005054:	817b      	strh	r3, [r7, #10]
 8005056:	460b      	mov	r3, r1
 8005058:	813b      	strh	r3, [r7, #8]
 800505a:	4613      	mov	r3, r2
 800505c:	80fb      	strh	r3, [r7, #6]
 800505e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005062:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005066:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800506a:	2300      	movs	r3, #0
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	2300      	movs	r3, #0
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	4603      	mov	r3, r0
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff ffa1 	bl	8004fbc <ucg_Draw90Line>
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <ucg_SetColor>:
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	4608      	mov	r0, r1
 800508c:	4611      	mov	r1, r2
 800508e:	461a      	mov	r2, r3
 8005090:	4603      	mov	r3, r0
 8005092:	70fb      	strb	r3, [r7, #3]
 8005094:	460b      	mov	r3, r1
 8005096:	70bb      	strb	r3, [r7, #2]
 8005098:	4613      	mov	r3, r2
 800509a:	707b      	strb	r3, [r7, #1]
 800509c:	78fa      	ldrb	r2, [r7, #3]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	4413      	add	r3, r2
 80050a6:	440b      	add	r3, r1
 80050a8:	333a      	adds	r3, #58	; 0x3a
 80050aa:	78ba      	ldrb	r2, [r7, #2]
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	78fa      	ldrb	r2, [r7, #3]
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	4413      	add	r3, r2
 80050b8:	440b      	add	r3, r1
 80050ba:	333b      	adds	r3, #59	; 0x3b
 80050bc:	787a      	ldrb	r2, [r7, #1]
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	4613      	mov	r3, r2
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	4413      	add	r3, r2
 80050ca:	440b      	add	r3, r1
 80050cc:	333c      	adds	r3, #60	; 0x3c
 80050ce:	7c3a      	ldrb	r2, [r7, #16]
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <ucg_DrawPixel>:
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	460b      	mov	r3, r1
 80050e8:	807b      	strh	r3, [r7, #2]
 80050ea:	4613      	mov	r3, r2
 80050ec:	803b      	strh	r3, [r7, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	887a      	ldrh	r2, [r7, #2]
 8005116:	849a      	strh	r2, [r3, #36]	; 0x24
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	883a      	ldrh	r2, [r7, #0]
 800511c:	84da      	strh	r2, [r3, #38]	; 0x26
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff f91d 	bl	800435e <ucg_DrawPixelWithArg>
 8005124:	bf00      	nop
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <ucg_UndoRotate>:
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d006      	beq.n	800514a <ucg_UndoRotate+0x1e>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	609a      	str	r2, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	611a      	str	r2, [r3, #16]
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff f8f5 	bl	800433a <ucg_GetDimension>
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff f8da 	bl	800430a <ucg_SetMaxClipRange>
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <ucg_rotate_180_xy>:
 800515e:	b480      	push	{r7}
 8005160:	b085      	sub	sp, #20
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	6039      	str	r1, [r7, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8adb      	ldrh	r3, [r3, #22]
 800516c:	81fb      	strh	r3, [r7, #14]
 800516e:	89fa      	ldrh	r2, [r7, #14]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005176:	b29b      	uxth	r3, r3
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	b29b      	uxth	r3, r3
 800517c:	81fb      	strh	r3, [r7, #14]
 800517e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b01      	subs	r3, #1
 8005186:	b29b      	uxth	r3, r3
 8005188:	81fb      	strh	r3, [r7, #14]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	89fa      	ldrh	r2, [r7, #14]
 800518e:	805a      	strh	r2, [r3, #2]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8a9b      	ldrh	r3, [r3, #20]
 8005194:	81bb      	strh	r3, [r7, #12]
 8005196:	89ba      	ldrh	r2, [r7, #12]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	81bb      	strh	r3, [r7, #12]
 80051a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	81bb      	strh	r3, [r7, #12]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	89ba      	ldrh	r2, [r7, #12]
 80051b6:	801a      	strh	r2, [r3, #0]
 80051b8:	bf00      	nop
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <ucg_dev_rotate180>:
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	460b      	mov	r3, r1
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	817b      	strh	r3, [r7, #10]
 80051d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051d6:	3b0c      	subs	r3, #12
 80051d8:	2b0b      	cmp	r3, #11
 80051da:	d866      	bhi.n	80052aa <ucg_dev_rotate180+0xe6>
 80051dc:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <ucg_dev_rotate180+0x20>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	08005233 	.word	0x08005233
 80051e8:	080052ab 	.word	0x080052ab
 80051ec:	080052ab 	.word	0x080052ab
 80051f0:	08005215 	.word	0x08005215
 80051f4:	080052ab 	.word	0x080052ab
 80051f8:	080052ab 	.word	0x080052ab
 80051fc:	080052ab 	.word	0x080052ab
 8005200:	080052ab 	.word	0x080052ab
 8005204:	0800527b 	.word	0x0800527b
 8005208:	0800527b 	.word	0x0800527b
 800520c:	080052ab 	.word	0x080052ab
 8005210:	0800527b 	.word	0x0800527b
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	3214      	adds	r2, #20
 800521c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	4798      	blx	r3
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3314      	adds	r3, #20
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	6010      	str	r0, [r2, #0]
 800522e:	2301      	movs	r3, #1
 8005230:	e043      	b.n	80052ba <ucg_dev_rotate180+0xf6>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005238:	b29a      	uxth	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005240:	b29b      	uxth	r3, r3
 8005242:	4413      	add	r3, r2
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29b      	uxth	r3, r3
 800524a:	b21a      	sxth	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	805a      	strh	r2, [r3, #2]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005256:	b29a      	uxth	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800525e:	b29b      	uxth	r3, r3
 8005260:	4413      	add	r3, r2
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29b      	uxth	r3, r3
 8005268:	b21a      	sxth	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4619      	mov	r1, r3
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7ff ff73 	bl	800515e <ucg_rotate_180_xy>
 8005278:	e017      	b.n	80052aa <ucg_dev_rotate180+0xe6>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005280:	b29b      	uxth	r3, r3
 8005282:	3302      	adds	r3, #2
 8005284:	b29b      	uxth	r3, r3
 8005286:	b21a      	sxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	b21a      	sxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3324      	adds	r3, #36	; 0x24
 80052a0:	4619      	mov	r1, r3
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7ff ff5b 	bl	800515e <ucg_rotate_180_xy>
 80052a8:	bf00      	nop
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	4798      	blx	r3
 80052b8:	4603      	mov	r3, r0
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop

080052c4 <ucg_SetRotate180>:
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff ff2d 	bl	800512c <ucg_UndoRotate>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	611a      	str	r2, [r3, #16]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a05      	ldr	r2, [pc, #20]	; (80052f4 <ucg_SetRotate180+0x30>)
 80052de:	609a      	str	r2, [r3, #8]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff f82a 	bl	800433a <ucg_GetDimension>
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7ff f80f 	bl	800430a <ucg_SetMaxClipRange>
 80052ec:	bf00      	nop
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	080051c5 	.word	0x080051c5

080052f8 <bufInit>:
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	4611      	mov	r1, r2
 8005304:	461a      	mov	r2, r3
 8005306:	460b      	mov	r3, r1
 8005308:	71fb      	strb	r3, [r7, #7]
 800530a:	4613      	mov	r3, r2
 800530c:	80bb      	strh	r3, [r7, #4]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	88ba      	ldrh	r2, [r7, #4]
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	79fa      	ldrb	r2, [r7, #7]
 8005318:	711a      	strb	r2, [r3, #4]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	60da      	str	r2, [r3, #12]
 8005320:	68b8      	ldr	r0, [r7, #8]
 8005322:	f000 f836 	bl	8005392 <bufFlush>
 8005326:	bf00      	nop
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <bufNumItems>:
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	885b      	ldrh	r3, [r3, #2]
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <bufIsFull>:
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	885a      	ldrh	r2, [r3, #2]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	bf2c      	ite	cs
 800535a:	2301      	movcs	r3, #1
 800535c:	2300      	movcc	r3, #0
 800535e:	b2db      	uxtb	r3, r3
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <bufIsEmpty>:
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	88da      	ldrh	r2, [r3, #6]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	891b      	ldrh	r3, [r3, #8]
 800537c:	429a      	cmp	r2, r3
 800537e:	bf0c      	ite	eq
 8005380:	2301      	moveq	r3, #1
 8005382:	2300      	movne	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	4618      	mov	r0, r3
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <bufFlush>:
 8005392:	b580      	push	{r7, lr}
 8005394:	b082      	sub	sp, #8
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	80da      	strh	r2, [r3, #6]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	811a      	strh	r2, [r3, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	805a      	strh	r2, [r3, #2]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68d8      	ldr	r0, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	2100      	movs	r1, #0
 80053b8:	f000 f894 	bl	80054e4 <memsetl>
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <bufEnDat>:
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
 80053ce:	b672      	cpsid	i
 80053d0:	2300      	movs	r3, #0
 80053d2:	73fb      	strb	r3, [r7, #15]
 80053d4:	e021      	b.n	800541a <bufEnDat+0x56>
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	441a      	add	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	88c9      	ldrh	r1, [r1, #6]
 80053e4:	440b      	add	r3, r1
 80053e6:	7812      	ldrb	r2, [r2, #0]
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	88db      	ldrh	r3, [r3, #6]
 80053ee:	3301      	adds	r3, #1
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	b21a      	sxth	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	b21b      	sxth	r3, r3
 80053fe:	4013      	ands	r3, r2
 8005400:	b21b      	sxth	r3, r3
 8005402:	b29a      	uxth	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	80da      	strh	r2, [r3, #6]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	885b      	ldrh	r3, [r3, #2]
 800540c:	3301      	adds	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	805a      	strh	r2, [r3, #2]
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	3301      	adds	r3, #1
 8005418:	73fb      	strb	r3, [r7, #15]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	791b      	ldrb	r3, [r3, #4]
 800541e:	7bfa      	ldrb	r2, [r7, #15]
 8005420:	429a      	cmp	r2, r3
 8005422:	d3d8      	bcc.n	80053d6 <bufEnDat+0x12>
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7ff ff8e 	bl	8005346 <bufIsFull>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d011      	beq.n	8005454 <bufEnDat+0x90>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	891a      	ldrh	r2, [r3, #8]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	791b      	ldrb	r3, [r3, #4]
 8005438:	b29b      	uxth	r3, r3
 800543a:	4413      	add	r3, r2
 800543c:	b29b      	uxth	r3, r3
 800543e:	b21a      	sxth	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	3b01      	subs	r3, #1
 8005446:	b29b      	uxth	r3, r3
 8005448:	b21b      	sxth	r3, r3
 800544a:	4013      	ands	r3, r2
 800544c:	b21b      	sxth	r3, r3
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	811a      	strh	r2, [r3, #8]
 8005454:	b662      	cpsie	i
 8005456:	2300      	movs	r3, #0
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <bufDeDat>:
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
 800546a:	b672      	cpsid	i
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff ff7d 	bl	800536c <bufIsEmpty>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <bufDeDat+0x24>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	805a      	strh	r2, [r3, #2]
 800547e:	b662      	cpsie	i
 8005480:	2302      	movs	r3, #2
 8005482:	e02b      	b.n	80054dc <bufDeDat+0x7c>
 8005484:	2300      	movs	r3, #0
 8005486:	73fb      	strb	r3, [r7, #15]
 8005488:	e021      	b.n	80054ce <bufDeDat+0x6e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	8912      	ldrh	r2, [r2, #8]
 8005492:	441a      	add	r2, r3
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	6839      	ldr	r1, [r7, #0]
 8005498:	440b      	add	r3, r1
 800549a:	7812      	ldrb	r2, [r2, #0]
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	891b      	ldrh	r3, [r3, #8]
 80054a2:	3301      	adds	r3, #1
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	b21a      	sxth	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	b21b      	sxth	r3, r3
 80054b2:	4013      	ands	r3, r2
 80054b4:	b21b      	sxth	r3, r3
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	811a      	strh	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	885b      	ldrh	r3, [r3, #2]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	805a      	strh	r2, [r3, #2]
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	3301      	adds	r3, #1
 80054cc:	73fb      	strb	r3, [r7, #15]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	791b      	ldrb	r3, [r3, #4]
 80054d2:	7bfa      	ldrb	r2, [r7, #15]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d3d8      	bcc.n	800548a <bufDeDat+0x2a>
 80054d8:	b662      	cpsie	i
 80054da:	2300      	movs	r3, #0
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <memsetl>:
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	70fb      	strb	r3, [r7, #3]
 80054f0:	4613      	mov	r3, r2
 80054f2:	803b      	strh	r3, [r7, #0]
 80054f4:	e004      	b.n	8005500 <memsetl+0x1c>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	883b      	ldrh	r3, [r7, #0]
 8005502:	1e5a      	subs	r2, r3, #1
 8005504:	803a      	strh	r2, [r7, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f5      	bne.n	80054f6 <memsetl+0x12>
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <ucg_clip_is_x_visible>:
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005522:	81fb      	strh	r3, [r7, #14]
 8005524:	89fa      	ldrh	r2, [r7, #14]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800552c:	b29b      	uxth	r3, r3
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	b29b      	uxth	r3, r3
 8005532:	81fb      	strh	r3, [r7, #14]
 8005534:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005538:	2b00      	cmp	r3, #0
 800553a:	da01      	bge.n	8005540 <ucg_clip_is_x_visible+0x2a>
 800553c:	2300      	movs	r3, #0
 800553e:	e009      	b.n	8005554 <ucg_clip_is_x_visible+0x3e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8005546:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800554a:	429a      	cmp	r2, r3
 800554c:	db01      	blt.n	8005552 <ucg_clip_is_x_visible+0x3c>
 800554e:	2300      	movs	r3, #0
 8005550:	e000      	b.n	8005554 <ucg_clip_is_x_visible+0x3e>
 8005552:	2301      	movs	r3, #1
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <ucg_clip_is_y_visible>:
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800556c:	81fb      	strh	r3, [r7, #14]
 800556e:	89fa      	ldrh	r2, [r7, #14]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8005576:	b29b      	uxth	r3, r3
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	b29b      	uxth	r3, r3
 800557c:	81fb      	strh	r3, [r7, #14]
 800557e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005582:	2b00      	cmp	r3, #0
 8005584:	da01      	bge.n	800558a <ucg_clip_is_y_visible+0x2a>
 8005586:	2300      	movs	r3, #0
 8005588:	e009      	b.n	800559e <ucg_clip_is_y_visible+0x3e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8005590:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005594:	429a      	cmp	r2, r3
 8005596:	db01      	blt.n	800559c <ucg_clip_is_y_visible+0x3c>
 8005598:	2300      	movs	r3, #0
 800559a:	e000      	b.n	800559e <ucg_clip_is_y_visible+0x3e>
 800559c:	2301      	movs	r3, #1
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <ucg_clip_intersection>:
 80055aa:	b480      	push	{r7}
 80055ac:	b087      	sub	sp, #28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	4611      	mov	r1, r2
 80055b6:	461a      	mov	r2, r3
 80055b8:	460b      	mov	r3, r1
 80055ba:	80fb      	strh	r3, [r7, #6]
 80055bc:	4613      	mov	r3, r2
 80055be:	80bb      	strh	r3, [r7, #4]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	82fb      	strh	r3, [r7, #22]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	82bb      	strh	r3, [r7, #20]
 80055cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80055d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	db01      	blt.n	80055dc <ucg_clip_intersection+0x32>
 80055d8:	2300      	movs	r3, #0
 80055da:	e01a      	b.n	8005612 <ucg_clip_intersection+0x68>
 80055dc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80055e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	dc01      	bgt.n	80055ec <ucg_clip_intersection+0x42>
 80055e8:	2300      	movs	r3, #0
 80055ea:	e012      	b.n	8005612 <ucg_clip_intersection+0x68>
 80055ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80055f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	da02      	bge.n	80055fe <ucg_clip_intersection+0x54>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	88fa      	ldrh	r2, [r7, #6]
 80055fc:	801a      	strh	r2, [r3, #0]
 80055fe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005602:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005606:	429a      	cmp	r2, r3
 8005608:	dd02      	ble.n	8005610 <ucg_clip_intersection+0x66>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	88ba      	ldrh	r2, [r7, #4]
 800560e:	801a      	strh	r2, [r3, #0]
 8005610:	2301      	movs	r3, #1
 8005612:	4618      	mov	r0, r3
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <ucg_clip_is_pixel_visible>:
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff ff75 	bl	8005516 <ucg_clip_is_x_visible>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <ucg_clip_is_pixel_visible+0x18>
 8005632:	2300      	movs	r3, #0
 8005634:	e008      	b.n	8005648 <ucg_clip_is_pixel_visible+0x2a>
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff ff92 	bl	8005560 <ucg_clip_is_y_visible>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <ucg_clip_is_pixel_visible+0x28>
 8005642:	2300      	movs	r3, #0
 8005644:	e000      	b.n	8005648 <ucg_clip_is_pixel_visible+0x2a>
 8005646:	2301      	movs	r3, #1
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <ucg_clip_l90fx>:
 8005650:	b590      	push	{r4, r7, lr}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	861a      	strh	r2, [r3, #48]	; 0x30
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005664:	2b03      	cmp	r3, #3
 8005666:	f200 816d 	bhi.w	8005944 <ucg_clip_l90fx+0x2f4>
 800566a:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <ucg_clip_l90fx+0x20>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	08005681 	.word	0x08005681
 8005674:	08005727 	.word	0x08005727
 8005678:	080057cd 	.word	0x080057cd
 800567c:	08005889 	.word	0x08005889
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff ff6d 	bl	8005560 <ucg_clip_is_y_visible>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <ucg_clip_l90fx+0x40>
 800568c:	2300      	movs	r3, #0
 800568e:	e15a      	b.n	8005946 <ucg_clip_l90fx+0x2f6>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005696:	81fb      	strh	r3, [r7, #14]
 8005698:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800569c:	81bb      	strh	r3, [r7, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	4413      	add	r3, r2
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	b21b      	sxth	r3, r3
 80056b2:	81bb      	strh	r3, [r7, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	4413      	add	r3, r2
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	b21b      	sxth	r3, r3
 80056d0:	f107 010c 	add.w	r1, r7, #12
 80056d4:	f107 000e 	add.w	r0, r7, #14
 80056d8:	4622      	mov	r2, r4
 80056da:	f7ff ff66 	bl	80055aa <ucg_clip_intersection>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <ucg_clip_l90fx+0x98>
 80056e4:	2300      	movs	r3, #0
 80056e6:	e12e      	b.n	8005946 <ucg_clip_l90fx+0x2f6>
 80056e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	b21a      	sxth	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	861a      	strh	r2, [r3, #48]	; 0x30
 8005700:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	849a      	strh	r2, [r3, #36]	; 0x24
 8005708:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800570c:	b29a      	uxth	r2, r3
 800570e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005712:	b29b      	uxth	r3, r3
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	b29b      	uxth	r3, r3
 8005718:	b21b      	sxth	r3, r3
 800571a:	81bb      	strh	r3, [r7, #12]
 800571c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005724:	e10e      	b.n	8005944 <ucg_clip_l90fx+0x2f4>
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7ff fef5 	bl	8005516 <ucg_clip_is_x_visible>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <ucg_clip_l90fx+0xe6>
 8005732:	2300      	movs	r3, #0
 8005734:	e107      	b.n	8005946 <ucg_clip_l90fx+0x2f6>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800573c:	81fb      	strh	r3, [r7, #14]
 800573e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005742:	81bb      	strh	r3, [r7, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800574a:	b29a      	uxth	r2, r3
 800574c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005750:	b29b      	uxth	r3, r3
 8005752:	4413      	add	r3, r2
 8005754:	b29b      	uxth	r3, r3
 8005756:	b21b      	sxth	r3, r3
 8005758:	81bb      	strh	r3, [r7, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8005766:	b29a      	uxth	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 800576e:	b29b      	uxth	r3, r3
 8005770:	4413      	add	r3, r2
 8005772:	b29b      	uxth	r3, r3
 8005774:	b21b      	sxth	r3, r3
 8005776:	f107 010c 	add.w	r1, r7, #12
 800577a:	f107 000e 	add.w	r0, r7, #14
 800577e:	4622      	mov	r2, r4
 8005780:	f7ff ff13 	bl	80055aa <ucg_clip_intersection>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <ucg_clip_l90fx+0x13e>
 800578a:	2300      	movs	r3, #0
 800578c:	e0db      	b.n	8005946 <ucg_clip_l90fx+0x2f6>
 800578e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005792:	b29a      	uxth	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800579a:	b29b      	uxth	r3, r3
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	b29b      	uxth	r3, r3
 80057a0:	b21a      	sxth	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	861a      	strh	r2, [r3, #48]	; 0x30
 80057a6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	84da      	strh	r2, [r3, #38]	; 0x26
 80057ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	b29b      	uxth	r3, r3
 80057be:	b21b      	sxth	r3, r3
 80057c0:	81bb      	strh	r3, [r7, #12]
 80057c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	859a      	strh	r2, [r3, #44]	; 0x2c
 80057ca:	e0bb      	b.n	8005944 <ucg_clip_l90fx+0x2f4>
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff fec7 	bl	8005560 <ucg_clip_is_y_visible>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <ucg_clip_l90fx+0x18c>
 80057d8:	2300      	movs	r3, #0
 80057da:	e0b4      	b.n	8005946 <ucg_clip_l90fx+0x2f6>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80057e2:	81bb      	strh	r3, [r7, #12]
 80057e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3301      	adds	r3, #1
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	b21b      	sxth	r3, r3
 80057f0:	81bb      	strh	r3, [r7, #12]
 80057f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80057f6:	81fb      	strh	r3, [r7, #14]
 80057f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8005804:	b29b      	uxth	r3, r3
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	b29b      	uxth	r3, r3
 800580a:	b21b      	sxth	r3, r3
 800580c:	81fb      	strh	r3, [r7, #14]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800581a:	b29a      	uxth	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8005822:	b29b      	uxth	r3, r3
 8005824:	4413      	add	r3, r2
 8005826:	b29b      	uxth	r3, r3
 8005828:	b21b      	sxth	r3, r3
 800582a:	f107 010c 	add.w	r1, r7, #12
 800582e:	f107 000e 	add.w	r0, r7, #14
 8005832:	4622      	mov	r2, r4
 8005834:	f7ff feb9 	bl	80055aa <ucg_clip_intersection>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <ucg_clip_l90fx+0x1f2>
 800583e:	2300      	movs	r3, #0
 8005840:	e081      	b.n	8005946 <ucg_clip_l90fx+0x2f6>
 8005842:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005846:	b29a      	uxth	r2, r3
 8005848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800584c:	b29b      	uxth	r3, r3
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	b29b      	uxth	r3, r3
 8005852:	b21a      	sxth	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005858:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29b      	uxth	r3, r3
 8005862:	b21b      	sxth	r3, r3
 8005864:	81bb      	strh	r3, [r7, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800586c:	b29a      	uxth	r2, r3
 800586e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005872:	b29b      	uxth	r3, r3
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	b29b      	uxth	r3, r3
 8005878:	b21a      	sxth	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	861a      	strh	r2, [r3, #48]	; 0x30
 800587e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	849a      	strh	r2, [r3, #36]	; 0x24
 8005886:	e05d      	b.n	8005944 <ucg_clip_l90fx+0x2f4>
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fe44 	bl	8005516 <ucg_clip_is_x_visible>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <ucg_clip_l90fx+0x248>
 8005894:	2300      	movs	r3, #0
 8005896:	e056      	b.n	8005946 <ucg_clip_l90fx+0x2f6>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800589e:	81bb      	strh	r3, [r7, #12]
 80058a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3301      	adds	r3, #1
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	b21b      	sxth	r3, r3
 80058ac:	81bb      	strh	r3, [r7, #12]
 80058ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80058b2:	81fb      	strh	r3, [r7, #14]
 80058b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	b21b      	sxth	r3, r3
 80058c8:	81fb      	strh	r3, [r7, #14]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80058de:	b29b      	uxth	r3, r3
 80058e0:	4413      	add	r3, r2
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	b21b      	sxth	r3, r3
 80058e6:	f107 010c 	add.w	r1, r7, #12
 80058ea:	f107 000e 	add.w	r0, r7, #14
 80058ee:	4622      	mov	r2, r4
 80058f0:	f7ff fe5b 	bl	80055aa <ucg_clip_intersection>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <ucg_clip_l90fx+0x2ae>
 80058fa:	2300      	movs	r3, #0
 80058fc:	e023      	b.n	8005946 <ucg_clip_l90fx+0x2f6>
 80058fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005902:	b29a      	uxth	r2, r3
 8005904:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005908:	b29b      	uxth	r3, r3
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	b29b      	uxth	r3, r3
 800590e:	b21a      	sxth	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005914:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005918:	b29b      	uxth	r3, r3
 800591a:	3b01      	subs	r3, #1
 800591c:	b29b      	uxth	r3, r3
 800591e:	b21b      	sxth	r3, r3
 8005920:	81bb      	strh	r3, [r7, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8005928:	b29a      	uxth	r2, r3
 800592a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800592e:	b29b      	uxth	r3, r3
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	b29b      	uxth	r3, r3
 8005934:	b21a      	sxth	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	861a      	strh	r2, [r3, #48]	; 0x30
 800593a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	84da      	strh	r2, [r3, #38]	; 0x26
 8005942:	bf00      	nop
 8005944:	2301      	movs	r3, #1
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	bd90      	pop	{r4, r7, pc}
 800594e:	bf00      	nop

08005950 <ucg_clip_l90se>:
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7ff fe79 	bl	8005650 <ucg_clip_l90fx>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <ucg_clip_l90se+0x18>
 8005964:	2300      	movs	r3, #0
 8005966:	e019      	b.n	800599c <ucg_clip_l90se+0x4c>
 8005968:	2300      	movs	r3, #0
 800596a:	73fb      	strb	r3, [r7, #15]
 800596c:	e012      	b.n	8005994 <ucg_clip_l90se+0x44>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8005974:	7bfa      	ldrb	r2, [r7, #15]
 8005976:	4613      	mov	r3, r2
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	18ca      	adds	r2, r1, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f7fe fa3c 	bl	8003e06 <ucg_ccs_seek>
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	3301      	adds	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	2b02      	cmp	r3, #2
 8005998:	d9e9      	bls.n	800596e <ucg_clip_l90se+0x1e>
 800599a:	2301      	movs	r3, #1
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <ucg_com_PowerDown>:
 80059a4:	b590      	push	{r4, r7, lr}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d006      	beq.n	80059c8 <ucg_com_PowerDown+0x24>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69dc      	ldr	r4, [r3, #28]
 80059be:	2300      	movs	r3, #0
 80059c0:	2200      	movs	r2, #0
 80059c2:	210b      	movs	r1, #11
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	47a0      	blx	r4
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80059ce:	f023 0308 	bic.w	r3, r3, #8
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd90      	pop	{r4, r7, pc}

080059e2 <ucg_com_PowerUp>:
 80059e2:	b590      	push	{r4, r7, lr}
 80059e4:	b085      	sub	sp, #20
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	460b      	mov	r3, r1
 80059ec:	807b      	strh	r3, [r7, #2]
 80059ee:	4613      	mov	r3, r2
 80059f0:	803b      	strh	r3, [r7, #0]
 80059f2:	887b      	ldrh	r3, [r7, #2]
 80059f4:	813b      	strh	r3, [r7, #8]
 80059f6:	883b      	ldrh	r3, [r7, #0]
 80059f8:	817b      	strh	r3, [r7, #10]
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff ffd2 	bl	80059a4 <ucg_com_PowerDown>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69dc      	ldr	r4, [r3, #28]
 8005a0c:	f107 0308 	add.w	r3, r7, #8
 8005a10:	2200      	movs	r2, #0
 8005a12:	210a      	movs	r1, #10
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	47a0      	blx	r4
 8005a18:	4603      	mov	r3, r0
 8005a1a:	81fb      	strh	r3, [r7, #14]
 8005a1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d008      	beq.n	8005a36 <ucg_com_PowerUp+0x54>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8005a2a:	f043 0308 	orr.w	r3, r3, #8
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8005a36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd90      	pop	{r4, r7, pc}

08005a42 <ucg_com_SetLineStatus>:
 8005a42:	b590      	push	{r4, r7, lr}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	4608      	mov	r0, r1
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4603      	mov	r3, r0
 8005a52:	70fb      	strb	r3, [r7, #3]
 8005a54:	460b      	mov	r3, r1
 8005a56:	70bb      	strb	r3, [r7, #2]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	707b      	strb	r3, [r7, #1]
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d131      	bne.n	8005ac6 <ucg_com_SetLineStatus+0x84>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8005a68:	78bb      	ldrb	r3, [r7, #2]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d008      	beq.n	8005a84 <ucg_com_SetLineStatus+0x42>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8005a78:	78bb      	ldrb	r3, [r7, #2]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	78ba      	ldrb	r2, [r7, #2]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d14b      	bne.n	8005b1c <ucg_com_SetLineStatus+0xda>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	69dc      	ldr	r4, [r3, #28]
 8005a88:	787b      	ldrb	r3, [r7, #1]
 8005a8a:	b219      	sxth	r1, r3
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	2300      	movs	r3, #0
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	47a0      	blx	r4
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8005a9c:	b25a      	sxtb	r2, r3
 8005a9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005aa2:	43db      	mvns	r3, r3
 8005aa4:	b25b      	sxtb	r3, r3
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	b25b      	sxtb	r3, r3
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8005ab8:	78bb      	ldrb	r3, [r7, #2]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8005ac4:	e02a      	b.n	8005b1c <ucg_com_SetLineStatus+0xda>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8005acc:	78bb      	ldrb	r3, [r7, #2]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d007      	beq.n	8005ae6 <ucg_com_SetLineStatus+0xa4>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8005adc:	78bb      	ldrb	r3, [r7, #2]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d11a      	bne.n	8005b1c <ucg_com_SetLineStatus+0xda>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69dc      	ldr	r4, [r3, #28]
 8005aea:	787b      	ldrb	r3, [r7, #1]
 8005aec:	b219      	sxth	r1, r3
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	2300      	movs	r3, #0
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	47a0      	blx	r4
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8005afe:	78bb      	ldrb	r3, [r7, #2]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8005b10:	78bb      	ldrb	r3, [r7, #2]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd90      	pop	{r4, r7, pc}

08005b24 <ucg_com_SetResetLineStatus>:
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	70fb      	strb	r3, [r7, #3]
 8005b30:	78f9      	ldrb	r1, [r7, #3]
 8005b32:	230d      	movs	r3, #13
 8005b34:	2204      	movs	r2, #4
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff ff83 	bl	8005a42 <ucg_com_SetLineStatus>
 8005b3c:	bf00      	nop
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <ucg_com_SetCSLineStatus>:
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
 8005b50:	78f9      	ldrb	r1, [r7, #3]
 8005b52:	230e      	movs	r3, #14
 8005b54:	2202      	movs	r2, #2
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff ff73 	bl	8005a42 <ucg_com_SetLineStatus>
 8005b5c:	bf00      	nop
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <ucg_com_SetCDLineStatus>:
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	70fb      	strb	r3, [r7, #3]
 8005b70:	78f9      	ldrb	r1, [r7, #3]
 8005b72:	230f      	movs	r3, #15
 8005b74:	2201      	movs	r2, #1
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff ff63 	bl	8005a42 <ucg_com_SetLineStatus>
 8005b7c:	bf00      	nop
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <ucg_com_DelayMicroseconds>:
 8005b84:	b590      	push	{r4, r7, lr}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	807b      	strh	r3, [r7, #2]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	69dc      	ldr	r4, [r3, #28]
 8005b94:	887a      	ldrh	r2, [r7, #2]
 8005b96:	2300      	movs	r3, #0
 8005b98:	210c      	movs	r1, #12
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	47a0      	blx	r4
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd90      	pop	{r4, r7, pc}

08005ba6 <ucg_com_DelayMilliseconds>:
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	807b      	strh	r3, [r7, #2]
 8005bb2:	e007      	b.n	8005bc4 <ucg_com_DelayMilliseconds+0x1e>
 8005bb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ffe3 	bl	8005b84 <ucg_com_DelayMicroseconds>
 8005bbe:	887b      	ldrh	r3, [r7, #2]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	807b      	strh	r3, [r7, #2]
 8005bc4:	887b      	ldrh	r3, [r7, #2]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1f4      	bne.n	8005bb4 <ucg_com_DelayMilliseconds+0xe>
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <ucg_com_SendByte>:
 8005bd2:	b590      	push	{r4, r7, lr}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	70fb      	strb	r3, [r7, #3]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69dc      	ldr	r4, [r3, #28]
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	2300      	movs	r3, #0
 8005be8:	2110      	movs	r1, #16
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	47a0      	blx	r4
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd90      	pop	{r4, r7, pc}

08005bf6 <ucg_com_SendStringP>:
 8005bf6:	b590      	push	{r4, r7, lr}
 8005bf8:	b087      	sub	sp, #28
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	817b      	strh	r3, [r7, #10]
 8005c04:	e010      	b.n	8005c28 <ucg_com_SendStringP+0x32>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	75fb      	strb	r3, [r7, #23]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	69dc      	ldr	r4, [r3, #28]
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	2300      	movs	r3, #0
 8005c16:	2110      	movs	r1, #16
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	47a0      	blx	r4
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	897b      	ldrh	r3, [r7, #10]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	817b      	strh	r3, [r7, #10]
 8005c28:	897b      	ldrh	r3, [r7, #10]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1eb      	bne.n	8005c06 <ucg_com_SendStringP+0x10>
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd90      	pop	{r4, r7, pc}

08005c36 <ucg_com_SendCmdArg>:
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	4611      	mov	r1, r2
 8005c42:	461a      	mov	r2, r3
 8005c44:	460b      	mov	r3, r1
 8005c46:	71fb      	strb	r3, [r7, #7]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	71bb      	strb	r3, [r7, #6]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005c52:	085b      	lsrs	r3, r3, #1
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f7ff ff80 	bl	8005b64 <ucg_com_SetCDLineStatus>
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f7ff ffc2 	bl	8005bf6 <ucg_com_SendStringP>
 8005c72:	79bb      	ldrb	r3, [r7, #6]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d014      	beq.n	8005ca2 <ucg_com_SendCmdArg+0x6c>
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f7ff ff68 	bl	8005b64 <ucg_com_SetCDLineStatus>
 8005c94:	79bb      	ldrb	r3, [r7, #6]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f7ff ffaa 	bl	8005bf6 <ucg_com_SendStringP>
 8005ca2:	bf00      	nop
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <ucg_com_SendCmdSeq>:
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	73fb      	strb	r3, [r7, #15]
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	091b      	lsrs	r3, r3, #4
 8005cc0:	73bb      	strb	r3, [r7, #14]
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	737b      	strb	r3, [r7, #13]
 8005cca:	7bbb      	ldrb	r3, [r7, #14]
 8005ccc:	2b0f      	cmp	r3, #15
 8005cce:	f200 8124 	bhi.w	8005f1a <ucg_com_SendCmdSeq+0x26e>
 8005cd2:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <ucg_com_SendCmdSeq+0x2c>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005f1b 	.word	0x08005f1b
 8005cdc:	08005d19 	.word	0x08005d19
 8005ce0:	08005d19 	.word	0x08005d19
 8005ce4:	08005d19 	.word	0x08005d19
 8005ce8:	08005f1b 	.word	0x08005f1b
 8005cec:	08005f1b 	.word	0x08005f1b
 8005cf0:	08005d39 	.word	0x08005d39
 8005cf4:	08005d6b 	.word	0x08005d6b
 8005cf8:	08005daf 	.word	0x08005daf
 8005cfc:	08005ddb 	.word	0x08005ddb
 8005d00:	08005e07 	.word	0x08005e07
 8005d04:	08005e67 	.word	0x08005e67
 8005d08:	08005f1b 	.word	0x08005f1b
 8005d0c:	08005f1b 	.word	0x08005f1b
 8005d10:	08005f1b 	.word	0x08005f1b
 8005d14:	08005ec7 	.word	0x08005ec7
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	1c59      	adds	r1, r3, #1
 8005d1c:	7b7b      	ldrb	r3, [r7, #13]
 8005d1e:	7bba      	ldrb	r2, [r7, #14]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff ff88 	bl	8005c36 <ucg_com_SendCmdArg>
 8005d26:	7bbb      	ldrb	r3, [r7, #14]
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	7b7b      	ldrb	r3, [r7, #13]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	461a      	mov	r2, r3
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	4413      	add	r3, r2
 8005d34:	603b      	str	r3, [r7, #0]
 8005d36:	e0ef      	b.n	8005f18 <ucg_com_SendCmdSeq+0x26c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff ff0c 	bl	8005b64 <ucg_com_SetCDLineStatus>
 8005d4c:	7b7b      	ldrb	r3, [r7, #13]
 8005d4e:	b299      	uxth	r1, r3
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	3301      	adds	r3, #1
 8005d54:	461a      	mov	r2, r3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff ff4d 	bl	8005bf6 <ucg_com_SendStringP>
 8005d5c:	7b7b      	ldrb	r3, [r7, #13]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	461a      	mov	r2, r3
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	4413      	add	r3, r2
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	e0d6      	b.n	8005f18 <ucg_com_SendCmdSeq+0x26c>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005d70:	085b      	lsrs	r3, r3, #1
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	bf0c      	ite	eq
 8005d7c:	2301      	moveq	r3, #1
 8005d7e:	2300      	movne	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	4619      	mov	r1, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff feed 	bl	8005b64 <ucg_com_SetCDLineStatus>
 8005d8a:	7b7b      	ldrb	r3, [r7, #13]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d007      	beq.n	8005da0 <ucg_com_SendCmdSeq+0xf4>
 8005d90:	7b7b      	ldrb	r3, [r7, #13]
 8005d92:	b299      	uxth	r1, r3
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	3301      	adds	r3, #1
 8005d98:	461a      	mov	r2, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7ff ff2b 	bl	8005bf6 <ucg_com_SendStringP>
 8005da0:	7b7b      	ldrb	r3, [r7, #13]
 8005da2:	3301      	adds	r3, #1
 8005da4:	461a      	mov	r2, r3
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	4413      	add	r3, r2
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	e0b4      	b.n	8005f18 <ucg_com_SendCmdSeq+0x26c>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	3301      	adds	r3, #1
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	73fb      	strb	r3, [r7, #15]
 8005dba:	7b7b      	ldrb	r3, [r7, #13]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff feea 	bl	8005ba6 <ucg_com_DelayMilliseconds>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	e09e      	b.n	8005f18 <ucg_com_SendCmdSeq+0x26c>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	73fb      	strb	r3, [r7, #15]
 8005de6:	7b7b      	ldrb	r3, [r7, #13]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	4413      	add	r3, r2
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff fec3 	bl	8005b84 <ucg_com_DelayMicroseconds>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	3301      	adds	r3, #1
 8005e02:	603b      	str	r3, [r7, #0]
 8005e04:	e088      	b.n	8005f18 <ucg_com_SendCmdSeq+0x26c>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	73fb      	strb	r3, [r7, #15]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	3301      	adds	r3, #1
 8005e16:	603b      	str	r3, [r7, #0]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	733b      	strb	r3, [r7, #12]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	3301      	adds	r3, #1
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff fe96 	bl	8005b64 <ucg_com_SetCDLineStatus>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005e3e:	461a      	mov	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005e46:	441a      	add	r2, r3
 8005e48:	7b7b      	ldrb	r3, [r7, #13]
 8005e4a:	fa42 f303 	asr.w	r3, r2, r3
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	4013      	ands	r3, r2
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	7b3b      	ldrb	r3, [r7, #12]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff feb7 	bl	8005bd2 <ucg_com_SendByte>
 8005e64:	e058      	b.n	8005f18 <ucg_com_SendCmdSeq+0x26c>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	73fb      	strb	r3, [r7, #15]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	733b      	strb	r3, [r7, #12]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	3301      	adds	r3, #1
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	4619      	mov	r1, r3
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff fe66 	bl	8005b64 <ucg_com_SetCDLineStatus>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8005ea6:	441a      	add	r2, r3
 8005ea8:	7b7b      	ldrb	r3, [r7, #13]
 8005eaa:	fa42 f303 	asr.w	r3, r2, r3
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	7b3b      	ldrb	r3, [r7, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff fe87 	bl	8005bd2 <ucg_com_SendByte>
 8005ec4:	e028      	b.n	8005f18 <ucg_com_SendCmdSeq+0x26c>
 8005ec6:	7b7b      	ldrb	r3, [r7, #13]
 8005ec8:	089b      	lsrs	r3, r3, #2
 8005eca:	73bb      	strb	r3, [r7, #14]
 8005ecc:	7b7b      	ldrb	r3, [r7, #13]
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	737b      	strb	r3, [r7, #13]
 8005ed4:	7bbb      	ldrb	r3, [r7, #14]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d00c      	beq.n	8005ef4 <ucg_com_SendCmdSeq+0x248>
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d013      	beq.n	8005f06 <ucg_com_SendCmdSeq+0x25a>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d116      	bne.n	8005f10 <ucg_com_SendCmdSeq+0x264>
 8005ee2:	7b7b      	ldrb	r3, [r7, #13]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff fe19 	bl	8005b24 <ucg_com_SetResetLineStatus>
 8005ef2:	e00d      	b.n	8005f10 <ucg_com_SendCmdSeq+0x264>
 8005ef4:	7b7b      	ldrb	r3, [r7, #13]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	4619      	mov	r1, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff fe20 	bl	8005b44 <ucg_com_SetCSLineStatus>
 8005f04:	e004      	b.n	8005f10 <ucg_com_SendCmdSeq+0x264>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	7b7a      	ldrb	r2, [r7, #13]
 8005f0a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8005f0e:	bf00      	nop
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	bf00      	nop
 8005f18:	e6cd      	b.n	8005cb6 <ucg_com_SendCmdSeq+0xa>
 8005f1a:	bf00      	nop
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop

08005f24 <__libc_init_array>:
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	4d0d      	ldr	r5, [pc, #52]	; (8005f5c <__libc_init_array+0x38>)
 8005f28:	4c0d      	ldr	r4, [pc, #52]	; (8005f60 <__libc_init_array+0x3c>)
 8005f2a:	1b64      	subs	r4, r4, r5
 8005f2c:	10a4      	asrs	r4, r4, #2
 8005f2e:	2600      	movs	r6, #0
 8005f30:	42a6      	cmp	r6, r4
 8005f32:	d109      	bne.n	8005f48 <__libc_init_array+0x24>
 8005f34:	4d0b      	ldr	r5, [pc, #44]	; (8005f64 <__libc_init_array+0x40>)
 8005f36:	4c0c      	ldr	r4, [pc, #48]	; (8005f68 <__libc_init_array+0x44>)
 8005f38:	f000 f846 	bl	8005fc8 <_init>
 8005f3c:	1b64      	subs	r4, r4, r5
 8005f3e:	10a4      	asrs	r4, r4, #2
 8005f40:	2600      	movs	r6, #0
 8005f42:	42a6      	cmp	r6, r4
 8005f44:	d105      	bne.n	8005f52 <__libc_init_array+0x2e>
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f4c:	4798      	blx	r3
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7ee      	b.n	8005f30 <__libc_init_array+0xc>
 8005f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f56:	4798      	blx	r3
 8005f58:	3601      	adds	r6, #1
 8005f5a:	e7f2      	b.n	8005f42 <__libc_init_array+0x1e>
 8005f5c:	08007bb8 	.word	0x08007bb8
 8005f60:	08007bb8 	.word	0x08007bb8
 8005f64:	08007bb8 	.word	0x08007bb8
 8005f68:	08007bbc 	.word	0x08007bbc

08005f6c <memcpy>:
 8005f6c:	440a      	add	r2, r1
 8005f6e:	4291      	cmp	r1, r2
 8005f70:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f74:	d100      	bne.n	8005f78 <memcpy+0xc>
 8005f76:	4770      	bx	lr
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f82:	4291      	cmp	r1, r2
 8005f84:	d1f9      	bne.n	8005f7a <memcpy+0xe>
 8005f86:	bd10      	pop	{r4, pc}

08005f88 <memset>:
 8005f88:	4402      	add	r2, r0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d100      	bne.n	8005f92 <memset+0xa>
 8005f90:	4770      	bx	lr
 8005f92:	f803 1b01 	strb.w	r1, [r3], #1
 8005f96:	e7f9      	b.n	8005f8c <memset+0x4>

08005f98 <strcat>:
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	7814      	ldrb	r4, [r2, #0]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	3201      	adds	r2, #1
 8005fa2:	2c00      	cmp	r4, #0
 8005fa4:	d1fa      	bne.n	8005f9c <strcat+0x4>
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fac:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fb0:	2a00      	cmp	r2, #0
 8005fb2:	d1f9      	bne.n	8005fa8 <strcat+0x10>
 8005fb4:	bd10      	pop	{r4, pc}

08005fb6 <strcpy>:
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fbc:	f803 2b01 	strb.w	r2, [r3], #1
 8005fc0:	2a00      	cmp	r2, #0
 8005fc2:	d1f9      	bne.n	8005fb8 <strcpy+0x2>
 8005fc4:	4770      	bx	lr
	...

08005fc8 <_init>:
 8005fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fca:	bf00      	nop
 8005fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fce:	bc08      	pop	{r3}
 8005fd0:	469e      	mov	lr, r3
 8005fd2:	4770      	bx	lr

08005fd4 <_fini>:
 8005fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd6:	bf00      	nop
 8005fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fda:	bc08      	pop	{r3}
 8005fdc:	469e      	mov	lr, r3
 8005fde:	4770      	bx	lr
