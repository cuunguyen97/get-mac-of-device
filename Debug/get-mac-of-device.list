
get-mac-of-device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a50  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08004be4  08004be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef4  08004ef4  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08004ef4  08004ef4  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ef4  08004ef4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ef8  08004ef8  00014ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000024  08004f20  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08004f20  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032f86  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002911  00000000  00000000  00052fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  000558f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  00056428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f0b5  00000000  00000000  00056dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009abd  00000000  00000000  00065e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004988b  00000000  00000000  0006f94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  000b91d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c80  00000000  00000000  000b92a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004bcc 	.word	0x08004bcc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	08004bcc 	.word	0x08004bcc

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <max>:
#error Unsupported LOCK_VERSION (add it...)

#endif


static int max(int a, int b) {
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
    if (a > b) { return a; }
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	dd01      	ble.n	80001fa <max+0x16>
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	e000      	b.n	80001fc <max+0x18>
    return b;
 80001fa:	683b      	ldr	r3, [r7, #0]
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr

08000208 <getAlphanumeric>:
*/


//#pragma mark - Mode testing and conversion

static int8_t getAlphanumeric(char c) {
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
    
    if (c >= '0' && c <= '9') { return (c - '0'); }
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	2b2f      	cmp	r3, #47	; 0x2f
 8000216:	d907      	bls.n	8000228 <getAlphanumeric+0x20>
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	2b39      	cmp	r3, #57	; 0x39
 800021c:	d804      	bhi.n	8000228 <getAlphanumeric+0x20>
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	3b30      	subs	r3, #48	; 0x30
 8000222:	b2db      	uxtb	r3, r3
 8000224:	b25b      	sxtb	r3, r3
 8000226:	e05b      	b.n	80002e0 <getAlphanumeric+0xd8>
    if (c >= 'A' && c <= 'Z') { return (c - 'A' + 10); }
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	2b40      	cmp	r3, #64	; 0x40
 800022c:	d907      	bls.n	800023e <getAlphanumeric+0x36>
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	2b5a      	cmp	r3, #90	; 0x5a
 8000232:	d804      	bhi.n	800023e <getAlphanumeric+0x36>
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	3b37      	subs	r3, #55	; 0x37
 8000238:	b2db      	uxtb	r3, r3
 800023a:	b25b      	sxtb	r3, r3
 800023c:	e050      	b.n	80002e0 <getAlphanumeric+0xd8>
    
    switch (c) {
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	3b20      	subs	r3, #32
 8000242:	2b1a      	cmp	r3, #26
 8000244:	d84a      	bhi.n	80002dc <getAlphanumeric+0xd4>
 8000246:	a201      	add	r2, pc, #4	; (adr r2, 800024c <getAlphanumeric+0x44>)
 8000248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024c:	080002b9 	.word	0x080002b9
 8000250:	080002dd 	.word	0x080002dd
 8000254:	080002dd 	.word	0x080002dd
 8000258:	080002dd 	.word	0x080002dd
 800025c:	080002bd 	.word	0x080002bd
 8000260:	080002c1 	.word	0x080002c1
 8000264:	080002dd 	.word	0x080002dd
 8000268:	080002dd 	.word	0x080002dd
 800026c:	080002dd 	.word	0x080002dd
 8000270:	080002dd 	.word	0x080002dd
 8000274:	080002c5 	.word	0x080002c5
 8000278:	080002c9 	.word	0x080002c9
 800027c:	080002dd 	.word	0x080002dd
 8000280:	080002cd 	.word	0x080002cd
 8000284:	080002d1 	.word	0x080002d1
 8000288:	080002d5 	.word	0x080002d5
 800028c:	080002dd 	.word	0x080002dd
 8000290:	080002dd 	.word	0x080002dd
 8000294:	080002dd 	.word	0x080002dd
 8000298:	080002dd 	.word	0x080002dd
 800029c:	080002dd 	.word	0x080002dd
 80002a0:	080002dd 	.word	0x080002dd
 80002a4:	080002dd 	.word	0x080002dd
 80002a8:	080002dd 	.word	0x080002dd
 80002ac:	080002dd 	.word	0x080002dd
 80002b0:	080002dd 	.word	0x080002dd
 80002b4:	080002d9 	.word	0x080002d9
        case ' ': return 36;
 80002b8:	2324      	movs	r3, #36	; 0x24
 80002ba:	e011      	b.n	80002e0 <getAlphanumeric+0xd8>
        case '$': return 37;
 80002bc:	2325      	movs	r3, #37	; 0x25
 80002be:	e00f      	b.n	80002e0 <getAlphanumeric+0xd8>
        case '%': return 38;
 80002c0:	2326      	movs	r3, #38	; 0x26
 80002c2:	e00d      	b.n	80002e0 <getAlphanumeric+0xd8>
        case '*': return 39;
 80002c4:	2327      	movs	r3, #39	; 0x27
 80002c6:	e00b      	b.n	80002e0 <getAlphanumeric+0xd8>
        case '+': return 40;
 80002c8:	2328      	movs	r3, #40	; 0x28
 80002ca:	e009      	b.n	80002e0 <getAlphanumeric+0xd8>
        case '-': return 41;
 80002cc:	2329      	movs	r3, #41	; 0x29
 80002ce:	e007      	b.n	80002e0 <getAlphanumeric+0xd8>
        case '.': return 42;
 80002d0:	232a      	movs	r3, #42	; 0x2a
 80002d2:	e005      	b.n	80002e0 <getAlphanumeric+0xd8>
        case '/': return 43;
 80002d4:	232b      	movs	r3, #43	; 0x2b
 80002d6:	e003      	b.n	80002e0 <getAlphanumeric+0xd8>
        case ':': return 44;
 80002d8:	232c      	movs	r3, #44	; 0x2c
 80002da:	e001      	b.n	80002e0 <getAlphanumeric+0xd8>
    }
    
    return -1;
 80002dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr

080002ec <isAlphanumeric>:

static bool isAlphanumeric(const char *text, uint16_t length) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	460b      	mov	r3, r1
 80002f6:	807b      	strh	r3, [r7, #2]
    while (length != 0) {
 80002f8:	e00f      	b.n	800031a <isAlphanumeric+0x2e>
        if (getAlphanumeric(text[--length]) == -1) { return false; }
 80002fa:	887b      	ldrh	r3, [r7, #2]
 80002fc:	3b01      	subs	r3, #1
 80002fe:	807b      	strh	r3, [r7, #2]
 8000300:	887b      	ldrh	r3, [r7, #2]
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	4413      	add	r3, r2
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ff7d 	bl	8000208 <getAlphanumeric>
 800030e:	4603      	mov	r3, r0
 8000310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000314:	d101      	bne.n	800031a <isAlphanumeric+0x2e>
 8000316:	2300      	movs	r3, #0
 8000318:	e003      	b.n	8000322 <isAlphanumeric+0x36>
    while (length != 0) {
 800031a:	887b      	ldrh	r3, [r7, #2]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d1ec      	bne.n	80002fa <isAlphanumeric+0xe>
    }
    return true;
 8000320:	2301      	movs	r3, #1
}
 8000322:	4618      	mov	r0, r3
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <isNumeric>:


static bool isNumeric(const char *text, uint16_t length) {
 800032a:	b480      	push	{r7}
 800032c:	b085      	sub	sp, #20
 800032e:	af00      	add	r7, sp, #0
 8000330:	6078      	str	r0, [r7, #4]
 8000332:	460b      	mov	r3, r1
 8000334:	807b      	strh	r3, [r7, #2]
    while (length != 0) {
 8000336:	e00f      	b.n	8000358 <isNumeric+0x2e>
        char c = text[--length];
 8000338:	887b      	ldrh	r3, [r7, #2]
 800033a:	3b01      	subs	r3, #1
 800033c:	807b      	strh	r3, [r7, #2]
 800033e:	887b      	ldrh	r3, [r7, #2]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	4413      	add	r3, r2
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	73fb      	strb	r3, [r7, #15]
        if (c < '0' || c > '9') { return false; }
 8000348:	7bfb      	ldrb	r3, [r7, #15]
 800034a:	2b2f      	cmp	r3, #47	; 0x2f
 800034c:	d902      	bls.n	8000354 <isNumeric+0x2a>
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	2b39      	cmp	r3, #57	; 0x39
 8000352:	d901      	bls.n	8000358 <isNumeric+0x2e>
 8000354:	2300      	movs	r3, #0
 8000356:	e003      	b.n	8000360 <isNumeric+0x36>
    while (length != 0) {
 8000358:	887b      	ldrh	r3, [r7, #2]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1ec      	bne.n	8000338 <isNumeric+0xe>
    }
    return true;
 800035e:	2301      	movs	r3, #1
}
 8000360:	4618      	mov	r0, r3
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <getModeBits>:
// We store the following tightly packed (less 8) in modeInfo
//               <=9  <=26  <= 40
// NUMERIC      ( 10,   12,    14);
// ALPHANUMERIC (  9,   11,    13);
// BYTE         (  8,   16,    16);
static char getModeBits(uint8_t version, uint8_t mode) {
 800036c:	b480      	push	{r7}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	460a      	mov	r2, r1
 8000376:	71fb      	strb	r3, [r7, #7]
 8000378:	4613      	mov	r3, r2
 800037a:	71bb      	strb	r3, [r7, #6]
    // Note: We use 15 instead of 16; since 15 doesn't exist and we cannot store 16 (8 + 8) in 3 bits
    // hex(int("".join(reversed([('00' + bin(x - 8)[2:])[-3:] for x in [10, 9, 8, 12, 11, 15, 14, 13, 15]])), 2))
    unsigned int modeInfo = 0x7bbb80a;
 800037c:	4b13      	ldr	r3, [pc, #76]	; (80003cc <getModeBits+0x60>)
 800037e:	60fb      	str	r3, [r7, #12]
    
#if LOCK_VERSION == 0 || LOCK_VERSION > 9
    if (version > 9) { modeInfo >>= 9; }
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	2b09      	cmp	r3, #9
 8000384:	d902      	bls.n	800038c <getModeBits+0x20>
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	0a5b      	lsrs	r3, r3, #9
 800038a:	60fb      	str	r3, [r7, #12]
#endif
    
#if LOCK_VERSION == 0 || LOCK_VERSION > 26
    if (version > 26) { modeInfo >>= 9; }
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	2b1a      	cmp	r3, #26
 8000390:	d902      	bls.n	8000398 <getModeBits+0x2c>
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	0a5b      	lsrs	r3, r3, #9
 8000396:	60fb      	str	r3, [r7, #12]
#endif
    
    char result = 8 + ((modeInfo >> (3 * mode)) & 0x07);
 8000398:	79ba      	ldrb	r2, [r7, #6]
 800039a:	4613      	mov	r3, r2
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	4413      	add	r3, r2
 80003a0:	68fa      	ldr	r2, [r7, #12]
 80003a2:	fa22 f303 	lsr.w	r3, r2, r3
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	f003 0307 	and.w	r3, r3, #7
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	3308      	adds	r3, #8
 80003b0:	72fb      	strb	r3, [r7, #11]
    if (result == 15) { result = 16; }
 80003b2:	7afb      	ldrb	r3, [r7, #11]
 80003b4:	2b0f      	cmp	r3, #15
 80003b6:	d101      	bne.n	80003bc <getModeBits+0x50>
 80003b8:	2310      	movs	r3, #16
 80003ba:	72fb      	strb	r3, [r7, #11]
    
    return result;
 80003bc:	7afb      	ldrb	r3, [r7, #11]
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	07bbb80a 	.word	0x07bbb80a

080003d0 <bb_getGridSizeBytes>:
    }
    printf("\n");
}
*/

static uint16_t bb_getGridSizeBytes(uint8_t size) {
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
    return (((size * size) + 7) / 8);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	79fa      	ldrb	r2, [r7, #7]
 80003de:	fb02 f303 	mul.w	r3, r2, r3
 80003e2:	3307      	adds	r3, #7
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	da00      	bge.n	80003ea <bb_getGridSizeBytes+0x1a>
 80003e8:	3307      	adds	r3, #7
 80003ea:	10db      	asrs	r3, r3, #3
 80003ec:	b29b      	uxth	r3, r3
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr

080003fa <bb_getBufferSizeBytes>:

static uint16_t bb_getBufferSizeBytes(uint32_t bits) {
 80003fa:	b480      	push	{r7}
 80003fc:	b083      	sub	sp, #12
 80003fe:	af00      	add	r7, sp, #0
 8000400:	6078      	str	r0, [r7, #4]
    return ((bits + 7) / 8);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	3307      	adds	r3, #7
 8000406:	08db      	lsrs	r3, r3, #3
 8000408:	b29b      	uxth	r3, r3
}
 800040a:	4618      	mov	r0, r3
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <bb_initBuffer>:

static void bb_initBuffer(BitBucket *bitBuffer, uint8_t *data, int32_t capacityBytes) {
 8000416:	b580      	push	{r7, lr}
 8000418:	b084      	sub	sp, #16
 800041a:	af00      	add	r7, sp, #0
 800041c:	60f8      	str	r0, [r7, #12]
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	607a      	str	r2, [r7, #4]
    bitBuffer->bitOffsetOrWidth = 0;
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
    bitBuffer->capacityBytes = capacityBytes;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	b29a      	uxth	r2, r3
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	809a      	strh	r2, [r3, #4]
    bitBuffer->data = data;
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	68ba      	ldr	r2, [r7, #8]
 8000434:	609a      	str	r2, [r3, #8]
    
    memset(data, 0, bitBuffer->capacityBytes);
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	889b      	ldrh	r3, [r3, #4]
 800043a:	461a      	mov	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	68b8      	ldr	r0, [r7, #8]
 8000440:	f004 fbbc 	bl	8004bbc <memset>
}
 8000444:	bf00      	nop
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <bb_initGrid>:

static void bb_initGrid(BitBucket *bitGrid, uint8_t *data, uint8_t size) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	4613      	mov	r3, r2
 8000458:	71fb      	strb	r3, [r7, #7]
    bitGrid->bitOffsetOrWidth = size;
 800045a:	79fa      	ldrb	r2, [r7, #7]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	601a      	str	r2, [r3, #0]
    bitGrid->capacityBytes = bb_getGridSizeBytes(size);
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ffb4 	bl	80003d0 <bb_getGridSizeBytes>
 8000468:	4603      	mov	r3, r0
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	809a      	strh	r2, [r3, #4]
    bitGrid->data = data;
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	68ba      	ldr	r2, [r7, #8]
 8000474:	609a      	str	r2, [r3, #8]

    memset(data, 0, bitGrid->capacityBytes);
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	889b      	ldrh	r3, [r3, #4]
 800047a:	461a      	mov	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	68b8      	ldr	r0, [r7, #8]
 8000480:	f004 fb9c 	bl	8004bbc <memset>
}
 8000484:	bf00      	nop
 8000486:	3710      	adds	r7, #16
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <bb_appendBits>:

static void bb_appendBits(BitBucket *bitBuffer, uint32_t val, uint8_t length) {
 800048c:	b480      	push	{r7}
 800048e:	b087      	sub	sp, #28
 8000490:	af00      	add	r7, sp, #0
 8000492:	60f8      	str	r0, [r7, #12]
 8000494:	60b9      	str	r1, [r7, #8]
 8000496:	4613      	mov	r3, r2
 8000498:	71fb      	strb	r3, [r7, #7]
    uint32_t offset = bitBuffer->bitOffsetOrWidth;
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	617b      	str	r3, [r7, #20]
    for (int8_t i = length - 1; i >= 0; i--, offset++) {
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	74fb      	strb	r3, [r7, #19]
 80004a8:	e024      	b.n	80004f4 <bb_appendBits+0x68>
        bitBuffer->data[offset >> 3] |= ((val >> i) & 1) << (7 - (offset & 7));
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	689a      	ldr	r2, [r3, #8]
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	08db      	lsrs	r3, r3, #3
 80004b2:	4413      	add	r3, r2
 80004b4:	7819      	ldrb	r1, [r3, #0]
 80004b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80004ba:	68ba      	ldr	r2, [r7, #8]
 80004bc:	fa22 f303 	lsr.w	r3, r2, r3
 80004c0:	f003 0201 	and.w	r2, r3, #1
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	43db      	mvns	r3, r3
 80004c8:	f003 0307 	and.w	r3, r3, #7
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	6898      	ldr	r0, [r3, #8]
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	08db      	lsrs	r3, r3, #3
 80004da:	4403      	add	r3, r0
 80004dc:	430a      	orrs	r2, r1
 80004de:	b2d2      	uxtb	r2, r2
 80004e0:	701a      	strb	r2, [r3, #0]
    for (int8_t i = length - 1; i >= 0; i--, offset++) {
 80004e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	3b01      	subs	r3, #1
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	74fb      	strb	r3, [r7, #19]
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	3301      	adds	r3, #1
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	dad6      	bge.n	80004aa <bb_appendBits+0x1e>
    }
    bitBuffer->bitOffsetOrWidth = offset;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	697a      	ldr	r2, [r7, #20]
 8000500:	601a      	str	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	371c      	adds	r7, #28
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <bb_setBit>:
    for (int8_t i = length - 1; i >= 0; i--, offset++) {
        bitBuffer->data[offset >> 3] |= ((val >> i) & 1) << (7 - (offset & 7));
    }
}
*/
static void bb_setBit(BitBucket *bitGrid, uint8_t x, uint8_t y, bool on) {
 800050e:	b480      	push	{r7}
 8000510:	b085      	sub	sp, #20
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	4608      	mov	r0, r1
 8000518:	4611      	mov	r1, r2
 800051a:	461a      	mov	r2, r3
 800051c:	4603      	mov	r3, r0
 800051e:	70fb      	strb	r3, [r7, #3]
 8000520:	460b      	mov	r3, r1
 8000522:	70bb      	strb	r3, [r7, #2]
 8000524:	4613      	mov	r3, r2
 8000526:	707b      	strb	r3, [r7, #1]
    uint32_t offset = y * bitGrid->bitOffsetOrWidth + x;
 8000528:	78bb      	ldrb	r3, [r7, #2]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	6812      	ldr	r2, [r2, #0]
 800052e:	fb03 f202 	mul.w	r2, r3, r2
 8000532:	78fb      	ldrb	r3, [r7, #3]
 8000534:	4413      	add	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
    uint8_t mask = 1 << (7 - (offset & 0x07));
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	43db      	mvns	r3, r3
 800053c:	f003 0307 	and.w	r3, r3, #7
 8000540:	2201      	movs	r2, #1
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	72fb      	strb	r3, [r7, #11]
    if (on) {
 8000548:	787b      	ldrb	r3, [r7, #1]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d00f      	beq.n	800056e <bb_setBit+0x60>
        bitGrid->data[offset >> 3] |= mask;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	689a      	ldr	r2, [r3, #8]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	08db      	lsrs	r3, r3, #3
 8000556:	4413      	add	r3, r2
 8000558:	7819      	ldrb	r1, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	689a      	ldr	r2, [r3, #8]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	08db      	lsrs	r3, r3, #3
 8000562:	4413      	add	r3, r2
 8000564:	7afa      	ldrb	r2, [r7, #11]
 8000566:	430a      	orrs	r2, r1
 8000568:	b2d2      	uxtb	r2, r2
 800056a:	701a      	strb	r2, [r3, #0]
    } else {
        bitGrid->data[offset >> 3] &= ~mask;
    }
}
 800056c:	e013      	b.n	8000596 <bb_setBit+0x88>
        bitGrid->data[offset >> 3] &= ~mask;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	689a      	ldr	r2, [r3, #8]
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	08db      	lsrs	r3, r3, #3
 8000576:	4413      	add	r3, r2
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b25a      	sxtb	r2, r3
 800057c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000580:	43db      	mvns	r3, r3
 8000582:	b25b      	sxtb	r3, r3
 8000584:	4013      	ands	r3, r2
 8000586:	b259      	sxtb	r1, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	689a      	ldr	r2, [r3, #8]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	4413      	add	r3, r2
 8000592:	b2ca      	uxtb	r2, r1
 8000594:	701a      	strb	r2, [r3, #0]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <bb_invertBit>:

static void bb_invertBit(BitBucket *bitGrid, uint8_t x, uint8_t y, bool invert) {
 80005a2:	b480      	push	{r7}
 80005a4:	b085      	sub	sp, #20
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	4608      	mov	r0, r1
 80005ac:	4611      	mov	r1, r2
 80005ae:	461a      	mov	r2, r3
 80005b0:	4603      	mov	r3, r0
 80005b2:	70fb      	strb	r3, [r7, #3]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70bb      	strb	r3, [r7, #2]
 80005b8:	4613      	mov	r3, r2
 80005ba:	707b      	strb	r3, [r7, #1]
    uint32_t offset = y * bitGrid->bitOffsetOrWidth + x;
 80005bc:	78bb      	ldrb	r3, [r7, #2]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	6812      	ldr	r2, [r2, #0]
 80005c2:	fb03 f202 	mul.w	r2, r3, r2
 80005c6:	78fb      	ldrb	r3, [r7, #3]
 80005c8:	4413      	add	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
    uint8_t mask = 1 << (7 - (offset & 0x07));
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	43db      	mvns	r3, r3
 80005d0:	f003 0307 	and.w	r3, r3, #7
 80005d4:	2201      	movs	r2, #1
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	72fb      	strb	r3, [r7, #11]
    bool on = ((bitGrid->data[offset >> 3] & (1 << (7 - (offset & 0x07)))) != 0);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	08db      	lsrs	r3, r3, #3
 80005e4:	4413      	add	r3, r2
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	43db      	mvns	r3, r3
 80005ee:	f003 0307 	and.w	r3, r3, #7
 80005f2:	fa42 f303 	asr.w	r3, r2, r3
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	bf14      	ite	ne
 80005fe:	2301      	movne	r3, #1
 8000600:	2300      	moveq	r3, #0
 8000602:	b2db      	uxtb	r3, r3
 8000604:	72bb      	strb	r3, [r7, #10]
    if (on ^ invert) {
 8000606:	7aba      	ldrb	r2, [r7, #10]
 8000608:	787b      	ldrb	r3, [r7, #1]
 800060a:	429a      	cmp	r2, r3
 800060c:	d00f      	beq.n	800062e <bb_invertBit+0x8c>
        bitGrid->data[offset >> 3] |= mask;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	689a      	ldr	r2, [r3, #8]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	08db      	lsrs	r3, r3, #3
 8000616:	4413      	add	r3, r2
 8000618:	7819      	ldrb	r1, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	689a      	ldr	r2, [r3, #8]
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	08db      	lsrs	r3, r3, #3
 8000622:	4413      	add	r3, r2
 8000624:	7afa      	ldrb	r2, [r7, #11]
 8000626:	430a      	orrs	r2, r1
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	701a      	strb	r2, [r3, #0]
    } else {
        bitGrid->data[offset >> 3] &= ~mask;
    }
}
 800062c:	e013      	b.n	8000656 <bb_invertBit+0xb4>
        bitGrid->data[offset >> 3] &= ~mask;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	689a      	ldr	r2, [r3, #8]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	08db      	lsrs	r3, r3, #3
 8000636:	4413      	add	r3, r2
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b25a      	sxtb	r2, r3
 800063c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000640:	43db      	mvns	r3, r3
 8000642:	b25b      	sxtb	r3, r3
 8000644:	4013      	ands	r3, r2
 8000646:	b259      	sxtb	r1, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	689a      	ldr	r2, [r3, #8]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	08db      	lsrs	r3, r3, #3
 8000650:	4413      	add	r3, r2
 8000652:	b2ca      	uxtb	r2, r1
 8000654:	701a      	strb	r2, [r3, #0]
}
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <bb_getBit>:

static bool bb_getBit(BitBucket *bitGrid, uint8_t x, uint8_t y) {
 8000662:	b480      	push	{r7}
 8000664:	b085      	sub	sp, #20
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	460b      	mov	r3, r1
 800066c:	70fb      	strb	r3, [r7, #3]
 800066e:	4613      	mov	r3, r2
 8000670:	70bb      	strb	r3, [r7, #2]
    uint32_t offset = y * bitGrid->bitOffsetOrWidth + x;
 8000672:	78bb      	ldrb	r3, [r7, #2]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	6812      	ldr	r2, [r2, #0]
 8000678:	fb03 f202 	mul.w	r2, r3, r2
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	4413      	add	r3, r2
 8000680:	60fb      	str	r3, [r7, #12]
    return (bitGrid->data[offset >> 3] & (1 << (7 - (offset & 0x07)))) != 0;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	689a      	ldr	r2, [r3, #8]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	08db      	lsrs	r3, r3, #3
 800068a:	4413      	add	r3, r2
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	461a      	mov	r2, r3
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	43db      	mvns	r3, r3
 8000694:	f003 0307 	and.w	r3, r3, #7
 8000698:	fa42 f303 	asr.w	r3, r2, r3
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	bf14      	ite	ne
 80006a4:	2301      	movne	r3, #1
 80006a6:	2300      	moveq	r3, #0
 80006a8:	b2db      	uxtb	r3, r3
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <applyMask>:

// XORs the data modules in this QR Code with the given mask pattern. Due to XOR's mathematical
// properties, calling applyMask(m) twice with the same value is equivalent to no change at all.
// This means it is possible to apply a mask, undo it, and try another mask. Note that a final
// well-formed QR Code symbol needs exactly one mask applied (not zero, not two, etc.).
static void applyMask(BitBucket *modules, BitBucket *isFunction, uint8_t mask) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	4613      	mov	r3, r2
 80006c4:	71fb      	strb	r3, [r7, #7]
    uint8_t size = modules->bitOffsetOrWidth;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	753b      	strb	r3, [r7, #20]
    
    for (uint8_t y = 0; y < size; y++) {
 80006cc:	2300      	movs	r3, #0
 80006ce:	75fb      	strb	r3, [r7, #23]
 80006d0:	e0de      	b.n	8000890 <applyMask+0x1d8>
        for (uint8_t x = 0; x < size; x++) {
 80006d2:	2300      	movs	r3, #0
 80006d4:	75bb      	strb	r3, [r7, #22]
 80006d6:	e0d3      	b.n	8000880 <applyMask+0x1c8>
            if (bb_getBit(isFunction, x, y)) { continue; }
 80006d8:	7dfa      	ldrb	r2, [r7, #23]
 80006da:	7dbb      	ldrb	r3, [r7, #22]
 80006dc:	4619      	mov	r1, r3
 80006de:	68b8      	ldr	r0, [r7, #8]
 80006e0:	f7ff ffbf 	bl	8000662 <bb_getBit>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	f040 80c6 	bne.w	8000878 <applyMask+0x1c0>
            
            bool invert = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	757b      	strb	r3, [r7, #21]
            switch (mask) {
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	f200 80b9 	bhi.w	800086a <applyMask+0x1b2>
 80006f8:	a201      	add	r2, pc, #4	; (adr r2, 8000700 <applyMask+0x48>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	08000721 	.word	0x08000721
 8000704:	0800073b 	.word	0x0800073b
 8000708:	08000751 	.word	0x08000751
 800070c:	08000773 	.word	0x08000773
 8000710:	08000799 	.word	0x08000799
 8000714:	080007c1 	.word	0x080007c1
 8000718:	080007f7 	.word	0x080007f7
 800071c:	08000831 	.word	0x08000831
                case 0:  invert = (x + y) % 2 == 0;                    break;
 8000720:	7dba      	ldrb	r2, [r7, #22]
 8000722:	7dfb      	ldrb	r3, [r7, #23]
 8000724:	4413      	add	r3, r2
 8000726:	b2db      	uxtb	r3, r3
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	2b00      	cmp	r3, #0
 800072e:	bf0c      	ite	eq
 8000730:	2301      	moveq	r3, #1
 8000732:	2300      	movne	r3, #0
 8000734:	b2db      	uxtb	r3, r3
 8000736:	757b      	strb	r3, [r7, #21]
 8000738:	e097      	b.n	800086a <applyMask+0x1b2>
                case 1:  invert = y % 2 == 0;                          break;
 800073a:	7dfb      	ldrb	r3, [r7, #23]
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	bf0c      	ite	eq
 8000746:	2301      	moveq	r3, #1
 8000748:	2300      	movne	r3, #0
 800074a:	b2db      	uxtb	r3, r3
 800074c:	757b      	strb	r3, [r7, #21]
 800074e:	e08c      	b.n	800086a <applyMask+0x1b2>
                case 2:  invert = x % 3 == 0;                          break;
 8000750:	7dba      	ldrb	r2, [r7, #22]
 8000752:	4b54      	ldr	r3, [pc, #336]	; (80008a4 <applyMask+0x1ec>)
 8000754:	fba3 1302 	umull	r1, r3, r3, r2
 8000758:	0859      	lsrs	r1, r3, #1
 800075a:	460b      	mov	r3, r1
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	440b      	add	r3, r1
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	bf0c      	ite	eq
 8000768:	2301      	moveq	r3, #1
 800076a:	2300      	movne	r3, #0
 800076c:	b2db      	uxtb	r3, r3
 800076e:	757b      	strb	r3, [r7, #21]
 8000770:	e07b      	b.n	800086a <applyMask+0x1b2>
                case 3:  invert = (x + y) % 3 == 0;                    break;
 8000772:	7dba      	ldrb	r2, [r7, #22]
 8000774:	7dfb      	ldrb	r3, [r7, #23]
 8000776:	18d1      	adds	r1, r2, r3
 8000778:	4b4b      	ldr	r3, [pc, #300]	; (80008a8 <applyMask+0x1f0>)
 800077a:	fb83 3201 	smull	r3, r2, r3, r1
 800077e:	17cb      	asrs	r3, r1, #31
 8000780:	1ad2      	subs	r2, r2, r3
 8000782:	4613      	mov	r3, r2
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	4413      	add	r3, r2
 8000788:	1aca      	subs	r2, r1, r3
 800078a:	2a00      	cmp	r2, #0
 800078c:	bf0c      	ite	eq
 800078e:	2301      	moveq	r3, #1
 8000790:	2300      	movne	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	757b      	strb	r3, [r7, #21]
 8000796:	e068      	b.n	800086a <applyMask+0x1b2>
                case 4:  invert = (x / 3 + y / 2) % 2 == 0;            break;
 8000798:	7dbb      	ldrb	r3, [r7, #22]
 800079a:	4a42      	ldr	r2, [pc, #264]	; (80008a4 <applyMask+0x1ec>)
 800079c:	fba2 2303 	umull	r2, r3, r2, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	7dfb      	ldrb	r3, [r7, #23]
 80007a6:	085b      	lsrs	r3, r3, #1
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4413      	add	r3, r2
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	bf0c      	ite	eq
 80007b6:	2301      	moveq	r3, #1
 80007b8:	2300      	movne	r3, #0
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	757b      	strb	r3, [r7, #21]
 80007be:	e054      	b.n	800086a <applyMask+0x1b2>
                case 5:  invert = x * y % 2 + x * y % 3 == 0;          break;
 80007c0:	7dbb      	ldrb	r3, [r7, #22]
 80007c2:	7dfa      	ldrb	r2, [r7, #23]
 80007c4:	fb02 f303 	mul.w	r3, r2, r3
 80007c8:	f003 0001 	and.w	r0, r3, #1
 80007cc:	7dbb      	ldrb	r3, [r7, #22]
 80007ce:	7dfa      	ldrb	r2, [r7, #23]
 80007d0:	fb02 f103 	mul.w	r1, r2, r3
 80007d4:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <applyMask+0x1f0>)
 80007d6:	fb83 3201 	smull	r3, r2, r3, r1
 80007da:	17cb      	asrs	r3, r1, #31
 80007dc:	1ad2      	subs	r2, r2, r3
 80007de:	4613      	mov	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4413      	add	r3, r2
 80007e4:	1aca      	subs	r2, r1, r3
 80007e6:	1883      	adds	r3, r0, r2
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	bf0c      	ite	eq
 80007ec:	2301      	moveq	r3, #1
 80007ee:	2300      	movne	r3, #0
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	757b      	strb	r3, [r7, #21]
 80007f4:	e039      	b.n	800086a <applyMask+0x1b2>
                case 6:  invert = (x * y % 2 + x * y % 3) % 2 == 0;    break;
 80007f6:	7dbb      	ldrb	r3, [r7, #22]
 80007f8:	7dfa      	ldrb	r2, [r7, #23]
 80007fa:	fb02 f303 	mul.w	r3, r2, r3
 80007fe:	f003 0001 	and.w	r0, r3, #1
 8000802:	7dbb      	ldrb	r3, [r7, #22]
 8000804:	7dfa      	ldrb	r2, [r7, #23]
 8000806:	fb02 f103 	mul.w	r1, r2, r3
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <applyMask+0x1f0>)
 800080c:	fb83 3201 	smull	r3, r2, r3, r1
 8000810:	17cb      	asrs	r3, r1, #31
 8000812:	1ad2      	subs	r2, r2, r3
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	1aca      	subs	r2, r1, r3
 800081c:	1883      	adds	r3, r0, r2
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	2b00      	cmp	r3, #0
 8000824:	bf0c      	ite	eq
 8000826:	2301      	moveq	r3, #1
 8000828:	2300      	movne	r3, #0
 800082a:	b2db      	uxtb	r3, r3
 800082c:	757b      	strb	r3, [r7, #21]
 800082e:	e01c      	b.n	800086a <applyMask+0x1b2>
                case 7:  invert = ((x + y) % 2 + x * y % 3) % 2 == 0;  break;
 8000830:	7dba      	ldrb	r2, [r7, #22]
 8000832:	7dfb      	ldrb	r3, [r7, #23]
 8000834:	4413      	add	r3, r2
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f003 0001 	and.w	r0, r3, #1
 800083c:	7dbb      	ldrb	r3, [r7, #22]
 800083e:	7dfa      	ldrb	r2, [r7, #23]
 8000840:	fb02 f103 	mul.w	r1, r2, r3
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <applyMask+0x1f0>)
 8000846:	fb83 3201 	smull	r3, r2, r3, r1
 800084a:	17cb      	asrs	r3, r1, #31
 800084c:	1ad2      	subs	r2, r2, r3
 800084e:	4613      	mov	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4413      	add	r3, r2
 8000854:	1aca      	subs	r2, r1, r3
 8000856:	1883      	adds	r3, r0, r2
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	2b00      	cmp	r3, #0
 800085e:	bf0c      	ite	eq
 8000860:	2301      	moveq	r3, #1
 8000862:	2300      	movne	r3, #0
 8000864:	b2db      	uxtb	r3, r3
 8000866:	757b      	strb	r3, [r7, #21]
 8000868:	bf00      	nop
            }
            bb_invertBit(modules, x, y, invert);
 800086a:	7d7b      	ldrb	r3, [r7, #21]
 800086c:	7dfa      	ldrb	r2, [r7, #23]
 800086e:	7db9      	ldrb	r1, [r7, #22]
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	f7ff fe96 	bl	80005a2 <bb_invertBit>
 8000876:	e000      	b.n	800087a <applyMask+0x1c2>
            if (bb_getBit(isFunction, x, y)) { continue; }
 8000878:	bf00      	nop
        for (uint8_t x = 0; x < size; x++) {
 800087a:	7dbb      	ldrb	r3, [r7, #22]
 800087c:	3301      	adds	r3, #1
 800087e:	75bb      	strb	r3, [r7, #22]
 8000880:	7dba      	ldrb	r2, [r7, #22]
 8000882:	7d3b      	ldrb	r3, [r7, #20]
 8000884:	429a      	cmp	r2, r3
 8000886:	f4ff af27 	bcc.w	80006d8 <applyMask+0x20>
    for (uint8_t y = 0; y < size; y++) {
 800088a:	7dfb      	ldrb	r3, [r7, #23]
 800088c:	3301      	adds	r3, #1
 800088e:	75fb      	strb	r3, [r7, #23]
 8000890:	7dfa      	ldrb	r2, [r7, #23]
 8000892:	7d3b      	ldrb	r3, [r7, #20]
 8000894:	429a      	cmp	r2, r3
 8000896:	f4ff af1c 	bcc.w	80006d2 <applyMask+0x1a>
        }
    }
}
 800089a:	bf00      	nop
 800089c:	bf00      	nop
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	aaaaaaab 	.word	0xaaaaaaab
 80008a8:	55555556 	.word	0x55555556

080008ac <setFunctionModule>:

static void setFunctionModule(BitBucket *modules, BitBucket *isFunction, uint8_t x, uint8_t y, bool on) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	4611      	mov	r1, r2
 80008b8:	461a      	mov	r2, r3
 80008ba:	460b      	mov	r3, r1
 80008bc:	71fb      	strb	r3, [r7, #7]
 80008be:	4613      	mov	r3, r2
 80008c0:	71bb      	strb	r3, [r7, #6]
    bb_setBit(modules, x, y, on);
 80008c2:	7e3b      	ldrb	r3, [r7, #24]
 80008c4:	79ba      	ldrb	r2, [r7, #6]
 80008c6:	79f9      	ldrb	r1, [r7, #7]
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff fe20 	bl	800050e <bb_setBit>
    bb_setBit(isFunction, x, y, true);
 80008ce:	2301      	movs	r3, #1
 80008d0:	79ba      	ldrb	r2, [r7, #6]
 80008d2:	79f9      	ldrb	r1, [r7, #7]
 80008d4:	68b8      	ldr	r0, [r7, #8]
 80008d6:	f7ff fe1a 	bl	800050e <bb_setBit>
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <drawFinderPattern>:

// Draws a 9*9 finder pattern including the border separator, with the center module at (x, y).
static void drawFinderPattern(BitBucket *modules, BitBucket *isFunction, uint8_t x, uint8_t y) {
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b088      	sub	sp, #32
 80008e6:	af02      	add	r7, sp, #8
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	4611      	mov	r1, r2
 80008ee:	461a      	mov	r2, r3
 80008f0:	460b      	mov	r3, r1
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	4613      	mov	r3, r2
 80008f6:	71bb      	strb	r3, [r7, #6]
    uint8_t size = modules->bitOffsetOrWidth;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	757b      	strb	r3, [r7, #21]

    for (int8_t i = -4; i <= 4; i++) {
 80008fe:	23fc      	movs	r3, #252	; 0xfc
 8000900:	75fb      	strb	r3, [r7, #23]
 8000902:	e059      	b.n	80009b8 <drawFinderPattern+0xd6>
        for (int8_t j = -4; j <= 4; j++) {
 8000904:	23fc      	movs	r3, #252	; 0xfc
 8000906:	75bb      	strb	r3, [r7, #22]
 8000908:	e04c      	b.n	80009a4 <drawFinderPattern+0xc2>
            uint8_t dist = max(abs(i), abs(j));  // Chebyshev/infinity norm
 800090a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800090e:	2b00      	cmp	r3, #0
 8000910:	bfb8      	it	lt
 8000912:	425b      	neglt	r3, r3
 8000914:	b2db      	uxtb	r3, r3
 8000916:	461a      	mov	r2, r3
 8000918:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800091c:	2b00      	cmp	r3, #0
 800091e:	bfb8      	it	lt
 8000920:	425b      	neglt	r3, r3
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4619      	mov	r1, r3
 8000926:	4610      	mov	r0, r2
 8000928:	f7ff fc5c 	bl	80001e4 <max>
 800092c:	4603      	mov	r3, r0
 800092e:	753b      	strb	r3, [r7, #20]
            int16_t xx = x + j, yy = y + i;
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	b21a      	sxth	r2, r3
 8000934:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4413      	add	r3, r2
 800093c:	827b      	strh	r3, [r7, #18]
 800093e:	79bb      	ldrb	r3, [r7, #6]
 8000940:	b21a      	sxth	r2, r3
 8000942:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000946:	b21b      	sxth	r3, r3
 8000948:	4413      	add	r3, r2
 800094a:	823b      	strh	r3, [r7, #16]
            if (0 <= xx && xx < size && 0 <= yy && yy < size) {
 800094c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000950:	2b00      	cmp	r3, #0
 8000952:	db21      	blt.n	8000998 <drawFinderPattern+0xb6>
 8000954:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000958:	7d7b      	ldrb	r3, [r7, #21]
 800095a:	429a      	cmp	r2, r3
 800095c:	da1c      	bge.n	8000998 <drawFinderPattern+0xb6>
 800095e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000962:	2b00      	cmp	r3, #0
 8000964:	db18      	blt.n	8000998 <drawFinderPattern+0xb6>
 8000966:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800096a:	7d7b      	ldrb	r3, [r7, #21]
 800096c:	429a      	cmp	r2, r3
 800096e:	da13      	bge.n	8000998 <drawFinderPattern+0xb6>
                setFunctionModule(modules, isFunction, xx, yy, dist != 2 && dist != 4);
 8000970:	8a7b      	ldrh	r3, [r7, #18]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	8a3b      	ldrh	r3, [r7, #16]
 8000976:	b2d9      	uxtb	r1, r3
 8000978:	7d3b      	ldrb	r3, [r7, #20]
 800097a:	2b02      	cmp	r3, #2
 800097c:	d004      	beq.n	8000988 <drawFinderPattern+0xa6>
 800097e:	7d3b      	ldrb	r3, [r7, #20]
 8000980:	2b04      	cmp	r3, #4
 8000982:	d001      	beq.n	8000988 <drawFinderPattern+0xa6>
 8000984:	2301      	movs	r3, #1
 8000986:	e000      	b.n	800098a <drawFinderPattern+0xa8>
 8000988:	2300      	movs	r3, #0
 800098a:	b2db      	uxtb	r3, r3
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	460b      	mov	r3, r1
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f7ff ff8a 	bl	80008ac <setFunctionModule>
        for (int8_t j = -4; j <= 4; j++) {
 8000998:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	3301      	adds	r3, #1
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	75bb      	strb	r3, [r7, #22]
 80009a4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	ddae      	ble.n	800090a <drawFinderPattern+0x28>
    for (int8_t i = -4; i <= 4; i++) {
 80009ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	75fb      	strb	r3, [r7, #23]
 80009b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009bc:	2b04      	cmp	r3, #4
 80009be:	dda1      	ble.n	8000904 <drawFinderPattern+0x22>
            }
        }
    }
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <drawAlignmentPattern>:

// Draws a 5*5 alignment pattern, with the center module at (x, y).
static void drawAlignmentPattern(BitBucket *modules, BitBucket *isFunction, uint8_t x, uint8_t y) {
 80009ca:	b5b0      	push	{r4, r5, r7, lr}
 80009cc:	b088      	sub	sp, #32
 80009ce:	af02      	add	r7, sp, #8
 80009d0:	60f8      	str	r0, [r7, #12]
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	4611      	mov	r1, r2
 80009d6:	461a      	mov	r2, r3
 80009d8:	460b      	mov	r3, r1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	4613      	mov	r3, r2
 80009de:	71bb      	strb	r3, [r7, #6]
    for (int8_t i = -2; i <= 2; i++) {
 80009e0:	23fe      	movs	r3, #254	; 0xfe
 80009e2:	75fb      	strb	r3, [r7, #23]
 80009e4:	e038      	b.n	8000a58 <drawAlignmentPattern+0x8e>
        for (int8_t j = -2; j <= 2; j++) {
 80009e6:	23fe      	movs	r3, #254	; 0xfe
 80009e8:	75bb      	strb	r3, [r7, #22]
 80009ea:	e02b      	b.n	8000a44 <drawAlignmentPattern+0x7a>
            setFunctionModule(modules, isFunction, x + j, y + i, max(abs(i), abs(j)) != 1);
 80009ec:	7dba      	ldrb	r2, [r7, #22]
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4413      	add	r3, r2
 80009f2:	b2dc      	uxtb	r4, r3
 80009f4:	7dfa      	ldrb	r2, [r7, #23]
 80009f6:	79bb      	ldrb	r3, [r7, #6]
 80009f8:	4413      	add	r3, r2
 80009fa:	b2dd      	uxtb	r5, r3
 80009fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	bfb8      	it	lt
 8000a04:	425b      	neglt	r3, r3
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4619      	mov	r1, r3
 8000a18:	4610      	mov	r0, r2
 8000a1a:	f7ff fbe3 	bl	80001e4 <max>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	bf14      	ite	ne
 8000a24:	2301      	movne	r3, #1
 8000a26:	2300      	moveq	r3, #0
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	462b      	mov	r3, r5
 8000a2e:	4622      	mov	r2, r4
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff ff3a 	bl	80008ac <setFunctionModule>
        for (int8_t j = -2; j <= 2; j++) {
 8000a38:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	3301      	adds	r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	75bb      	strb	r3, [r7, #22]
 8000a44:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	ddcf      	ble.n	80009ec <drawAlignmentPattern+0x22>
    for (int8_t i = -2; i <= 2; i++) {
 8000a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	3301      	adds	r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	75fb      	strb	r3, [r7, #23]
 8000a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	ddc2      	ble.n	80009e6 <drawAlignmentPattern+0x1c>
        }
    }
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bdb0      	pop	{r4, r5, r7, pc}

08000a6a <drawFormatBits>:

// Draws two copies of the format bits (with its own error correction code)
// based on the given mask and this object's error correction level field.
static void drawFormatBits(BitBucket *modules, BitBucket *isFunction, uint8_t ecc, uint8_t mask) {
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b08c      	sub	sp, #48	; 0x30
 8000a6e:	af02      	add	r7, sp, #8
 8000a70:	60f8      	str	r0, [r7, #12]
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	4611      	mov	r1, r2
 8000a76:	461a      	mov	r2, r3
 8000a78:	460b      	mov	r3, r1
 8000a7a:	71fb      	strb	r3, [r7, #7]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	71bb      	strb	r3, [r7, #6]
    
    uint8_t size = modules->bitOffsetOrWidth;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	76fb      	strb	r3, [r7, #27]

    // Calculate error correction code and pack bits
    uint32_t data = ecc << 3 | mask;  // errCorrLvl is uint2, mask is uint3
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	00da      	lsls	r2, r3, #3
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	617b      	str	r3, [r7, #20]
    uint32_t rem = data;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < 10; i++) {
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
 8000a98:	e00c      	b.n	8000ab4 <drawFormatBits+0x4a>
        rem = (rem << 1) ^ ((rem >> 9) * 0x537);
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9c:	005a      	lsls	r2, r3, #1
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	0a5b      	lsrs	r3, r3, #9
 8000aa2:	f240 5137 	movw	r1, #1335	; 0x537
 8000aa6:	fb01 f303 	mul.w	r3, r1, r3
 8000aaa:	4053      	eors	r3, r2
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < 10; i++) {
 8000aae:	6a3b      	ldr	r3, [r7, #32]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	623b      	str	r3, [r7, #32]
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
 8000ab6:	2b09      	cmp	r3, #9
 8000ab8:	ddef      	ble.n	8000a9a <drawFormatBits+0x30>
    }
    
    data = data << 10 | rem;
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	029b      	lsls	r3, r3, #10
 8000abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	617b      	str	r3, [r7, #20]
    data ^= 0x5412;  // uint15
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	f483 43a8 	eor.w	r3, r3, #21504	; 0x5400
 8000aca:	f083 0312 	eor.w	r3, r3, #18
 8000ace:	617b      	str	r3, [r7, #20]
    
    // Draw first copy
    for (uint8_t i = 0; i <= 5; i++) {
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	77fb      	strb	r3, [r7, #31]
 8000ad4:	e015      	b.n	8000b02 <drawFormatBits+0x98>
        setFunctionModule(modules, isFunction, 8, i, ((data >> i) & 1) != 0);
 8000ad6:	7ffb      	ldrb	r3, [r7, #31]
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	fa22 f303 	lsr.w	r3, r2, r3
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	bf14      	ite	ne
 8000ae6:	2301      	movne	r3, #1
 8000ae8:	2300      	moveq	r3, #0
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	7ffb      	ldrb	r3, [r7, #31]
 8000af0:	9200      	str	r2, [sp, #0]
 8000af2:	2208      	movs	r2, #8
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f7ff fed8 	bl	80008ac <setFunctionModule>
    for (uint8_t i = 0; i <= 5; i++) {
 8000afc:	7ffb      	ldrb	r3, [r7, #31]
 8000afe:	3301      	adds	r3, #1
 8000b00:	77fb      	strb	r3, [r7, #31]
 8000b02:	7ffb      	ldrb	r3, [r7, #31]
 8000b04:	2b05      	cmp	r3, #5
 8000b06:	d9e6      	bls.n	8000ad6 <drawFormatBits+0x6c>
    }
    
    setFunctionModule(modules, isFunction, 8, 7, ((data >> 6) & 1) != 0);
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	099b      	lsrs	r3, r3, #6
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	bf14      	ite	ne
 8000b14:	2301      	movne	r3, #1
 8000b16:	2300      	moveq	r3, #0
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	2208      	movs	r2, #8
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff fec2 	bl	80008ac <setFunctionModule>
    setFunctionModule(modules, isFunction, 8, 8, ((data >> 7) & 1) != 0);
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	09db      	lsrs	r3, r3, #7
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bf14      	ite	ne
 8000b34:	2301      	movne	r3, #1
 8000b36:	2300      	moveq	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	2208      	movs	r2, #8
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f7ff feb2 	bl	80008ac <setFunctionModule>
    setFunctionModule(modules, isFunction, 7, 8, ((data >> 8) & 1) != 0);
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	0a1b      	lsrs	r3, r3, #8
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	bf14      	ite	ne
 8000b54:	2301      	movne	r3, #1
 8000b56:	2300      	moveq	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	2207      	movs	r2, #7
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f7ff fea2 	bl	80008ac <setFunctionModule>
    
    for (int8_t i = 9; i < 15; i++) {
 8000b68:	2309      	movs	r3, #9
 8000b6a:	77bb      	strb	r3, [r7, #30]
 8000b6c:	e01c      	b.n	8000ba8 <drawFormatBits+0x13e>
        setFunctionModule(modules, isFunction, 14 - i, 8, ((data >> i) & 1) != 0);
 8000b6e:	7fbb      	ldrb	r3, [r7, #30]
 8000b70:	f1c3 030e 	rsb	r3, r3, #14
 8000b74:	b2d9      	uxtb	r1, r3
 8000b76:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	bf14      	ite	ne
 8000b88:	2301      	movne	r3, #1
 8000b8a:	2300      	moveq	r3, #0
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2308      	movs	r3, #8
 8000b92:	460a      	mov	r2, r1
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f7ff fe88 	bl	80008ac <setFunctionModule>
    for (int8_t i = 9; i < 15; i++) {
 8000b9c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	77bb      	strb	r3, [r7, #30]
 8000ba8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000bac:	2b0e      	cmp	r3, #14
 8000bae:	ddde      	ble.n	8000b6e <drawFormatBits+0x104>
    }
    
    // Draw second copy
    for (int8_t i = 0; i <= 7; i++) {
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	777b      	strb	r3, [r7, #29]
 8000bb4:	e01e      	b.n	8000bf4 <drawFormatBits+0x18a>
        setFunctionModule(modules, isFunction, size - 1 - i, 8, ((data >> i) & 1) != 0);
 8000bb6:	7f7b      	ldrb	r3, [r7, #29]
 8000bb8:	7efa      	ldrb	r2, [r7, #27]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	b2d9      	uxtb	r1, r3
 8000bc2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bf14      	ite	ne
 8000bd4:	2301      	movne	r3, #1
 8000bd6:	2300      	moveq	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2308      	movs	r3, #8
 8000bde:	460a      	mov	r2, r1
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f7ff fe62 	bl	80008ac <setFunctionModule>
    for (int8_t i = 0; i <= 7; i++) {
 8000be8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	777b      	strb	r3, [r7, #29]
 8000bf4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000bf8:	2b07      	cmp	r3, #7
 8000bfa:	dddc      	ble.n	8000bb6 <drawFormatBits+0x14c>
    }
    
    for (int8_t i = 8; i < 15; i++) {
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	773b      	strb	r3, [r7, #28]
 8000c00:	e01e      	b.n	8000c40 <drawFormatBits+0x1d6>
        setFunctionModule(modules, isFunction, 8, size - 15 + i, ((data >> i) & 1) != 0);
 8000c02:	7f3a      	ldrb	r2, [r7, #28]
 8000c04:	7efb      	ldrb	r3, [r7, #27]
 8000c06:	4413      	add	r3, r2
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	3b0f      	subs	r3, #15
 8000c0c:	b2d9      	uxtb	r1, r3
 8000c0e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	fa22 f303 	lsr.w	r3, r2, r3
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	bf14      	ite	ne
 8000c20:	2301      	movne	r3, #1
 8000c22:	2300      	moveq	r3, #0
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff fe3c 	bl	80008ac <setFunctionModule>
    for (int8_t i = 8; i < 15; i++) {
 8000c34:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	773b      	strb	r3, [r7, #28]
 8000c40:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8000c44:	2b0e      	cmp	r3, #14
 8000c46:	dddc      	ble.n	8000c02 <drawFormatBits+0x198>
    }
    
    setFunctionModule(modules, isFunction, 8, size - 8, true);
 8000c48:	7efb      	ldrb	r3, [r7, #27]
 8000c4a:	3b08      	subs	r3, #8
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2201      	movs	r2, #1
 8000c50:	9200      	str	r2, [sp, #0]
 8000c52:	2208      	movs	r2, #8
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f7ff fe28 	bl	80008ac <setFunctionModule>
}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <drawVersion>:


// Draws two copies of the version bits (with its own error correction code),
// based on this object's version field (which only has an effect for 7 <= version <= 40).
static void drawVersion(BitBucket *modules, BitBucket *isFunction, uint8_t version) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	71fb      	strb	r3, [r7, #7]
    
    int8_t size = modules->bitOffsetOrWidth;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	767b      	strb	r3, [r7, #25]

#if LOCK_VERSION != 0 && LOCK_VERSION < 7
    return;
    
#else
    if (version < 7) { return; }
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d957      	bls.n	8000d2e <drawVersion+0xca>
    
    // Calculate error correction code and pack bits
    uint32_t rem = version;  // version is uint6, in the range [7, 40]
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < 12; i++) {
 8000c82:	2300      	movs	r3, #0
 8000c84:	76fb      	strb	r3, [r7, #27]
 8000c86:	e00c      	b.n	8000ca2 <drawVersion+0x3e>
        rem = (rem << 1) ^ ((rem >> 11) * 0x1F25);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005a      	lsls	r2, r3, #1
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	0adb      	lsrs	r3, r3, #11
 8000c90:	f641 7125 	movw	r1, #7973	; 0x1f25
 8000c94:	fb01 f303 	mul.w	r3, r1, r3
 8000c98:	4053      	eors	r3, r2
 8000c9a:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < 12; i++) {
 8000c9c:	7efb      	ldrb	r3, [r7, #27]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	76fb      	strb	r3, [r7, #27]
 8000ca2:	7efb      	ldrb	r3, [r7, #27]
 8000ca4:	2b0b      	cmp	r3, #11
 8000ca6:	d9ef      	bls.n	8000c88 <drawVersion+0x24>
    }
    
    uint32_t data = version << 12 | rem;  // uint18
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	031b      	lsls	r3, r3, #12
 8000cac:	461a      	mov	r2, r3
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	617b      	str	r3, [r7, #20]
    
    // Draw two copies
    for (uint8_t i = 0; i < 18; i++) {
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	76bb      	strb	r3, [r7, #26]
 8000cb8:	e035      	b.n	8000d26 <drawVersion+0xc2>
        bool bit = ((data >> i) & 1) != 0;
 8000cba:	7ebb      	ldrb	r3, [r7, #26]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf14      	ite	ne
 8000cca:	2301      	movne	r3, #1
 8000ccc:	2300      	moveq	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	74fb      	strb	r3, [r7, #19]
        uint8_t a = size - 11 + i % 3, b = i / 3;
 8000cd2:	7eba      	ldrb	r2, [r7, #26]
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <drawVersion+0xd4>)
 8000cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8000cda:	0859      	lsrs	r1, r3, #1
 8000cdc:	460b      	mov	r3, r1
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	440b      	add	r3, r1
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	7e7b      	ldrb	r3, [r7, #25]
 8000ce8:	4413      	add	r3, r2
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	3b0b      	subs	r3, #11
 8000cee:	74bb      	strb	r3, [r7, #18]
 8000cf0:	7ebb      	ldrb	r3, [r7, #26]
 8000cf2:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <drawVersion+0xd4>)
 8000cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf8:	085b      	lsrs	r3, r3, #1
 8000cfa:	747b      	strb	r3, [r7, #17]
        setFunctionModule(modules, isFunction, a, b, bit);
 8000cfc:	7c79      	ldrb	r1, [r7, #17]
 8000cfe:	7cba      	ldrb	r2, [r7, #18]
 8000d00:	7cfb      	ldrb	r3, [r7, #19]
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	460b      	mov	r3, r1
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff fdcf 	bl	80008ac <setFunctionModule>
        setFunctionModule(modules, isFunction, b, a, bit);
 8000d0e:	7cb9      	ldrb	r1, [r7, #18]
 8000d10:	7c7a      	ldrb	r2, [r7, #17]
 8000d12:	7cfb      	ldrb	r3, [r7, #19]
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	460b      	mov	r3, r1
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f7ff fdc6 	bl	80008ac <setFunctionModule>
    for (uint8_t i = 0; i < 18; i++) {
 8000d20:	7ebb      	ldrb	r3, [r7, #26]
 8000d22:	3301      	adds	r3, #1
 8000d24:	76bb      	strb	r3, [r7, #26]
 8000d26:	7ebb      	ldrb	r3, [r7, #26]
 8000d28:	2b11      	cmp	r3, #17
 8000d2a:	d9c6      	bls.n	8000cba <drawVersion+0x56>
 8000d2c:	e000      	b.n	8000d30 <drawVersion+0xcc>
    if (version < 7) { return; }
 8000d2e:	bf00      	nop
    }
    
#endif
}
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	aaaaaaab 	.word	0xaaaaaaab

08000d3c <drawFunctionPatterns>:

static void drawFunctionPatterns(BitBucket *modules, BitBucket *isFunction, uint8_t version, uint8_t ecc) {
 8000d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d40:	b08d      	sub	sp, #52	; 0x34
 8000d42:	af02      	add	r7, sp, #8
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	71bb      	strb	r3, [r7, #6]
    
    uint8_t size = modules->bitOffsetOrWidth;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f887 3020 	strb.w	r3, [r7, #32]

    // Draw the horizontal and vertical timing patterns
    for (uint8_t i = 0; i < size; i++) {
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000d62:	e029      	b.n	8000db8 <drawFunctionPatterns+0x7c>
        setFunctionModule(modules, isFunction, 6, i, i % 2 == 0);
 8000d64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	bf0c      	ite	eq
 8000d72:	2301      	moveq	r3, #1
 8000d74:	2300      	movne	r3, #0
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	461a      	mov	r2, r3
 8000d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d7e:	9200      	str	r2, [sp, #0]
 8000d80:	2206      	movs	r2, #6
 8000d82:	68b9      	ldr	r1, [r7, #8]
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f7ff fd91 	bl	80008ac <setFunctionModule>
        setFunctionModule(modules, isFunction, i, 6, i % 2 == 0);
 8000d8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	bf0c      	ite	eq
 8000d98:	2301      	moveq	r3, #1
 8000d9a:	2300      	movne	r3, #0
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	2306      	movs	r3, #6
 8000da6:	68b9      	ldr	r1, [r7, #8]
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f7ff fd7f 	bl	80008ac <setFunctionModule>
    for (uint8_t i = 0; i < size; i++) {
 8000dae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000db2:	3301      	adds	r3, #1
 8000db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000db8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000dbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d3cf      	bcc.n	8000d64 <drawFunctionPatterns+0x28>
    }
    
    // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)
    drawFinderPattern(modules, isFunction, 3, 3);
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f7ff fd89 	bl	80008e2 <drawFinderPattern>
    drawFinderPattern(modules, isFunction, size - 4, 3);
 8000dd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dd4:	3b04      	subs	r3, #4
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	2303      	movs	r3, #3
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	68f8      	ldr	r0, [r7, #12]
 8000dde:	f7ff fd80 	bl	80008e2 <drawFinderPattern>
    drawFinderPattern(modules, isFunction, 3, size - 4);
 8000de2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000de6:	3b04      	subs	r3, #4
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2203      	movs	r2, #3
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f7ff fd77 	bl	80008e2 <drawFinderPattern>
    
#if LOCK_VERSION == 0 || LOCK_VERSION > 1

    if (version > 1) {
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	f240 80c2 	bls.w	8000f80 <drawFunctionPatterns+0x244>
 8000dfc:	466b      	mov	r3, sp
 8000dfe:	461e      	mov	r6, r3

        // Draw the numerous alignment patterns
        
        uint8_t alignCount = version / 7 + 2;
 8000e00:	79fa      	ldrb	r2, [r7, #7]
 8000e02:	4b68      	ldr	r3, [pc, #416]	; (8000fa4 <drawFunctionPatterns+0x268>)
 8000e04:	fba3 1302 	umull	r1, r3, r3, r2
 8000e08:	1ad2      	subs	r2, r2, r3
 8000e0a:	0852      	lsrs	r2, r2, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	3302      	adds	r3, #2
 8000e14:	77fb      	strb	r3, [r7, #31]
        uint8_t step;
        if (version != 32) {
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b20      	cmp	r3, #32
 8000e1a:	d00f      	beq.n	8000e3c <drawFunctionPatterns+0x100>
            step = (version * 4 + alignCount * 2 + 1) / (2 * alignCount - 2) * 2;  // ceil((size - 13) / (2*numAlign - 2)) * 2
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	005a      	lsls	r2, r3, #1
 8000e20:	7ffb      	ldrb	r3, [r7, #31]
 8000e22:	4413      	add	r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	7ffb      	ldrb	r3, [r7, #31]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000e3a:	e002      	b.n	8000e42 <drawFunctionPatterns+0x106>
        } else { // C-C-C-Combo breaker!
            step = 26;
 8000e3c:	231a      	movs	r3, #26
 8000e3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        }
        
        uint8_t alignPositionIndex = alignCount - 1;
 8000e42:	7ffb      	ldrb	r3, [r7, #31]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint8_t alignPosition[alignCount];
 8000e4a:	7ff9      	ldrb	r1, [r7, #31]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	b2cb      	uxtb	r3, r1
 8000e54:	2200      	movs	r2, #0
 8000e56:	4698      	mov	r8, r3
 8000e58:	4691      	mov	r9, r2
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e6e:	b2cb      	uxtb	r3, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	461c      	mov	r4, r3
 8000e74:	4615      	mov	r5, r2
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	f04f 0300 	mov.w	r3, #0
 8000e7e:	00eb      	lsls	r3, r5, #3
 8000e80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e84:	00e2      	lsls	r2, r4, #3
 8000e86:	460b      	mov	r3, r1
 8000e88:	3307      	adds	r3, #7
 8000e8a:	08db      	lsrs	r3, r3, #3
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	ebad 0d03 	sub.w	sp, sp, r3
 8000e92:	ab02      	add	r3, sp, #8
 8000e94:	3300      	adds	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
        
        alignPosition[0] = 6;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	2206      	movs	r2, #6
 8000e9c:	701a      	strb	r2, [r3, #0]
        
        uint8_t size = version * 4 + 17;
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	3311      	adds	r3, #17
 8000ea6:	74fb      	strb	r3, [r7, #19]
        for (uint8_t i = 0, pos = size - 7; i < alignCount - 1; i++, pos -= step) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eae:	7cfb      	ldrb	r3, [r7, #19]
 8000eb0:	3b07      	subs	r3, #7
 8000eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000eb6:	e015      	b.n	8000ee4 <drawFunctionPatterns+0x1a8>
            alignPosition[alignPositionIndex--] = pos;
 8000eb8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ebc:	1e5a      	subs	r2, r3, #1
 8000ebe:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000eca:	545a      	strb	r2, [r3, r1]
        for (uint8_t i = 0, pos = size - 7; i < alignCount - 1; i++, pos -= step) {
 8000ecc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ed6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000eda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ee4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ee8:	7ffb      	ldrb	r3, [r7, #31]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	429a      	cmp	r2, r3
 8000eee:	dbe3      	blt.n	8000eb8 <drawFunctionPatterns+0x17c>
        }
        
        for (uint8_t i = 0; i < alignCount; i++) {
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000ef6:	e03d      	b.n	8000f74 <drawFunctionPatterns+0x238>
            for (uint8_t j = 0; j < alignCount; j++) {
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000efe:	e02f      	b.n	8000f60 <drawFunctionPatterns+0x224>
                if ((i == 0 && j == 0) || (i == 0 && j == alignCount - 1) || (i == alignCount - 1 && j == 0)) {
 8000f00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d103      	bne.n	8000f10 <drawFunctionPatterns+0x1d4>
 8000f08:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d021      	beq.n	8000f54 <drawFunctionPatterns+0x218>
 8000f10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d105      	bne.n	8000f24 <drawFunctionPatterns+0x1e8>
 8000f18:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000f1c:	7ffb      	ldrb	r3, [r7, #31]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d017      	beq.n	8000f54 <drawFunctionPatterns+0x218>
 8000f24:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000f28:	7ffb      	ldrb	r3, [r7, #31]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d103      	bne.n	8000f38 <drawFunctionPatterns+0x1fc>
 8000f30:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00d      	beq.n	8000f54 <drawFunctionPatterns+0x218>
                    continue;  // Skip the three finder corners
                } else {
                    drawAlignmentPattern(modules, isFunction, alignPosition[i], alignPosition[j]);
 8000f38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	5cd1      	ldrb	r1, [r2, r3]
 8000f40:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	5cd3      	ldrb	r3, [r2, r3]
 8000f48:	460a      	mov	r2, r1
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f7ff fd3c 	bl	80009ca <drawAlignmentPattern>
 8000f52:	e000      	b.n	8000f56 <drawFunctionPatterns+0x21a>
                    continue;  // Skip the three finder corners
 8000f54:	bf00      	nop
            for (uint8_t j = 0; j < alignCount; j++) {
 8000f56:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000f60:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000f64:	7ffb      	ldrb	r3, [r7, #31]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d3ca      	bcc.n	8000f00 <drawFunctionPatterns+0x1c4>
        for (uint8_t i = 0; i < alignCount; i++) {
 8000f6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000f74:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000f78:	7ffb      	ldrb	r3, [r7, #31]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d3bc      	bcc.n	8000ef8 <drawFunctionPatterns+0x1bc>
 8000f7e:	46b5      	mov	sp, r6
    }
    
#endif
    
    // Draw configuration data
    drawFormatBits(modules, isFunction, ecc, 0);  // Dummy mask value; overwritten later in the constructor
 8000f80:	79ba      	ldrb	r2, [r7, #6]
 8000f82:	2300      	movs	r3, #0
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f7ff fd6f 	bl	8000a6a <drawFormatBits>
    drawVersion(modules, isFunction, version);
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f7ff fe66 	bl	8000c64 <drawVersion>
}
 8000f98:	bf00      	nop
 8000f9a:	372c      	adds	r7, #44	; 0x2c
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fa2:	bf00      	nop
 8000fa4:	24924925 	.word	0x24924925

08000fa8 <drawCodewords>:


// Draws the given sequence of 8-bit codewords (data and error correction) onto the entire
// data area of this QR Code symbol. Function modules need to be marked off before this is called.
static void drawCodewords(BitBucket *modules, BitBucket *isFunction, BitBucket *codewords) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
    
    uint32_t bitLength = codewords->bitOffsetOrWidth;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
    uint8_t *data = codewords->data;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	617b      	str	r3, [r7, #20]
    
    uint8_t size = modules->bitOffsetOrWidth;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	74fb      	strb	r3, [r7, #19]
    
    // Bit index into the data
    uint32_t i = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Do the funny zigzag scan
    for (int16_t right = size - 1; right >= 1; right -= 2) {  // Index of right column in each column pair
 8000fca:	7cfb      	ldrb	r3, [r7, #19]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	847b      	strh	r3, [r7, #34]	; 0x22
 8000fd4:	e06f      	b.n	80010b6 <drawCodewords+0x10e>
        if (right == 6) { right = 5; }
 8000fd6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d101      	bne.n	8000fe2 <drawCodewords+0x3a>
 8000fde:	2305      	movs	r3, #5
 8000fe0:	847b      	strh	r3, [r7, #34]	; 0x22
        
        for (uint8_t vert = 0; vert < size; vert++) {  // Vertical counter
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000fe8:	e05c      	b.n	80010a4 <drawCodewords+0xfc>
            for (int j = 0; j < 2; j++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	e051      	b.n	8001094 <drawCodewords+0xec>
                uint8_t x = right - j;  // Actual x coordinate
 8000ff0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	74bb      	strb	r3, [r7, #18]
                bool upwards = ((right & 2) == 0) ^ (x < 6);
 8000ffc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	bf0c      	ite	eq
 8001006:	2301      	moveq	r3, #1
 8001008:	2300      	movne	r3, #0
 800100a:	b2db      	uxtb	r3, r3
 800100c:	b25a      	sxtb	r2, r3
 800100e:	7cbb      	ldrb	r3, [r7, #18]
 8001010:	2b05      	cmp	r3, #5
 8001012:	bf94      	ite	ls
 8001014:	2301      	movls	r3, #1
 8001016:	2300      	movhi	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	b25b      	sxtb	r3, r3
 800101c:	4053      	eors	r3, r2
 800101e:	b25b      	sxtb	r3, r3
 8001020:	747b      	strb	r3, [r7, #17]
                uint8_t y = upwards ? size - 1 - vert : vert;  // Actual y coordinate
 8001022:	7c7b      	ldrb	r3, [r7, #17]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d007      	beq.n	8001038 <drawCodewords+0x90>
 8001028:	7cfa      	ldrb	r2, [r7, #19]
 800102a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	3b01      	subs	r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	e001      	b.n	800103c <drawCodewords+0x94>
 8001038:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800103c:	743b      	strb	r3, [r7, #16]
                if (!bb_getBit(isFunction, x, y) && i < bitLength) {
 800103e:	7c3a      	ldrb	r2, [r7, #16]
 8001040:	7cbb      	ldrb	r3, [r7, #18]
 8001042:	4619      	mov	r1, r3
 8001044:	68b8      	ldr	r0, [r7, #8]
 8001046:	f7ff fb0c 	bl	8000662 <bb_getBit>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d11e      	bne.n	800108e <drawCodewords+0xe6>
 8001050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	429a      	cmp	r2, r3
 8001056:	d21a      	bcs.n	800108e <drawCodewords+0xe6>
                    bb_setBit(modules, x, y, ((data[i >> 3] >> (7 - (i & 7))) & 1) != 0);
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	08db      	lsrs	r3, r3, #3
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	43db      	mvns	r3, r3
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	fa42 f303 	asr.w	r3, r2, r3
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf14      	ite	ne
 8001078:	2301      	movne	r3, #1
 800107a:	2300      	moveq	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	7c3a      	ldrb	r2, [r7, #16]
 8001080:	7cb9      	ldrb	r1, [r7, #18]
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f7ff fa43 	bl	800050e <bb_setBit>
                    i++;
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	3301      	adds	r3, #1
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
            for (int j = 0; j < 2; j++) {
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3301      	adds	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	2b01      	cmp	r3, #1
 8001098:	ddaa      	ble.n	8000ff0 <drawCodewords+0x48>
        for (uint8_t vert = 0; vert < size; vert++) {  // Vertical counter
 800109a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800109e:	3301      	adds	r3, #1
 80010a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80010a4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80010a8:	7cfb      	ldrb	r3, [r7, #19]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d39d      	bcc.n	8000fea <drawCodewords+0x42>
    for (int16_t right = size - 1; right >= 1; right -= 2) {  // Index of right column in each column pair
 80010ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010b0:	3b02      	subs	r3, #2
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	847b      	strh	r3, [r7, #34]	; 0x22
 80010b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	dc8b      	bgt.n	8000fd6 <drawCodewords+0x2e>
                // If there are any remainder bits (0 to 7), they are already
                // set to 0/false/white when the grid of modules was initialized
            }
        }
    }
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	; 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <getPenaltyScore>:
#define PENALTY_N4     10

// Calculates and returns the penalty score based on state of this QR Code's current modules.
// This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.
// @TODO: This can be optimized by working with the bytes instead of bits.
static uint32_t getPenaltyScore(BitBucket *modules) {
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b08d      	sub	sp, #52	; 0x34
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    uint32_t result = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    uint8_t size = modules->bitOffsetOrWidth;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	75fb      	strb	r3, [r7, #23]
    
    // Adjacent modules in row having same color
    for (uint8_t y = 0; y < size; y++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010e0:	e049      	b.n	8001176 <getPenaltyScore+0xae>
        
        bool colorX = bb_getBit(modules, 0, y);
 80010e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010e6:	461a      	mov	r2, r3
 80010e8:	2100      	movs	r1, #0
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fab9 	bl	8000662 <bb_getBit>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        for (uint8_t x = 1, runX = 1; x < size; x++) {
 80010f6:	2301      	movs	r3, #1
 80010f8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80010fc:	2301      	movs	r3, #1
 80010fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001102:	e02e      	b.n	8001162 <getPenaltyScore+0x9a>
            bool cx = bb_getBit(modules, x, y);
 8001104:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001108:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800110c:	4619      	mov	r1, r3
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff faa7 	bl	8000662 <bb_getBit>
 8001114:	4603      	mov	r3, r0
 8001116:	73bb      	strb	r3, [r7, #14]
            if (cx != colorX) {
 8001118:	7bba      	ldrb	r2, [r7, #14]
 800111a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800111e:	429a      	cmp	r2, r3
 8001120:	d006      	beq.n	8001130 <getPenaltyScore+0x68>
                colorX = cx;
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                runX = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800112e:	e013      	b.n	8001158 <getPenaltyScore+0x90>
                
            } else {
                runX++;
 8001130:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001134:	3301      	adds	r3, #1
 8001136:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                if (runX == 5) {
 800113a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800113e:	2b05      	cmp	r3, #5
 8001140:	d103      	bne.n	800114a <getPenaltyScore+0x82>
                    result += PENALTY_N1;
 8001142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001144:	3303      	adds	r3, #3
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001148:	e006      	b.n	8001158 <getPenaltyScore+0x90>
                } else if (runX > 5) {
 800114a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800114e:	2b05      	cmp	r3, #5
 8001150:	d902      	bls.n	8001158 <getPenaltyScore+0x90>
                    result++;
 8001152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001154:	3301      	adds	r3, #1
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t x = 1, runX = 1; x < size; x++) {
 8001158:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800115c:	3301      	adds	r3, #1
 800115e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001162:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001166:	7dfb      	ldrb	r3, [r7, #23]
 8001168:	429a      	cmp	r2, r3
 800116a:	d3cb      	bcc.n	8001104 <getPenaltyScore+0x3c>
    for (uint8_t y = 0; y < size; y++) {
 800116c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001170:	3301      	adds	r3, #1
 8001172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001176:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	429a      	cmp	r2, r3
 800117e:	d3b0      	bcc.n	80010e2 <getPenaltyScore+0x1a>
            }
        }
    }
    
    // Adjacent modules in column having same color
    for (uint8_t x = 0; x < size; x++) {
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001186:	e049      	b.n	800121c <getPenaltyScore+0x154>
        bool colorY = bb_getBit(modules, x, 0);
 8001188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff fa66 	bl	8000662 <bb_getBit>
 8001196:	4603      	mov	r3, r0
 8001198:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        for (uint8_t y = 1, runY = 1; y < size; y++) {
 800119c:	2301      	movs	r3, #1
 800119e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80011a2:	2301      	movs	r3, #1
 80011a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80011a8:	e02e      	b.n	8001208 <getPenaltyScore+0x140>
            bool cy = bb_getBit(modules, x, y);
 80011aa:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80011ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b2:	4619      	mov	r1, r3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff fa54 	bl	8000662 <bb_getBit>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73fb      	strb	r3, [r7, #15]
            if (cy != colorY) {
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d006      	beq.n	80011d6 <getPenaltyScore+0x10e>
                colorY = cy;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                runY = 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80011d4:	e013      	b.n	80011fe <getPenaltyScore+0x136>
            } else {
                runY++;
 80011d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011da:	3301      	adds	r3, #1
 80011dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                if (runY == 5) {
 80011e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	d103      	bne.n	80011f0 <getPenaltyScore+0x128>
                    result += PENALTY_N1;
 80011e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ea:	3303      	adds	r3, #3
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ee:	e006      	b.n	80011fe <getPenaltyScore+0x136>
                } else if (runY > 5) {
 80011f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d902      	bls.n	80011fe <getPenaltyScore+0x136>
                    result++;
 80011f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fa:	3301      	adds	r3, #1
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t y = 1, runY = 1; y < size; y++) {
 80011fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001202:	3301      	adds	r3, #1
 8001204:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001208:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	429a      	cmp	r2, r3
 8001210:	d3cb      	bcc.n	80011aa <getPenaltyScore+0xe2>
    for (uint8_t x = 0; x < size; x++) {
 8001212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001216:	3301      	adds	r3, #1
 8001218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800121c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	429a      	cmp	r2, r3
 8001224:	d3b0      	bcc.n	8001188 <getPenaltyScore+0xc0>
                }
            }
        }
    }
    
    uint16_t black = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	847b      	strh	r3, [r7, #34]	; 0x22
    for (uint8_t y = 0; y < size; y++) {
 800122a:	2300      	movs	r3, #0
 800122c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001230:	e08f      	b.n	8001352 <getPenaltyScore+0x28a>
        uint16_t bitsRow = 0, bitsCol = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	83fb      	strh	r3, [r7, #30]
 8001236:	2300      	movs	r3, #0
 8001238:	83bb      	strh	r3, [r7, #28]
        for (uint8_t x = 0; x < size; x++) {
 800123a:	2300      	movs	r3, #0
 800123c:	76fb      	strb	r3, [r7, #27]
 800123e:	e07e      	b.n	800133e <getPenaltyScore+0x276>
            bool color = bb_getBit(modules, x, y);
 8001240:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001244:	7efb      	ldrb	r3, [r7, #27]
 8001246:	4619      	mov	r1, r3
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fa0a 	bl	8000662 <bb_getBit>
 800124e:	4603      	mov	r3, r0
 8001250:	74fb      	strb	r3, [r7, #19]

            // 2*2 blocks of modules having same color
            if (x > 0 && y > 0) {
 8001252:	7efb      	ldrb	r3, [r7, #27]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d035      	beq.n	80012c4 <getPenaltyScore+0x1fc>
 8001258:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800125c:	2b00      	cmp	r3, #0
 800125e:	d031      	beq.n	80012c4 <getPenaltyScore+0x1fc>
                bool colorUL = bb_getBit(modules, x - 1, y - 1);
 8001260:	7efb      	ldrb	r3, [r7, #27]
 8001262:	3b01      	subs	r3, #1
 8001264:	b2d9      	uxtb	r1, r3
 8001266:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800126a:	3b01      	subs	r3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	461a      	mov	r2, r3
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff f9f6 	bl	8000662 <bb_getBit>
 8001276:	4603      	mov	r3, r0
 8001278:	74bb      	strb	r3, [r7, #18]
                bool colorUR = bb_getBit(modules, x, y - 1);
 800127a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800127e:	3b01      	subs	r3, #1
 8001280:	b2da      	uxtb	r2, r3
 8001282:	7efb      	ldrb	r3, [r7, #27]
 8001284:	4619      	mov	r1, r3
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff f9eb 	bl	8000662 <bb_getBit>
 800128c:	4603      	mov	r3, r0
 800128e:	747b      	strb	r3, [r7, #17]
                bool colorL = bb_getBit(modules, x - 1, y);
 8001290:	7efb      	ldrb	r3, [r7, #27]
 8001292:	3b01      	subs	r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800129a:	4619      	mov	r1, r3
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff f9e0 	bl	8000662 <bb_getBit>
 80012a2:	4603      	mov	r3, r0
 80012a4:	743b      	strb	r3, [r7, #16]
                if (color == colorUL && color == colorUR && color == colorL) {
 80012a6:	7cfa      	ldrb	r2, [r7, #19]
 80012a8:	7cbb      	ldrb	r3, [r7, #18]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d10a      	bne.n	80012c4 <getPenaltyScore+0x1fc>
 80012ae:	7cfa      	ldrb	r2, [r7, #19]
 80012b0:	7c7b      	ldrb	r3, [r7, #17]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d106      	bne.n	80012c4 <getPenaltyScore+0x1fc>
 80012b6:	7cfa      	ldrb	r2, [r7, #19]
 80012b8:	7c3b      	ldrb	r3, [r7, #16]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d102      	bne.n	80012c4 <getPenaltyScore+0x1fc>
                    result += PENALTY_N2;
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	3303      	adds	r3, #3
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            // Finder-like pattern in rows and columns
            bitsRow = ((bitsRow << 1) & 0x7FF) | color;
 80012c4:	8bfb      	ldrh	r3, [r7, #30]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	7cfb      	ldrb	r3, [r7, #19]
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
            bitsCol = ((bitsCol << 1) & 0x7FF) | bb_getBit(modules, y, x);
 80012da:	8bbb      	ldrh	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	b21b      	sxth	r3, r3
 80012e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e4:	b21c      	sxth	r4, r3
 80012e6:	7efa      	ldrb	r2, [r7, #27]
 80012e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80012ec:	4619      	mov	r1, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff f9b7 	bl	8000662 <bb_getBit>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4323      	orrs	r3, r4
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	83bb      	strh	r3, [r7, #28]

            // Needs 11 bits accumulated
            if (x >= 10) {
 80012fe:	7efb      	ldrb	r3, [r7, #27]
 8001300:	2b09      	cmp	r3, #9
 8001302:	d913      	bls.n	800132c <getPenaltyScore+0x264>
                if (bitsRow == 0x05D || bitsRow == 0x5D0) {
 8001304:	8bfb      	ldrh	r3, [r7, #30]
 8001306:	2b5d      	cmp	r3, #93	; 0x5d
 8001308:	d003      	beq.n	8001312 <getPenaltyScore+0x24a>
 800130a:	8bfb      	ldrh	r3, [r7, #30]
 800130c:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8001310:	d102      	bne.n	8001318 <getPenaltyScore+0x250>
                    result += PENALTY_N3;
 8001312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001314:	3328      	adds	r3, #40	; 0x28
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                if (bitsCol == 0x05D || bitsCol == 0x5D0) {
 8001318:	8bbb      	ldrh	r3, [r7, #28]
 800131a:	2b5d      	cmp	r3, #93	; 0x5d
 800131c:	d003      	beq.n	8001326 <getPenaltyScore+0x25e>
 800131e:	8bbb      	ldrh	r3, [r7, #28]
 8001320:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8001324:	d102      	bne.n	800132c <getPenaltyScore+0x264>
                    result += PENALTY_N3;
 8001326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001328:	3328      	adds	r3, #40	; 0x28
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            // Balance of black and white modules
            if (color) { black++; }
 800132c:	7cfb      	ldrb	r3, [r7, #19]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <getPenaltyScore+0x270>
 8001332:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001334:	3301      	adds	r3, #1
 8001336:	847b      	strh	r3, [r7, #34]	; 0x22
        for (uint8_t x = 0; x < size; x++) {
 8001338:	7efb      	ldrb	r3, [r7, #27]
 800133a:	3301      	adds	r3, #1
 800133c:	76fb      	strb	r3, [r7, #27]
 800133e:	7efa      	ldrb	r2, [r7, #27]
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	429a      	cmp	r2, r3
 8001344:	f4ff af7c 	bcc.w	8001240 <getPenaltyScore+0x178>
    for (uint8_t y = 0; y < size; y++) {
 8001348:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800134c:	3301      	adds	r3, #1
 800134e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001352:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	429a      	cmp	r2, r3
 800135a:	f4ff af6a 	bcc.w	8001232 <getPenaltyScore+0x16a>
        }
    }

    // Find smallest k such that (45-5k)% <= dark/total <= (55+5k)%
    uint16_t total = size * size;
 800135e:	7dfb      	ldrb	r3, [r7, #23]
 8001360:	b29a      	uxth	r2, r3
 8001362:	7dfb      	ldrb	r3, [r7, #23]
 8001364:	b29b      	uxth	r3, r3
 8001366:	fb12 f303 	smulbb	r3, r2, r3
 800136a:	82bb      	strh	r3, [r7, #20]
    for (uint16_t k = 0; black * 20 < (9 - k) * total || black * 20 > (11 + k) * total; k++) {
 800136c:	2300      	movs	r3, #0
 800136e:	833b      	strh	r3, [r7, #24]
 8001370:	e005      	b.n	800137e <getPenaltyScore+0x2b6>
        result += PENALTY_N4;
 8001372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001374:	330a      	adds	r3, #10
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint16_t k = 0; black * 20 < (9 - k) * total || black * 20 > (11 + k) * total; k++) {
 8001378:	8b3b      	ldrh	r3, [r7, #24]
 800137a:	3301      	adds	r3, #1
 800137c:	833b      	strh	r3, [r7, #24]
 800137e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4619      	mov	r1, r3
 800138a:	8b3b      	ldrh	r3, [r7, #24]
 800138c:	f1c3 0309 	rsb	r3, r3, #9
 8001390:	8aba      	ldrh	r2, [r7, #20]
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	4299      	cmp	r1, r3
 8001398:	dbeb      	blt.n	8001372 <getPenaltyScore+0x2aa>
 800139a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4619      	mov	r1, r3
 80013a6:	8b3b      	ldrh	r3, [r7, #24]
 80013a8:	330b      	adds	r3, #11
 80013aa:	8aba      	ldrh	r2, [r7, #20]
 80013ac:	fb02 f303 	mul.w	r3, r2, r3
 80013b0:	4299      	cmp	r1, r3
 80013b2:	dcde      	bgt.n	8001372 <getPenaltyScore+0x2aa>
    }
    
    return result;
 80013b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3734      	adds	r7, #52	; 0x34
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd90      	pop	{r4, r7, pc}

080013be <rs_multiply>:


//#pragma mark - Reed-Solomon Generator

static uint8_t rs_multiply(uint8_t x, uint8_t y) {
 80013be:	b480      	push	{r7}
 80013c0:	b085      	sub	sp, #20
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	460a      	mov	r2, r1
 80013c8:	71fb      	strb	r3, [r7, #7]
 80013ca:	4613      	mov	r3, r2
 80013cc:	71bb      	strb	r3, [r7, #6]
    // Russian peasant multiplication
    // See: https://en.wikipedia.org/wiki/Ancient_Egyptian_multiplication
    uint16_t z = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	81fb      	strh	r3, [r7, #14]
    for (int8_t i = 7; i >= 0; i--) {
 80013d2:	2307      	movs	r3, #7
 80013d4:	737b      	strb	r3, [r7, #13]
 80013d6:	e02c      	b.n	8001432 <rs_multiply+0x74>
        z = (z << 1) ^ ((z >> 7) * 0x11D);
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	b21a      	sxth	r2, r3
 80013de:	89fb      	ldrh	r3, [r7, #14]
 80013e0:	09db      	lsrs	r3, r3, #7
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	00c9      	lsls	r1, r1, #3
 80013e8:	4419      	add	r1, r3
 80013ea:	0049      	lsls	r1, r1, #1
 80013ec:	440b      	add	r3, r1
 80013ee:	4619      	mov	r1, r3
 80013f0:	0109      	lsls	r1, r1, #4
 80013f2:	1acb      	subs	r3, r1, r3
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	4053      	eors	r3, r2
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	81fb      	strh	r3, [r7, #14]
        z ^= ((y >> i) & 1) * x;
 80013fe:	79ba      	ldrb	r2, [r7, #6]
 8001400:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001404:	fa42 f303 	asr.w	r3, r2, r3
 8001408:	b29b      	uxth	r3, r3
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	b29a      	uxth	r2, r3
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	b29b      	uxth	r3, r3
 8001414:	fb12 f303 	smulbb	r3, r2, r3
 8001418:	b29b      	uxth	r3, r3
 800141a:	b21a      	sxth	r2, r3
 800141c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001420:	4053      	eors	r3, r2
 8001422:	b21b      	sxth	r3, r3
 8001424:	81fb      	strh	r3, [r7, #14]
    for (int8_t i = 7; i >= 0; i--) {
 8001426:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	3b01      	subs	r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	737b      	strb	r3, [r7, #13]
 8001432:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001436:	2b00      	cmp	r3, #0
 8001438:	dace      	bge.n	80013d8 <rs_multiply+0x1a>
    }
    return z;
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	b2db      	uxtb	r3, r3
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <rs_init>:

static void rs_init(uint8_t degree, uint8_t *coeff) {
 800144a:	b590      	push	{r4, r7, lr}
 800144c:	b085      	sub	sp, #20
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	6039      	str	r1, [r7, #0]
 8001454:	71fb      	strb	r3, [r7, #7]
    memset(coeff, 0, degree);
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	461a      	mov	r2, r3
 800145a:	2100      	movs	r1, #0
 800145c:	6838      	ldr	r0, [r7, #0]
 800145e:	f003 fbad 	bl	8004bbc <memset>
    coeff[degree - 1] = 1;
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	3b01      	subs	r3, #1
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	4413      	add	r3, r2
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
    
    // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),
    // drop the highest term, and store the rest of the coefficients in order of descending powers.
    // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).
    uint16_t root = 1;
 800146e:	2301      	movs	r3, #1
 8001470:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < degree; i++) {
 8001472:	2300      	movs	r3, #0
 8001474:	737b      	strb	r3, [r7, #13]
 8001476:	e040      	b.n	80014fa <rs_init+0xb0>
        // Multiply the current product by (x - r^i)
        for (uint8_t j = 0; j < degree; j++) {
 8001478:	2300      	movs	r3, #0
 800147a:	733b      	strb	r3, [r7, #12]
 800147c:	e023      	b.n	80014c6 <rs_init+0x7c>
            coeff[j] = rs_multiply(coeff[j], root);
 800147e:	7b3b      	ldrb	r3, [r7, #12]
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	4413      	add	r3, r2
 8001484:	7818      	ldrb	r0, [r3, #0]
 8001486:	89fb      	ldrh	r3, [r7, #14]
 8001488:	b2d9      	uxtb	r1, r3
 800148a:	7b3b      	ldrb	r3, [r7, #12]
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	18d4      	adds	r4, r2, r3
 8001490:	f7ff ff95 	bl	80013be <rs_multiply>
 8001494:	4603      	mov	r3, r0
 8001496:	7023      	strb	r3, [r4, #0]
            if (j + 1 < degree) {
 8001498:	7b3b      	ldrb	r3, [r7, #12]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	429a      	cmp	r2, r3
 80014a0:	da0e      	bge.n	80014c0 <rs_init+0x76>
                coeff[j] ^= coeff[j + 1];
 80014a2:	7b3b      	ldrb	r3, [r7, #12]
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	7819      	ldrb	r1, [r3, #0]
 80014aa:	7b3b      	ldrb	r3, [r7, #12]
 80014ac:	3301      	adds	r3, #1
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	781a      	ldrb	r2, [r3, #0]
 80014b4:	7b3b      	ldrb	r3, [r7, #12]
 80014b6:	6838      	ldr	r0, [r7, #0]
 80014b8:	4403      	add	r3, r0
 80014ba:	404a      	eors	r2, r1
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < degree; j++) {
 80014c0:	7b3b      	ldrb	r3, [r7, #12]
 80014c2:	3301      	adds	r3, #1
 80014c4:	733b      	strb	r3, [r7, #12]
 80014c6:	7b3a      	ldrb	r2, [r7, #12]
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d3d7      	bcc.n	800147e <rs_init+0x34>
            }
        }
        root = (root << 1) ^ ((root >> 7) * 0x11D);  // Multiply by 0x02 mod GF(2^8/0x11D)
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	89fb      	ldrh	r3, [r7, #14]
 80014d6:	09db      	lsrs	r3, r3, #7
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4619      	mov	r1, r3
 80014dc:	00c9      	lsls	r1, r1, #3
 80014de:	4419      	add	r1, r3
 80014e0:	0049      	lsls	r1, r1, #1
 80014e2:	440b      	add	r3, r1
 80014e4:	4619      	mov	r1, r3
 80014e6:	0109      	lsls	r1, r1, #4
 80014e8:	1acb      	subs	r3, r1, r3
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	4053      	eors	r3, r2
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < degree; i++) {
 80014f4:	7b7b      	ldrb	r3, [r7, #13]
 80014f6:	3301      	adds	r3, #1
 80014f8:	737b      	strb	r3, [r7, #13]
 80014fa:	7b7a      	ldrb	r2, [r7, #13]
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d3ba      	bcc.n	8001478 <rs_init+0x2e>
    }
}
 8001502:	bf00      	nop
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}

0800150c <rs_getRemainder>:

static void rs_getRemainder(uint8_t degree, uint8_t *coeff, uint8_t *data, uint8_t length, uint8_t *result, uint8_t stride) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	461a      	mov	r2, r3
 8001518:	4603      	mov	r3, r0
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	4613      	mov	r3, r2
 800151e:	73bb      	strb	r3, [r7, #14]
    // Compute the remainder by performing polynomial division
    
    //for (uint8_t i = 0; i < degree; i++) { result[] = 0; }
    //memset(result, 0, degree);
    
    for (uint8_t i = 0; i < length; i++) {
 8001520:	2300      	movs	r3, #0
 8001522:	75fb      	strb	r3, [r7, #23]
 8001524:	e05b      	b.n	80015de <rs_getRemainder+0xd2>
        uint8_t factor = data[i] ^ result[0];
 8001526:	7dfb      	ldrb	r3, [r7, #23]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	781a      	ldrb	r2, [r3, #0]
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	4053      	eors	r3, r2
 8001534:	753b      	strb	r3, [r7, #20]
        for (uint8_t j = 1; j < degree; j++) {
 8001536:	2301      	movs	r3, #1
 8001538:	75bb      	strb	r3, [r7, #22]
 800153a:	e015      	b.n	8001568 <rs_getRemainder+0x5c>
            result[(j - 1) * stride] = result[j * stride];
 800153c:	7dbb      	ldrb	r3, [r7, #22]
 800153e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	461a      	mov	r2, r3
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	441a      	add	r2, r3
 800154c:	7dbb      	ldrb	r3, [r7, #22]
 800154e:	3b01      	subs	r3, #1
 8001550:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4619      	mov	r1, r3
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	440b      	add	r3, r1
 800155e:	7812      	ldrb	r2, [r2, #0]
 8001560:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 1; j < degree; j++) {
 8001562:	7dbb      	ldrb	r3, [r7, #22]
 8001564:	3301      	adds	r3, #1
 8001566:	75bb      	strb	r3, [r7, #22]
 8001568:	7dba      	ldrb	r2, [r7, #22]
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	429a      	cmp	r2, r3
 800156e:	d3e5      	bcc.n	800153c <rs_getRemainder+0x30>
        }
        result[(degree - 1) * stride] = 0;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	3b01      	subs	r3, #1
 8001574:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001578:	fb02 f303 	mul.w	r3, r2, r3
 800157c:	461a      	mov	r2, r3
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	4413      	add	r3, r2
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
        
        for (uint8_t j = 0; j < degree; j++) {
 8001586:	2300      	movs	r3, #0
 8001588:	757b      	strb	r3, [r7, #21]
 800158a:	e021      	b.n	80015d0 <rs_getRemainder+0xc4>
            result[j * stride] ^= rs_multiply(coeff[j], factor);
 800158c:	7d7b      	ldrb	r3, [r7, #21]
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	4413      	add	r3, r2
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	7d3a      	ldrb	r2, [r7, #20]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff10 	bl	80013be <rs_multiply>
 800159e:	4603      	mov	r3, r0
 80015a0:	4618      	mov	r0, r3
 80015a2:	7d7b      	ldrb	r3, [r7, #21]
 80015a4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015a8:	fb02 f303 	mul.w	r3, r2, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	4413      	add	r3, r2
 80015b2:	781a      	ldrb	r2, [r3, #0]
 80015b4:	7d7b      	ldrb	r3, [r7, #21]
 80015b6:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80015ba:	fb01 f303 	mul.w	r3, r1, r3
 80015be:	4619      	mov	r1, r3
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	440b      	add	r3, r1
 80015c4:	4042      	eors	r2, r0
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < degree; j++) {
 80015ca:	7d7b      	ldrb	r3, [r7, #21]
 80015cc:	3301      	adds	r3, #1
 80015ce:	757b      	strb	r3, [r7, #21]
 80015d0:	7d7a      	ldrb	r2, [r7, #21]
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d3d9      	bcc.n	800158c <rs_getRemainder+0x80>
    for (uint8_t i = 0; i < length; i++) {
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	3301      	adds	r3, #1
 80015dc:	75fb      	strb	r3, [r7, #23]
 80015de:	7dfa      	ldrb	r2, [r7, #23]
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d39f      	bcc.n	8001526 <rs_getRemainder+0x1a>
        }
    }
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <encodeDataCodewords>:



//#pragma mark - QrCode

static int8_t encodeDataCodewords(BitBucket *dataCodewords, const uint8_t *text, uint16_t length, uint8_t version) {
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	4611      	mov	r1, r2
 80015fc:	461a      	mov	r2, r3
 80015fe:	460b      	mov	r3, r1
 8001600:	80fb      	strh	r3, [r7, #6]
 8001602:	4613      	mov	r3, r2
 8001604:	717b      	strb	r3, [r7, #5]
    int8_t mode = MODE_BYTE;
 8001606:	2302      	movs	r3, #2
 8001608:	77fb      	strb	r3, [r7, #31]
    
    if (isNumeric((char*)text, length)) {
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	4619      	mov	r1, r3
 800160e:	68b8      	ldr	r0, [r7, #8]
 8001610:	f7fe fe8b 	bl	800032a <isNumeric>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d050      	beq.n	80016bc <encodeDataCodewords+0xcc>
        mode = MODE_NUMERIC;
 800161a:	2300      	movs	r3, #0
 800161c:	77fb      	strb	r3, [r7, #31]
        bb_appendBits(dataCodewords, 1 << MODE_NUMERIC, 4);
 800161e:	2204      	movs	r2, #4
 8001620:	2101      	movs	r1, #1
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7fe ff32 	bl	800048c <bb_appendBits>
        bb_appendBits(dataCodewords, length, getModeBits(version, MODE_NUMERIC));
 8001628:	88fc      	ldrh	r4, [r7, #6]
 800162a:	797b      	ldrb	r3, [r7, #5]
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fe9c 	bl	800036c <getModeBits>
 8001634:	4603      	mov	r3, r0
 8001636:	461a      	mov	r2, r3
 8001638:	4621      	mov	r1, r4
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7fe ff26 	bl	800048c <bb_appendBits>

        uint16_t accumData = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	83bb      	strh	r3, [r7, #28]
        uint8_t accumCount = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	76fb      	strb	r3, [r7, #27]
        for (uint16_t i = 0; i < length; i++) {
 8001648:	2300      	movs	r3, #0
 800164a:	833b      	strh	r3, [r7, #24]
 800164c:	e021      	b.n	8001692 <encodeDataCodewords+0xa2>
            accumData = accumData * 10 + ((char)(text[i]) - '0');
 800164e:	8bbb      	ldrh	r3, [r7, #28]
 8001650:	461a      	mov	r2, r3
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	4413      	add	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	b29a      	uxth	r2, r3
 800165a:	8b3b      	ldrh	r3, [r7, #24]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	440b      	add	r3, r1
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	4413      	add	r3, r2
 8001666:	b29b      	uxth	r3, r3
 8001668:	3b30      	subs	r3, #48	; 0x30
 800166a:	83bb      	strh	r3, [r7, #28]
            accumCount++;
 800166c:	7efb      	ldrb	r3, [r7, #27]
 800166e:	3301      	adds	r3, #1
 8001670:	76fb      	strb	r3, [r7, #27]
            if (accumCount == 3) {
 8001672:	7efb      	ldrb	r3, [r7, #27]
 8001674:	2b03      	cmp	r3, #3
 8001676:	d109      	bne.n	800168c <encodeDataCodewords+0x9c>
                bb_appendBits(dataCodewords, accumData, 10);
 8001678:	8bbb      	ldrh	r3, [r7, #28]
 800167a:	220a      	movs	r2, #10
 800167c:	4619      	mov	r1, r3
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7fe ff04 	bl	800048c <bb_appendBits>
                accumData = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	83bb      	strh	r3, [r7, #28]
                accumCount = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	76fb      	strb	r3, [r7, #27]
        for (uint16_t i = 0; i < length; i++) {
 800168c:	8b3b      	ldrh	r3, [r7, #24]
 800168e:	3301      	adds	r3, #1
 8001690:	833b      	strh	r3, [r7, #24]
 8001692:	8b3a      	ldrh	r2, [r7, #24]
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	429a      	cmp	r2, r3
 8001698:	d3d9      	bcc.n	800164e <encodeDataCodewords+0x5e>
            }
        }
        
        // 1 or 2 digits remaining
        if (accumCount > 0) {
 800169a:	7efb      	ldrb	r3, [r7, #27]
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 8087 	beq.w	80017b0 <encodeDataCodewords+0x1c0>
            bb_appendBits(dataCodewords, accumData, accumCount * 3 + 1);
 80016a2:	8bb9      	ldrh	r1, [r7, #28]
 80016a4:	7efb      	ldrb	r3, [r7, #27]
 80016a6:	461a      	mov	r2, r3
 80016a8:	0052      	lsls	r2, r2, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	3301      	adds	r3, #1
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7fe fee9 	bl	800048c <bb_appendBits>
 80016ba:	e079      	b.n	80017b0 <encodeDataCodewords+0x1c0>
        }
        
    } else if (isAlphanumeric((char*)text, length)) {
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	4619      	mov	r1, r3
 80016c0:	68b8      	ldr	r0, [r7, #8]
 80016c2:	f7fe fe13 	bl	80002ec <isAlphanumeric>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d04d      	beq.n	8001768 <encodeDataCodewords+0x178>
        mode = MODE_ALPHANUMERIC;
 80016cc:	2301      	movs	r3, #1
 80016ce:	77fb      	strb	r3, [r7, #31]
        bb_appendBits(dataCodewords, 1 << MODE_ALPHANUMERIC, 4);
 80016d0:	2204      	movs	r2, #4
 80016d2:	2102      	movs	r1, #2
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f7fe fed9 	bl	800048c <bb_appendBits>
        bb_appendBits(dataCodewords, length, getModeBits(version, MODE_ALPHANUMERIC));
 80016da:	88fc      	ldrh	r4, [r7, #6]
 80016dc:	797b      	ldrb	r3, [r7, #5]
 80016de:	2101      	movs	r1, #1
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fe43 	bl	800036c <getModeBits>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4621      	mov	r1, r4
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f7fe fecd 	bl	800048c <bb_appendBits>

        uint16_t accumData = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	82fb      	strh	r3, [r7, #22]
        uint8_t accumCount = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	757b      	strb	r3, [r7, #21]
        for (uint16_t i = 0; i  < length; i++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	827b      	strh	r3, [r7, #18]
 80016fe:	e025      	b.n	800174c <encodeDataCodewords+0x15c>
            accumData = accumData * 45 + getAlphanumeric((char)(text[i]));
 8001700:	8afb      	ldrh	r3, [r7, #22]
 8001702:	461a      	mov	r2, r3
 8001704:	0052      	lsls	r2, r2, #1
 8001706:	4413      	add	r3, r2
 8001708:	461a      	mov	r2, r3
 800170a:	0112      	lsls	r2, r2, #4
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	b29c      	uxth	r4, r3
 8001710:	8a7b      	ldrh	r3, [r7, #18]
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4413      	add	r3, r2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe fd75 	bl	8000208 <getAlphanumeric>
 800171e:	4603      	mov	r3, r0
 8001720:	b29b      	uxth	r3, r3
 8001722:	4423      	add	r3, r4
 8001724:	82fb      	strh	r3, [r7, #22]
            accumCount++;
 8001726:	7d7b      	ldrb	r3, [r7, #21]
 8001728:	3301      	adds	r3, #1
 800172a:	757b      	strb	r3, [r7, #21]
            if (accumCount == 2) {
 800172c:	7d7b      	ldrb	r3, [r7, #21]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d109      	bne.n	8001746 <encodeDataCodewords+0x156>
                bb_appendBits(dataCodewords, accumData, 11);
 8001732:	8afb      	ldrh	r3, [r7, #22]
 8001734:	220b      	movs	r2, #11
 8001736:	4619      	mov	r1, r3
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7fe fea7 	bl	800048c <bb_appendBits>
                accumData = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	82fb      	strh	r3, [r7, #22]
                accumCount = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	757b      	strb	r3, [r7, #21]
        for (uint16_t i = 0; i  < length; i++) {
 8001746:	8a7b      	ldrh	r3, [r7, #18]
 8001748:	3301      	adds	r3, #1
 800174a:	827b      	strh	r3, [r7, #18]
 800174c:	8a7a      	ldrh	r2, [r7, #18]
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	429a      	cmp	r2, r3
 8001752:	d3d5      	bcc.n	8001700 <encodeDataCodewords+0x110>
            }
        }
        
        // 1 character remaining
        if (accumCount > 0) {
 8001754:	7d7b      	ldrb	r3, [r7, #21]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d02a      	beq.n	80017b0 <encodeDataCodewords+0x1c0>
            bb_appendBits(dataCodewords, accumData, 6);
 800175a:	8afb      	ldrh	r3, [r7, #22]
 800175c:	2206      	movs	r2, #6
 800175e:	4619      	mov	r1, r3
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7fe fe93 	bl	800048c <bb_appendBits>
 8001766:	e023      	b.n	80017b0 <encodeDataCodewords+0x1c0>
        }
        
    } else {
        bb_appendBits(dataCodewords, 1 << MODE_BYTE, 4);
 8001768:	2204      	movs	r2, #4
 800176a:	2104      	movs	r1, #4
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f7fe fe8d 	bl	800048c <bb_appendBits>
        bb_appendBits(dataCodewords, length, getModeBits(version, MODE_BYTE));
 8001772:	88fc      	ldrh	r4, [r7, #6]
 8001774:	797b      	ldrb	r3, [r7, #5]
 8001776:	2102      	movs	r1, #2
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fdf7 	bl	800036c <getModeBits>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	4621      	mov	r1, r4
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f7fe fe81 	bl	800048c <bb_appendBits>
        for (uint16_t i = 0; i < length; i++) {
 800178a:	2300      	movs	r3, #0
 800178c:	823b      	strh	r3, [r7, #16]
 800178e:	e00b      	b.n	80017a8 <encodeDataCodewords+0x1b8>
            bb_appendBits(dataCodewords, (char)(text[i]), 8);
 8001790:	8a3b      	ldrh	r3, [r7, #16]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	4413      	add	r3, r2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2208      	movs	r2, #8
 800179a:	4619      	mov	r1, r3
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7fe fe75 	bl	800048c <bb_appendBits>
        for (uint16_t i = 0; i < length; i++) {
 80017a2:	8a3b      	ldrh	r3, [r7, #16]
 80017a4:	3301      	adds	r3, #1
 80017a6:	823b      	strh	r3, [r7, #16]
 80017a8:	8a3a      	ldrh	r2, [r7, #16]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d3ef      	bcc.n	8001790 <encodeDataCodewords+0x1a0>
        }
    }
    
    //bb_setBits(dataCodewords, length, 4, getModeBits(version, mode));
    
    return mode;
 80017b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3724      	adds	r7, #36	; 0x24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd90      	pop	{r4, r7, pc}

080017bc <performErrorCorrection>:

static void performErrorCorrection(uint8_t version, uint8_t ecc, BitBucket *data) {
 80017bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017c0:	b093      	sub	sp, #76	; 0x4c
 80017c2:	af02      	add	r7, sp, #8
 80017c4:	4603      	mov	r3, r0
 80017c6:	60ba      	str	r2, [r7, #8]
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	460b      	mov	r3, r1
 80017cc:	73bb      	strb	r3, [r7, #14]
 80017ce:	466b      	mov	r3, sp
 80017d0:	461e      	mov	r6, r3
    
    // See: http://www.thonky.com/qr-code-tutorial/structure-final-message
    
#if LOCK_VERSION == 0
    uint8_t numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecc][version - 1];
 80017d2:	7bba      	ldrb	r2, [r7, #14]
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	1e59      	subs	r1, r3, #1
 80017d8:	48b4      	ldr	r0, [pc, #720]	; (8001aac <performErrorCorrection+0x2f0>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4403      	add	r3, r0
 80017e4:	440b      	add	r3, r1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t totalEcc = NUM_ERROR_CORRECTION_CODEWORDS[ecc][version - 1];
 80017ec:	7bba      	ldrb	r2, [r7, #14]
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	1e59      	subs	r1, r3, #1
 80017f2:	48af      	ldr	r0, [pc, #700]	; (8001ab0 <performErrorCorrection+0x2f4>)
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001802:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t moduleCount = NUM_RAW_DATA_MODULES[version - 1];
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	3b01      	subs	r3, #1
 8001808:	4aaa      	ldr	r2, [pc, #680]	; (8001ab4 <performErrorCorrection+0x2f8>)
 800180a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800180e:	853b      	strh	r3, [r7, #40]	; 0x28
    uint8_t numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecc];
    uint16_t totalEcc = NUM_ERROR_CORRECTION_CODEWORDS[ecc];
    uint16_t moduleCount = NUM_RAW_DATA_MODULES;
#endif
    
    uint8_t blockEccLen = totalEcc / numBlocks;
 8001810:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001812:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001816:	fb92 f3f3 	sdiv	r3, r2, r3
 800181a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t numShortBlocks = numBlocks - moduleCount / 8 % numBlocks;
 800181e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001820:	08db      	lsrs	r3, r3, #3
 8001822:	b29b      	uxth	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800182a:	fb92 f1f3 	sdiv	r1, r2, r3
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t shortBlockLen = moduleCount / 8 / numBlocks;
 8001840:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001842:	08db      	lsrs	r3, r3, #3
 8001844:	b29b      	uxth	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800184c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001850:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    
    uint8_t shortDataBlockLen = shortBlockLen - blockEccLen;
 8001854:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    
    uint8_t result[data->capacityBytes];
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	8899      	ldrh	r1, [r3, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	3b01      	subs	r3, #1
 800186a:	623b      	str	r3, [r7, #32]
 800186c:	b28b      	uxth	r3, r1
 800186e:	2200      	movs	r2, #0
 8001870:	603b      	str	r3, [r7, #0]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	00c3      	lsls	r3, r0, #3
 8001880:	6838      	ldr	r0, [r7, #0]
 8001882:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001886:	6838      	ldr	r0, [r7, #0]
 8001888:	00c2      	lsls	r2, r0, #3
 800188a:	b28b      	uxth	r3, r1
 800188c:	2200      	movs	r2, #0
 800188e:	469a      	mov	sl, r3
 8001890:	4693      	mov	fp, r2
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800189e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018a6:	460b      	mov	r3, r1
 80018a8:	3307      	adds	r3, #7
 80018aa:	08db      	lsrs	r3, r3, #3
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	ebad 0d03 	sub.w	sp, sp, r3
 80018b2:	ab02      	add	r3, sp, #8
 80018b4:	3300      	adds	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
    memset(result, 0, sizeof(result));
 80018b8:	460b      	mov	r3, r1
 80018ba:	461a      	mov	r2, r3
 80018bc:	2100      	movs	r1, #0
 80018be:	69f8      	ldr	r0, [r7, #28]
 80018c0:	f003 f97c 	bl	8004bbc <memset>
    
    uint8_t coeff[blockEccLen];
 80018c4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80018c8:	460b      	mov	r3, r1
 80018ca:	3b01      	subs	r3, #1
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	b2cb      	uxtb	r3, r1
 80018d0:	2200      	movs	r2, #0
 80018d2:	4698      	mov	r8, r3
 80018d4:	4691      	mov	r9, r2
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018ea:	b2cb      	uxtb	r3, r1
 80018ec:	2200      	movs	r2, #0
 80018ee:	461c      	mov	r4, r3
 80018f0:	4615      	mov	r5, r2
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	00eb      	lsls	r3, r5, #3
 80018fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001900:	00e2      	lsls	r2, r4, #3
 8001902:	460b      	mov	r3, r1
 8001904:	3307      	adds	r3, #7
 8001906:	08db      	lsrs	r3, r3, #3
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	ebad 0d03 	sub.w	sp, sp, r3
 800190e:	ab02      	add	r3, sp, #8
 8001910:	3300      	adds	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
    rs_init(blockEccLen, coeff);
 8001914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001918:	6979      	ldr	r1, [r7, #20]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fd95 	bl	800144a <rs_init>
    
    uint16_t offset = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	867b      	strh	r3, [r7, #50]	; 0x32
    uint8_t *dataBytes = data->data;
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
    
    
    // Interleave all short blocks
    for (uint8_t i = 0; i < shortDataBlockLen; i++) {
 800192a:	2300      	movs	r3, #0
 800192c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001930:	e035      	b.n	800199e <performErrorCorrection+0x1e2>
        uint16_t index = i;
 8001932:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001936:	877b      	strh	r3, [r7, #58]	; 0x3a
        uint8_t stride = shortDataBlockLen;
 8001938:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800193c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 8001940:	2300      	movs	r3, #0
 8001942:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001946:	e01f      	b.n	8001988 <performErrorCorrection+0x1cc>
            result[offset++] = dataBytes[index];
 8001948:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800194a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800194c:	441a      	add	r2, r3
 800194e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001950:	1c59      	adds	r1, r3, #1
 8001952:	8679      	strh	r1, [r7, #50]	; 0x32
 8001954:	4619      	mov	r1, r3
 8001956:	7812      	ldrb	r2, [r2, #0]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	545a      	strb	r2, [r3, r1]
            
#if LOCK_VERSION == 0 || LOCK_VERSION >= 5
            if (blockNum == numShortBlocks) { stride++; }
 800195c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001960:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001964:	429a      	cmp	r2, r3
 8001966:	d104      	bne.n	8001972 <performErrorCorrection+0x1b6>
 8001968:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800196c:	3301      	adds	r3, #1
 800196e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
#endif
            index += stride;
 8001972:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001976:	b29a      	uxth	r2, r3
 8001978:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800197a:	4413      	add	r3, r2
 800197c:	877b      	strh	r3, [r7, #58]	; 0x3a
        for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 800197e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001982:	3301      	adds	r3, #1
 8001984:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001988:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800198c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001990:	429a      	cmp	r2, r3
 8001992:	d3d9      	bcc.n	8001948 <performErrorCorrection+0x18c>
    for (uint8_t i = 0; i < shortDataBlockLen; i++) {
 8001994:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001998:	3301      	adds	r3, #1
 800199a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800199e:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80019a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d3c3      	bcc.n	8001932 <performErrorCorrection+0x176>
    
    // Version less than 5 only have short blocks
#if LOCK_VERSION == 0 || LOCK_VERSION >= 5
    {
        // Interleave long blocks
        uint16_t index = shortDataBlockLen * (numShortBlocks + 1);
 80019aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019b4:	3301      	adds	r3, #1
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	fb12 f303 	smulbb	r3, r2, r3
 80019bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        uint8_t stride = shortDataBlockLen;
 80019be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019c2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        for (uint8_t blockNum = 0; blockNum < numBlocks - numShortBlocks; blockNum++) {
 80019c6:	2300      	movs	r3, #0
 80019c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80019cc:	e01d      	b.n	8001a0a <performErrorCorrection+0x24e>
            result[offset++] = dataBytes[index];
 80019ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019d2:	441a      	add	r2, r3
 80019d4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80019d6:	1c59      	adds	r1, r3, #1
 80019d8:	8679      	strh	r1, [r7, #50]	; 0x32
 80019da:	4619      	mov	r1, r3
 80019dc:	7812      	ldrb	r2, [r2, #0]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	545a      	strb	r2, [r3, r1]
            
            if (blockNum == 0) { stride++; }
 80019e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d104      	bne.n	80019f4 <performErrorCorrection+0x238>
 80019ea:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80019ee:	3301      	adds	r3, #1
 80019f0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            index += stride;
 80019f4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019fc:	4413      	add	r3, r2
 80019fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
        for (uint8_t blockNum = 0; blockNum < numBlocks - numShortBlocks; blockNum++) {
 8001a00:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a04:	3301      	adds	r3, #1
 8001a06:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8001a0a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001a0e:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8001a12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a16:	1acb      	subs	r3, r1, r3
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbd8      	blt.n	80019ce <performErrorCorrection+0x212>
        }
    }
#endif
    
    // Add all ecc blocks, interleaved
    uint8_t blockSize = shortDataBlockLen;
 8001a1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001a2a:	e027      	b.n	8001a7c <performErrorCorrection+0x2c0>
        
#if LOCK_VERSION == 0 || LOCK_VERSION >= 5
        if (blockNum == numShortBlocks) { blockSize++; }
 8001a2c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001a30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d104      	bne.n	8001a42 <performErrorCorrection+0x286>
 8001a38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif
        rs_getRemainder(blockEccLen, coeff, dataBytes, blockSize, &result[offset + blockNum], numBlocks);
 8001a42:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001a44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a48:	4413      	add	r3, r2
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8001a52:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8001a56:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001a5a:	9201      	str	r2, [sp, #4]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a62:	6979      	ldr	r1, [r7, #20]
 8001a64:	f7ff fd52 	bl	800150c <rs_getRemainder>
        dataBytes += blockSize;
 8001a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a6e:	4413      	add	r3, r2
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
    for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 8001a72:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a76:	3301      	adds	r3, #1
 8001a78:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001a7c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001a80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d3d1      	bcc.n	8001a2c <performErrorCorrection+0x270>
    }
    
    memcpy(data->data, result, data->capacityBytes);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	6898      	ldr	r0, [r3, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	889b      	ldrh	r3, [r3, #4]
 8001a90:	461a      	mov	r2, r3
 8001a92:	69f9      	ldr	r1, [r7, #28]
 8001a94:	f003 f884 	bl	8004ba0 <memcpy>
    data->bitOffsetOrWidth = moduleCount;
 8001a98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	46b5      	mov	sp, r6
}
 8001aa0:	bf00      	nop
 8001aa2:	3744      	adds	r7, #68	; 0x44
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aaa:	bf00      	nop
 8001aac:	08004d24 	.word	0x08004d24
 8001ab0:	08004be4 	.word	0x08004be4
 8001ab4:	08004dc4 	.word	0x08004dc4

08001ab8 <qrcode_getBufferSize>:
static const uint8_t ECC_FORMAT_BITS = (0x02 << 6) | (0x03 << 4) | (0x00 << 2) | (0x01 << 0);


//#pragma mark - Public QRCode functions

uint16_t qrcode_getBufferSize(uint8_t version) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
    return bb_getGridSizeBytes(4 * version + 17);
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	3311      	adds	r3, #17
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fc7f 	bl	80003d0 <bb_getGridSizeBytes>
 8001ad2:	4603      	mov	r3, r0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <qrcode_initBytes>:

// @TODO: Return error if data is too big.
int8_t qrcode_initBytes(QRCode *qrcode, uint8_t *modules, uint8_t version, uint8_t ecc, uint8_t *data, uint16_t length) {
 8001adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae0:	b09d      	sub	sp, #116	; 0x74
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6178      	str	r0, [r7, #20]
 8001ae6:	6139      	str	r1, [r7, #16]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	461a      	mov	r2, r3
 8001aec:	460b      	mov	r3, r1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	4613      	mov	r3, r2
 8001af2:	73bb      	strb	r3, [r7, #14]
 8001af4:	466b      	mov	r3, sp
 8001af6:	60bb      	str	r3, [r7, #8]
    uint8_t size = version * 4 + 17;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	3311      	adds	r3, #17
 8001b00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    qrcode->version = version;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	701a      	strb	r2, [r3, #0]
    qrcode->size = size;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001b10:	705a      	strb	r2, [r3, #1]
    qrcode->ecc = ecc;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	7bba      	ldrb	r2, [r7, #14]
 8001b16:	709a      	strb	r2, [r3, #2]
    qrcode->modules = modules;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	609a      	str	r2, [r3, #8]
    
    uint8_t eccFormatBits = (ECC_FORMAT_BITS >> (2 * ecc)) & 0x03;
 8001b1e:	23b1      	movs	r3, #177	; 0xb1
 8001b20:	461a      	mov	r2, r3
 8001b22:	7bbb      	ldrb	r3, [r7, #14]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	fa42 f303 	asr.w	r3, r2, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    
#if LOCK_VERSION == 0
    uint16_t moduleCount = NUM_RAW_DATA_MODULES[version - 1];
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	4aac      	ldr	r2, [pc, #688]	; (8001dec <qrcode_initBytes+0x310>)
 8001b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b3e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint16_t dataCapacity = moduleCount / 8 - NUM_ERROR_CORRECTION_CODEWORDS[eccFormatBits][version - 1];
 8001b42:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001b46:	08db      	lsrs	r3, r3, #3
 8001b48:	b299      	uxth	r1, r3
 8001b4a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	1e58      	subs	r0, r3, #1
 8001b52:	4ea7      	ldr	r6, [pc, #668]	; (8001df0 <qrcode_initBytes+0x314>)
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4403      	add	r3, r0
 8001b5e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8001b62:	1acb      	subs	r3, r1, r3
 8001b64:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    uint16_t moduleCount = NUM_RAW_DATA_MODULES;
    uint16_t dataCapacity = moduleCount / 8 - NUM_ERROR_CORRECTION_CODEWORDS[eccFormatBits];
#endif
    
    struct BitBucket codewords;
    uint8_t codewordBytes[bb_getBufferSizeBytes(moduleCount)];
 8001b68:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fc44 	bl	80003fa <bb_getBufferSizeBytes>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4619      	mov	r1, r3
 8001b76:	460b      	mov	r3, r1
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8001b7c:	b28b      	uxth	r3, r1
 8001b7e:	2200      	movs	r2, #0
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	00c3      	lsls	r3, r0, #3
 8001b90:	6838      	ldr	r0, [r7, #0]
 8001b92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b96:	6838      	ldr	r0, [r7, #0]
 8001b98:	00c2      	lsls	r2, r0, #3
 8001b9a:	b28b      	uxth	r3, r1
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	469a      	mov	sl, r3
 8001ba0:	4693      	mov	fp, r2
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001bae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001bb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	3307      	adds	r3, #7
 8001bba:	08db      	lsrs	r3, r3, #3
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	ebad 0d03 	sub.w	sp, sp, r3
 8001bc2:	466b      	mov	r3, sp
 8001bc4:	3300      	adds	r3, #0
 8001bc6:	653b      	str	r3, [r7, #80]	; 0x50
    bb_initBuffer(&codewords, codewordBytes, (int32_t)sizeof(codewordBytes));
 8001bc8:	460a      	mov	r2, r1
 8001bca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fc20 	bl	8000416 <bb_initBuffer>
    
    // Place the data code words into the buffer
    int8_t mode = encodeDataCodewords(&codewords, data, length, version);
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8001bdc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001be0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001be4:	f7ff fd04 	bl	80015f0 <encodeDataCodewords>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
    if (mode < 0) { return -1; }
 8001bee:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	da02      	bge.n	8001bfc <qrcode_initBytes+0x120>
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	e0ef      	b.n	8001ddc <qrcode_initBytes+0x300>
    qrcode->mode = mode;
 8001bfc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	70da      	strb	r2, [r3, #3]
    
    // Add terminator and pad up to a byte if applicable
    uint32_t padding = (dataCapacity * 8) - codewords.bitOffsetOrWidth;
 8001c04:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	663b      	str	r3, [r7, #96]	; 0x60
    if (padding > 4) { padding = 4; }
 8001c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d901      	bls.n	8001c1c <qrcode_initBytes+0x140>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	663b      	str	r3, [r7, #96]	; 0x60
    bb_appendBits(&codewords, 0, padding);
 8001c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc30 	bl	800048c <bb_appendBits>
    bb_appendBits(&codewords, 0, (8 - codewords.bitOffsetOrWidth % 8) % 8);
 8001c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	425b      	negs	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fc23 	bl	800048c <bb_appendBits>

    // Pad with alternate bytes until data capacity is reached
    for (uint8_t padByte = 0xEC; codewords.bitOffsetOrWidth < (dataCapacity * 8); padByte ^= 0xEC ^ 0x11) {
 8001c46:	23ec      	movs	r3, #236	; 0xec
 8001c48:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001c4c:	e00e      	b.n	8001c6c <qrcode_initBytes+0x190>
        bb_appendBits(&codewords, padByte, 8);
 8001c4e:	f897 1066 	ldrb.w	r1, [r7, #102]	; 0x66
 8001c52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c56:	2208      	movs	r2, #8
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc17 	bl	800048c <bb_appendBits>
    for (uint8_t padByte = 0xEC; codewords.bitOffsetOrWidth < (dataCapacity * 8); padByte ^= 0xEC ^ 0x11) {
 8001c5e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001c62:	f083 0302 	eor.w	r3, r3, #2
 8001c66:	43db      	mvns	r3, r3
 8001c68:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8001c72:	00d2      	lsls	r2, r2, #3
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d3ea      	bcc.n	8001c4e <qrcode_initBytes+0x172>
    }

    BitBucket modulesGrid;
    bb_initGrid(&modulesGrid, modules, size);
 8001c78:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001c7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c80:	6939      	ldr	r1, [r7, #16]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fbe2 	bl	800044c <bb_initGrid>
    
    BitBucket isFunctionGrid;
    uint8_t isFunctionGridBytes[bb_getGridSizeBytes(size)];
 8001c88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fb9f 	bl	80003d0 <bb_getGridSizeBytes>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4619      	mov	r1, r3
 8001c96:	466b      	mov	r3, sp
 8001c98:	461e      	mov	r6, r3
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ca0:	b28b      	uxth	r3, r1
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4698      	mov	r8, r3
 8001ca6:	4691      	mov	r9, r2
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cb4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cb8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cbc:	b28b      	uxth	r3, r1
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	461c      	mov	r4, r3
 8001cc2:	4615      	mov	r5, r2
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	00eb      	lsls	r3, r5, #3
 8001cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cd2:	00e2      	lsls	r2, r4, #3
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	3307      	adds	r3, #7
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	ebad 0d03 	sub.w	sp, sp, r3
 8001ce0:	466b      	mov	r3, sp
 8001ce2:	3300      	adds	r3, #0
 8001ce4:	647b      	str	r3, [r7, #68]	; 0x44
    bb_initGrid(&isFunctionGrid, isFunctionGridBytes, size);
 8001ce6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fbab 	bl	800044c <bb_initGrid>
    
    // Draw function patterns, draw all codewords, do masking
    drawFunctionPatterns(&modulesGrid, &isFunctionGrid, version, eccFormatBits);
 8001cf6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	f107 011c 	add.w	r1, r7, #28
 8001d00:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001d04:	f7ff f81a 	bl	8000d3c <drawFunctionPatterns>
    performErrorCorrection(version, eccFormatBits, &codewords);
 8001d08:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d0c:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fd52 	bl	80017bc <performErrorCorrection>
    drawCodewords(&modulesGrid, &isFunctionGrid, &codewords);
 8001d18:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d1c:	f107 011c 	add.w	r1, r7, #28
 8001d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff f93f 	bl	8000fa8 <drawCodewords>
    
    // Find the best (lowest penalty) mask
    uint8_t mask = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    int32_t minPenalty = INT32_MAX;
 8001d30:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001d34:	66bb      	str	r3, [r7, #104]	; 0x68
    for (uint8_t i = 0; i < 8; i++) {
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001d3c:	e031      	b.n	8001da2 <qrcode_initBytes+0x2c6>
        drawFormatBits(&modulesGrid, &isFunctionGrid, eccFormatBits, i);
 8001d3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d42:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001d46:	f107 011c 	add.w	r1, r7, #28
 8001d4a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001d4e:	f7fe fe8c 	bl	8000a6a <drawFormatBits>
        applyMask(&modulesGrid, &isFunctionGrid, i);
 8001d52:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001d56:	f107 011c 	add.w	r1, r7, #28
 8001d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fcaa 	bl	80006b8 <applyMask>
        int penalty = getPenaltyScore(&modulesGrid);
 8001d64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff f9ad 	bl	80010c8 <getPenaltyScore>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	643b      	str	r3, [r7, #64]	; 0x40
        if (penalty < minPenalty) {
 8001d72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d76:	429a      	cmp	r2, r3
 8001d78:	da05      	bge.n	8001d86 <qrcode_initBytes+0x2aa>
            mask = i;
 8001d7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            minPenalty = penalty;
 8001d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d84:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        applyMask(&modulesGrid, &isFunctionGrid, i);  // Undoes the mask due to XOR
 8001d86:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001d8a:	f107 011c 	add.w	r1, r7, #28
 8001d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fc90 	bl	80006b8 <applyMask>
    for (uint8_t i = 0; i < 8; i++) {
 8001d98:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001da2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001da6:	2b07      	cmp	r3, #7
 8001da8:	d9c9      	bls.n	8001d3e <qrcode_initBytes+0x262>
    }
    
    qrcode->mask = mask;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001db0:	711a      	strb	r2, [r3, #4]
    
    // Overwrite old format bits
    drawFormatBits(&modulesGrid, &isFunctionGrid, eccFormatBits, mask);
 8001db2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001db6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001dba:	f107 011c 	add.w	r1, r7, #28
 8001dbe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001dc2:	f7fe fe52 	bl	8000a6a <drawFormatBits>
    
    // Apply the final choice of mask
    applyMask(&modulesGrid, &isFunctionGrid, mask);
 8001dc6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001dca:	f107 011c 	add.w	r1, r7, #28
 8001dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fc70 	bl	80006b8 <applyMask>

    return 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	46b5      	mov	sp, r6
 8001ddc:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3774      	adds	r7, #116	; 0x74
 8001de4:	46bd      	mov	sp, r7
 8001de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dea:	bf00      	nop
 8001dec:	08004dc4 	.word	0x08004dc4
 8001df0:	08004be4 	.word	0x08004be4

08001df4 <qrcode_initText>:

int8_t qrcode_initText(QRCode *qrcode, uint8_t *modules, uint8_t version, uint8_t ecc, const char *data) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	461a      	mov	r2, r3
 8001e02:	460b      	mov	r3, r1
 8001e04:	71fb      	strb	r3, [r7, #7]
 8001e06:	4613      	mov	r3, r2
 8001e08:	71bb      	strb	r3, [r7, #6]
    return qrcode_initBytes(qrcode, modules, version, ecc, (uint8_t*)data, strlen(data));
 8001e0a:	69b8      	ldr	r0, [r7, #24]
 8001e0c:	f7fe f9e2 	bl	80001d4 <strlen>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	79b9      	ldrb	r1, [r7, #6]
 8001e16:	79fa      	ldrb	r2, [r7, #7]
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff fe5a 	bl	8001adc <qrcode_initBytes>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <qrcode_getModule>:

bool qrcode_getModule(QRCode *qrcode, uint8_t x, uint8_t y) {
 8001e32:	b480      	push	{r7}
 8001e34:	b085      	sub	sp, #20
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	70fb      	strb	r3, [r7, #3]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	70bb      	strb	r3, [r7, #2]
    if (x < 0 || x >= qrcode->size || y < 0 || y >= qrcode->size) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	785b      	ldrb	r3, [r3, #1]
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d204      	bcs.n	8001e56 <qrcode_getModule+0x24>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	785b      	ldrb	r3, [r3, #1]
 8001e50:	78ba      	ldrb	r2, [r7, #2]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d301      	bcc.n	8001e5a <qrcode_getModule+0x28>
        return false;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e01b      	b.n	8001e92 <qrcode_getModule+0x60>
    }

    uint32_t offset = y * qrcode->size + x;
 8001e5a:	78bb      	ldrb	r3, [r7, #2]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	7852      	ldrb	r2, [r2, #1]
 8001e60:	fb03 f202 	mul.w	r2, r3, r2
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
    return (qrcode->modules[offset >> 3] & (1 << (7 - (offset & 0x07)))) != 0;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	08db      	lsrs	r3, r3, #3
 8001e72:	4413      	add	r3, r2
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	fa42 f303 	asr.w	r3, r2, r3
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <main>:
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/


int main(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
	uint8_t byRxData[11];

	appInitCommon();
 8001ea6:	f000 f827 	bl	8001ef8 <appInitCommon>

    /* Loop forever */
	while(1)
	{
		processTimerScheduler();
 8001eaa:	f000 ffb1 	bl	8002e10 <processTimerScheduler>
		if(bufNumItems(&pUartRxQueue)>=12)
 8001eae:	4811      	ldr	r0, [pc, #68]	; (8001ef4 <main+0x54>)
 8001eb0:	f002 f857 	bl	8003f62 <bufNumItems>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b0b      	cmp	r3, #11
 8001eb8:	d9f7      	bls.n	8001eaa <main+0xa>
		{
			while(bufNumItems(&pUartRxQueue) !=0)
 8001eba:	e00f      	b.n	8001edc <main+0x3c>
					{
						for(int i = 0; i < 12;i++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e009      	b.n	8001ed6 <main+0x36>
						{
							bufDeDat(&pUartRxQueue, &byRxData[i]);
 8001ec2:	463a      	mov	r2, r7
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480a      	ldr	r0, [pc, #40]	; (8001ef4 <main+0x54>)
 8001ecc:	f002 f8e2 	bl	8004094 <bufDeDat>
						for(int i = 0; i < 12;i++)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b0b      	cmp	r3, #11
 8001eda:	ddf2      	ble.n	8001ec2 <main+0x22>
			while(bufNumItems(&pUartRxQueue) !=0)
 8001edc:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <main+0x54>)
 8001ede:	f002 f840 	bl	8003f62 <bufNumItems>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1e9      	bne.n	8001ebc <main+0x1c>

						}
					}
			generateQRCode((char *)byRxData);
 8001ee8:	463b      	mov	r3, r7
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 f892 	bl	8002014 <generateQRCode>
		processTimerScheduler();
 8001ef0:	e7db      	b.n	8001eaa <main+0xa>
 8001ef2:	bf00      	nop
 8001ef4:	200001f4 	.word	0x200001f4

08001ef8 <appInitCommon>:
 * @param  None
 * @retval None
 */

static void appInitCommon(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af02      	add	r7, sp, #8
	SystemCoreClockUpdate();
 8001efe:	f000 fa0d 	bl	800231c <SystemCoreClockUpdate>
	serialUartInit();
 8001f02:	f000 f821 	bl	8001f48 <serialUartInit>
	//Khoi tao cai dat cho lcd
	TimerInit();
 8001f06:	f000 ff05 	bl	8002d14 <TimerInit>
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	480d      	ldr	r0, [pc, #52]	; (8001f44 <appInitCommon+0x4c>)
 8001f0e:	f001 f9d5 	bl	80032bc <Ucglib4WireSWSPI_begin>
	ucg_ClearScreen(&ucg);
 8001f12:	480c      	ldr	r0, [pc, #48]	; (8001f44 <appInitCommon+0x4c>)
 8001f14:	f001 fa19 	bl	800334a <ucg_ClearScreen>
	ucg_SetColor(&ucg, 0, 255, 255, 255);//khoi tao mau chu la mau trang
 8001f18:	23ff      	movs	r3, #255	; 0xff
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	23ff      	movs	r3, #255	; 0xff
 8001f1e:	22ff      	movs	r2, #255	; 0xff
 8001f20:	2100      	movs	r1, #0
 8001f22:	4808      	ldr	r0, [pc, #32]	; (8001f44 <appInitCommon+0x4c>)
 8001f24:	f001 fec7 	bl	8003cb6 <ucg_SetColor>
	ucg_SetColor(&ucg, 1, 0, 0, 0);// khoi tao mau backgroud la mau den
 8001f28:	2300      	movs	r3, #0
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2101      	movs	r1, #1
 8001f32:	4804      	ldr	r0, [pc, #16]	; (8001f44 <appInitCommon+0x4c>)
 8001f34:	f001 febf 	bl	8003cb6 <ucg_SetColor>
	ucg_SetRotate180(&ucg);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <appInitCommon+0x4c>)
 8001f3a:	f001 ffdd 	bl	8003ef8 <ucg_SetRotate180>
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000040 	.word	0x20000040

08001f48 <serialUartInit>:
 * @brief  Usart & Buffer initialization
 * @param  None
 * @retval None
 */
static void serialUartInit(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
	//1. Khoi tao bo dem chua du lieu gui ve
	bufInit(pBuffDataRx, &pUartRxQueue, sizeof(pBuffDataRx[0]), SIZE_BUFF_DATA_RX);
 8001f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f50:	2201      	movs	r2, #1
 8001f52:	4904      	ldr	r1, [pc, #16]	; (8001f64 <serialUartInit+0x1c>)
 8001f54:	4804      	ldr	r0, [pc, #16]	; (8001f68 <serialUartInit+0x20>)
 8001f56:	f001 ffe9 	bl	8003f2c <bufInit>

	//2. Khoi tao ket noi USART2
	usartInit();
 8001f5a:	f000 f807 	bl	8001f6c <usartInit>
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200001f4 	.word	0x200001f4
 8001f68:	200000f4 	.word	0x200000f4

08001f6c <usartInit>:
 * @brief  Usart initialization
 * @param  None
 * @retval None
 */
static void usartInit(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef	GPIO_InitStruct;
		USART_InitTypeDef	USART_InitStruct;
		NVIC_InitTypeDef	NVIC_InitStruct;

		//1. Configuare GPIO & AF
		RCC_AHB1PeriphClockCmd(USART6_GPIO_RCC, ENABLE);
 8001f72:	2101      	movs	r1, #1
 8001f74:	2001      	movs	r0, #1
 8001f76:	f000 fc97 	bl	80028a8 <RCC_AHB1PeriphClockCmd>

		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	773b      	strb	r3, [r7, #28]
		GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	77bb      	strb	r3, [r7, #30]
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	77fb      	strb	r3, [r7, #31]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8001f86:	2303      	movs	r3, #3
 8001f88:	777b      	strb	r3, [r7, #29]

		GPIO_InitStruct.GPIO_Pin = USART6_PIN_RX;
 8001f8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8e:	61bb      	str	r3, [r7, #24]
		GPIO_Init(USART6_PORT, &GPIO_InitStruct);
 8001f90:	f107 0318 	add.w	r3, r7, #24
 8001f94:	4619      	mov	r1, r3
 8001f96:	481d      	ldr	r0, [pc, #116]	; (800200c <usartInit+0xa0>)
 8001f98:	f000 faee 	bl	8002578 <GPIO_Init>

		GPIO_PinAFConfig(USART6_PORT, USART6_PINSOURCE_RX, USART6_AF);
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	210c      	movs	r1, #12
 8001fa0:	481a      	ldr	r0, [pc, #104]	; (800200c <usartInit+0xa0>)
 8001fa2:	f000 fb8f 	bl	80026c4 <GPIO_PinAFConfig>
		//2. Configuare USART6: Bus APB2
		RCC_APB2PeriphClockCmd(USART6_RCC, ENABLE);
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	2020      	movs	r0, #32
 8001faa:	f000 fc9d 	bl	80028e8 <RCC_APB2PeriphClockCmd>

		USART_InitStruct.USART_BaudRate = USART6_BAUDRATE;
 8001fae:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001fb2:	60bb      	str	r3, [r7, #8]
		USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	82bb      	strh	r3, [r7, #20]
		USART_InitStruct.USART_Mode = USART_Mode_Rx;
 8001fb8:	2304      	movs	r3, #4
 8001fba:	827b      	strh	r3, [r7, #18]
		USART_InitStruct.USART_Parity = USART_Parity_No;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	823b      	strh	r3, [r7, #16]
		USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	81fb      	strh	r3, [r7, #14]
		USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	81bb      	strh	r3, [r7, #12]

		USART_Init(USART6,&USART_InitStruct);
 8001fc8:	f107 0308 	add.w	r3, r7, #8
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4810      	ldr	r0, [pc, #64]	; (8002010 <usartInit+0xa4>)
 8001fd0:	f000 fcaa 	bl	8002928 <USART_Init>

		//3. Enable USART6 Receive intterupt
		USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f240 5125 	movw	r1, #1317	; 0x525
 8001fda:	480d      	ldr	r0, [pc, #52]	; (8002010 <usartInit+0xa4>)
 8001fdc:	f000 fd8e 	bl	8002afc <USART_ITConfig>

		//4. Configuare NVIC
		NVIC_InitStruct.NVIC_IRQChannel = USART6_IRQn;
 8001fe0:	2347      	movs	r3, #71	; 0x47
 8001fe2:	713b      	strb	r3, [r7, #4]
		NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	71fb      	strb	r3, [r7, #7]
		NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	717b      	strb	r3, [r7, #5]
		NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	71bb      	strb	r3, [r7, #6]

		NVIC_InitStruct.NVIC_IRQChannel = USART6_IRQn;
 8001ff0:	2347      	movs	r3, #71	; 0x47
 8001ff2:	713b      	strb	r3, [r7, #4]
		NVIC_Init(&NVIC_InitStruct);
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fa5c 	bl	80024b4 <NVIC_Init>

		//5. ENABLE USART6
		USART_Cmd(USART6, ENABLE);
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	4804      	ldr	r0, [pc, #16]	; (8002010 <usartInit+0xa4>)
 8002000:	f000 fd4c 	bl	8002a9c <USART_Cmd>
}
 8002004:	bf00      	nop
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40020000 	.word	0x40020000
 8002010:	40011400 	.word	0x40011400

08002014 <generateQRCode>:
 * @brief  Pintf qr_code in LCD
 * @param  data
 * @retval None
 */
void generateQRCode(char *pByData)
{
 8002014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002018:	b091      	sub	sp, #68	; 0x44
 800201a:	af02      	add	r7, sp, #8
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	466b      	mov	r3, sp
 8002020:	461e      	mov	r6, r3
	  // Create the QR code
	    QRCode qrcode;

	    const uint8_t byEcc = 0;  //lowest level of error correction
 8002022:	2300      	movs	r3, #0
 8002024:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	    const uint8_t byVersion = 1;
 8002028:	2301      	movs	r3, #1
 800202a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	    uint8_t pbyQrcodeData[qrcode_getBufferSize(byVersion)];
 800202e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fd40 	bl	8001ab8 <qrcode_getBufferSize>
 8002038:	4603      	mov	r3, r0
 800203a:	4619      	mov	r1, r3
 800203c:	460b      	mov	r3, r1
 800203e:	3b01      	subs	r3, #1
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002042:	b28b      	uxth	r3, r1
 8002044:	2200      	movs	r2, #0
 8002046:	4698      	mov	r8, r3
 8002048:	4691      	mov	r9, r2
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800205a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800205e:	b28b      	uxth	r3, r1
 8002060:	2200      	movs	r2, #0
 8002062:	461c      	mov	r4, r3
 8002064:	4615      	mov	r5, r2
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	00eb      	lsls	r3, r5, #3
 8002070:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002074:	00e2      	lsls	r2, r4, #3
 8002076:	460b      	mov	r3, r1
 8002078:	3307      	adds	r3, #7
 800207a:	08db      	lsrs	r3, r3, #3
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	ebad 0d03 	sub.w	sp, sp, r3
 8002082:	ab02      	add	r3, sp, #8
 8002084:	3300      	adds	r3, #0
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28

	    qrcode_initText(&qrcode,
 8002088:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 800208c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8002090:	f107 000c 	add.w	r0, r7, #12
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	460b      	mov	r3, r1
 800209a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800209c:	f7ff feaa 	bl	8001df4 <qrcode_initText>
	                    pbyQrcodeData,
	                    byVersion,
						byEcc,
						pByData);
	    const uint8_t byXyScale = 4;
 80020a0:	2304      	movs	r3, #4
 80020a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    //LCD TFT 128x128 pixel
	    const uint8_t byWidth = 128;
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	    const uint8_t byHeight = 128;
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    uint8_t byXmax = byWidth/2;
 80020b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    uint8_t byYmax = byHeight/2;
 80020bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80020c0:	085b      	lsrs	r3, r3, #1
 80020c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	    uint8_t byOffset = (byXyScale*qrcode.size);
 80020c6:	7b7b      	ldrb	r3, [r7, #13]
 80020c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80020cc:	fb12 f303 	smulbb	r3, r2, r3
 80020d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	    uint8_t byX1 = byXmax - (byOffset/2);
 80020d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80020d8:	085b      	lsrs	r3, r3, #1
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    uint8_t byY1 = byYmax - (byOffset/2);
 80020e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f887 3020 	strb.w	r3, [r7, #32]


	    uint8_t byPx1 = byX1;
 80020f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80020fc:	77fb      	strb	r3, [r7, #31]
	    uint8_t byPy1 = byY1;
 80020fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002102:	77bb      	strb	r3, [r7, #30]

	    uint8_t byPx2 = byPx1;
 8002104:	7ffb      	ldrb	r3, [r7, #31]
 8002106:	777b      	strb	r3, [r7, #29]
	    uint8_t byPy2 = byPy1;
 8002108:	7fbb      	ldrb	r3, [r7, #30]
 800210a:	773b      	strb	r3, [r7, #28]

	    ucg_SetColor(&ucg, 0, 255, 255, 255);
 800210c:	23ff      	movs	r3, #255	; 0xff
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	23ff      	movs	r3, #255	; 0xff
 8002112:	22ff      	movs	r2, #255	; 0xff
 8002114:	2100      	movs	r1, #0
 8002116:	483e      	ldr	r0, [pc, #248]	; (8002210 <generateQRCode+0x1fc>)
 8002118:	f001 fdcd 	bl	8003cb6 <ucg_SetColor>
	    ucg_ClearScreen(&ucg);
 800211c:	483c      	ldr	r0, [pc, #240]	; (8002210 <generateQRCode+0x1fc>)
 800211e:	f001 f914 	bl	800334a <ucg_ClearScreen>
	    // Top quiet zone
	    for (uint8_t y = 0; y < qrcode.size; y++) {
 8002122:	2300      	movs	r3, #0
 8002124:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002128:	e066      	b.n	80021f8 <generateQRCode+0x1e4>
	        for(uint8_t x = 0; x < qrcode.size; x++) {
 800212a:	2300      	movs	r3, #0
 800212c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002130:	e058      	b.n	80021e4 <generateQRCode+0x1d0>
	            bool mod = qrcode_getModule(&qrcode,x, y);
 8002132:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002136:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fe77 	bl	8001e32 <qrcode_getModule>
 8002144:	4603      	mov	r3, r0
 8002146:	76fb      	strb	r3, [r7, #27]
	            byPx1 = byX1 + x * byXyScale;
 8002148:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800214c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002150:	fb12 f303 	smulbb	r3, r2, r3
 8002154:	b2da      	uxtb	r2, r3
 8002156:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800215a:	4413      	add	r3, r2
 800215c:	77fb      	strb	r3, [r7, #31]
	            byPy1 = byX1 + y * byXyScale;
 800215e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002166:	fb12 f303 	smulbb	r3, r2, r3
 800216a:	b2da      	uxtb	r2, r3
 800216c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002170:	4413      	add	r3, r2
 8002172:	77bb      	strb	r3, [r7, #30]
	            byPx2 = byPx1 + byXyScale;
 8002174:	7ffa      	ldrb	r2, [r7, #31]
 8002176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800217a:	4413      	add	r3, r2
 800217c:	777b      	strb	r3, [r7, #29]
	            byPy2 = byPy1 + byXyScale;
 800217e:	7fba      	ldrb	r2, [r7, #30]
 8002180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002184:	4413      	add	r3, r2
 8002186:	773b      	strb	r3, [r7, #28]
	            if(mod){
 8002188:	7efb      	ldrb	r3, [r7, #27]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d025      	beq.n	80021da <generateQRCode+0x1c6>
	            	for(uint8_t i =byPx1;i<=byPx2;i++)
 800218e:	7ffb      	ldrb	r3, [r7, #31]
 8002190:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002194:	e01c      	b.n	80021d0 <generateQRCode+0x1bc>
	            	{
	            		for(uint8_t k = byPy1; k<= byPy2;k++)
 8002196:	7fbb      	ldrb	r3, [r7, #30]
 8002198:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800219c:	e00e      	b.n	80021bc <generateQRCode+0x1a8>
	            		{
	            			ucg_DrawPixel(&ucg, i, k);
 800219e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80021a8:	b212      	sxth	r2, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	4818      	ldr	r0, [pc, #96]	; (8002210 <generateQRCode+0x1fc>)
 80021ae:	f001 fdb0 	bl	8003d12 <ucg_DrawPixel>
	            		for(uint8_t k = byPy1; k<= byPy2;k++)
 80021b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80021b6:	3301      	adds	r3, #1
 80021b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80021bc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80021c0:	7f3b      	ldrb	r3, [r7, #28]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d9eb      	bls.n	800219e <generateQRCode+0x18a>
	            	for(uint8_t i =byPx1;i<=byPx2;i++)
 80021c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80021ca:	3301      	adds	r3, #1
 80021cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80021d0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80021d4:	7f7b      	ldrb	r3, [r7, #29]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d9dd      	bls.n	8002196 <generateQRCode+0x182>
	        for(uint8_t x = 0; x < qrcode.size; x++) {
 80021da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021de:	3301      	adds	r3, #1
 80021e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80021e4:	7b7b      	ldrb	r3, [r7, #13]
 80021e6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d3a1      	bcc.n	8002132 <generateQRCode+0x11e>
	    for (uint8_t y = 0; y < qrcode.size; y++) {
 80021ee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021f2:	3301      	adds	r3, #1
 80021f4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80021f8:	7b7b      	ldrb	r3, [r7, #13]
 80021fa:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80021fe:	429a      	cmp	r2, r3
 8002200:	d393      	bcc.n	800212a <generateQRCode+0x116>
 8002202:	46b5      	mov	sp, r6

	            }
	        }
	    }

}
 8002204:	bf00      	nop
 8002206:	373c      	adds	r7, #60	; 0x3c
 8002208:	46bd      	mov	sp, r7
 800220a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800220e:	bf00      	nop
 8002210:	20000040 	.word	0x20000040

08002214 <USART6x_IRQHandler>:
 * @brief
 * @param  None
 * @retval None
 */
void USART6x_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
	uint8_t byData;
	if(USART_GetITStatus(USART6, USART_IT_RXNE) == SET)
 800221a:	f240 5125 	movw	r1, #1317	; 0x525
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <USART6x_IRQHandler+0x40>)
 8002220:	f000 fcb4 	bl	8002b8c <USART_GetITStatus>
 8002224:	4603      	mov	r3, r0
 8002226:	2b01      	cmp	r3, #1
 8002228:	d10f      	bne.n	800224a <USART6x_IRQHandler+0x36>
	{
		byData = USART_ReceiveData(USART6);
 800222a:	480a      	ldr	r0, [pc, #40]	; (8002254 <USART6x_IRQHandler+0x40>)
 800222c:	f000 fc56 	bl	8002adc <USART_ReceiveData>
 8002230:	4603      	mov	r3, r0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	71fb      	strb	r3, [r7, #7]
		bufEnDat(&pUartRxQueue,&byData);
 8002236:	1dfb      	adds	r3, r7, #7
 8002238:	4619      	mov	r1, r3
 800223a:	4807      	ldr	r0, [pc, #28]	; (8002258 <USART6x_IRQHandler+0x44>)
 800223c:	f001 fedc 	bl	8003ff8 <bufEnDat>
		USART_ClearITPendingBit(USART6, USART_IT_RXNE);
 8002240:	f240 5125 	movw	r1, #1317	; 0x525
 8002244:	4803      	ldr	r0, [pc, #12]	; (8002254 <USART6x_IRQHandler+0x40>)
 8002246:	f000 fcfc 	bl	8002c42 <USART_ClearITPendingBit>
	}
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40011400 	.word	0x40011400
 8002258:	200001f4 	.word	0x200001f4

0800225c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800225c:	480d      	ldr	r0, [pc, #52]	; (8002294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800225e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002260:	f000 f826 	bl	80022b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <LoopForever+0x6>)
  ldr r1, =_edata
 8002266:	490d      	ldr	r1, [pc, #52]	; (800229c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002268:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <LoopForever+0xe>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800226c:	e002      	b.n	8002274 <LoopCopyDataInit>

0800226e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002272:	3304      	adds	r3, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002278:	d3f9      	bcc.n	800226e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800227c:	4c0a      	ldr	r4, [pc, #40]	; (80022a8 <LoopForever+0x16>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002280:	e001      	b.n	8002286 <LoopFillZerobss>

08002282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002284:	3204      	adds	r2, #4

08002286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002288:	d3fb      	bcc.n	8002282 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800228a:	f002 fc65 	bl	8004b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800228e:	f7ff fe07 	bl	8001ea0 <main>

08002292 <LoopForever>:

LoopForever:
    b LoopForever
 8002292:	e7fe      	b.n	8002292 <LoopForever>
  ldr   r0, =_estack
 8002294:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80022a0:	08004efc 	.word	0x08004efc
  ldr r2, =_sbss
 80022a4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80022a8:	20000388 	.word	0x20000388

080022ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <ADC_IRQHandler>
	...

080022b0 <SystemInit>:
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <SystemInit+0x60>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	4a15      	ldr	r2, [pc, #84]	; (8002310 <SystemInit+0x60>)
 80022bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80022c4:	4b13      	ldr	r3, [pc, #76]	; (8002314 <SystemInit+0x64>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a12      	ldr	r2, [pc, #72]	; (8002314 <SystemInit+0x64>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b10      	ldr	r3, [pc, #64]	; (8002314 <SystemInit+0x64>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <SystemInit+0x64>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <SystemInit+0x64>)
 80022dc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80022e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <SystemInit+0x64>)
 80022e8:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <SystemInit+0x68>)
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <SystemInit+0x64>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a08      	ldr	r2, [pc, #32]	; (8002314 <SystemInit+0x64>)
 80022f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <SystemInit+0x64>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	f000 f889 	bl	8002414 <SetSysClock>
 8002302:	4b03      	ldr	r3, [pc, #12]	; (8002310 <SystemInit+0x60>)
 8002304:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	e000ed00 	.word	0xe000ed00
 8002314:	40023800 	.word	0x40023800
 8002318:	24003010 	.word	0x24003010

0800231c <SystemCoreClockUpdate>:
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	2302      	movs	r3, #2
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	2302      	movs	r3, #2
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	4b32      	ldr	r3, [pc, #200]	; (8002400 <SystemCoreClockUpdate+0xe4>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	2b04      	cmp	r3, #4
 8002344:	d007      	beq.n	8002356 <SystemCoreClockUpdate+0x3a>
 8002346:	2b08      	cmp	r3, #8
 8002348:	d009      	beq.n	800235e <SystemCoreClockUpdate+0x42>
 800234a:	2b00      	cmp	r3, #0
 800234c:	d13d      	bne.n	80023ca <SystemCoreClockUpdate+0xae>
 800234e:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <SystemCoreClockUpdate+0xe8>)
 8002350:	4a2d      	ldr	r2, [pc, #180]	; (8002408 <SystemCoreClockUpdate+0xec>)
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e03d      	b.n	80023d2 <SystemCoreClockUpdate+0xb6>
 8002356:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <SystemCoreClockUpdate+0xe8>)
 8002358:	4a2c      	ldr	r2, [pc, #176]	; (800240c <SystemCoreClockUpdate+0xf0>)
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e039      	b.n	80023d2 <SystemCoreClockUpdate+0xb6>
 800235e:	4b28      	ldr	r3, [pc, #160]	; (8002400 <SystemCoreClockUpdate+0xe4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	0d9b      	lsrs	r3, r3, #22
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	4b25      	ldr	r3, [pc, #148]	; (8002400 <SystemCoreClockUpdate+0xe4>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00c      	beq.n	8002394 <SystemCoreClockUpdate+0x78>
 800237a:	4a24      	ldr	r2, [pc, #144]	; (800240c <SystemCoreClockUpdate+0xf0>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <SystemCoreClockUpdate+0xe4>)
 8002384:	6852      	ldr	r2, [r2, #4]
 8002386:	0992      	lsrs	r2, r2, #6
 8002388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800238c:	fb02 f303 	mul.w	r3, r2, r3
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	e00b      	b.n	80023ac <SystemCoreClockUpdate+0x90>
 8002394:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <SystemCoreClockUpdate+0xec>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	4a18      	ldr	r2, [pc, #96]	; (8002400 <SystemCoreClockUpdate+0xe4>)
 800239e:	6852      	ldr	r2, [r2, #4]
 80023a0:	0992      	lsrs	r2, r2, #6
 80023a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <SystemCoreClockUpdate+0xe4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	0c1b      	lsrs	r3, r3, #16
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	3301      	adds	r3, #1
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c4:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <SystemCoreClockUpdate+0xe8>)
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	e003      	b.n	80023d2 <SystemCoreClockUpdate+0xb6>
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <SystemCoreClockUpdate+0xe8>)
 80023cc:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <SystemCoreClockUpdate+0xec>)
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	bf00      	nop
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <SystemCoreClockUpdate+0xe4>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <SystemCoreClockUpdate+0xf4>)
 80023de:	5cd3      	ldrb	r3, [r2, r3]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <SystemCoreClockUpdate+0xe8>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	fa22 f303 	lsr.w	r3, r2, r3
 80023ee:	4a05      	ldr	r2, [pc, #20]	; (8002404 <SystemCoreClockUpdate+0xe8>)
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800
 8002404:	20000000 	.word	0x20000000
 8002408:	00f42400 	.word	0x00f42400
 800240c:	017d7840 	.word	0x017d7840
 8002410:	20000004 	.word	0x20000004

08002414 <SetSysClock>:
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
 8002418:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <SetSysClock+0x90>)
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <SetSysClock+0x90>)
 800241e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002422:	6413      	str	r3, [r2, #64]	; 0x40
 8002424:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <SetSysClock+0x94>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1f      	ldr	r2, [pc, #124]	; (80024a8 <SetSysClock+0x94>)
 800242a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <SetSysClock+0x90>)
 8002432:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <SetSysClock+0x90>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	6093      	str	r3, [r2, #8]
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <SetSysClock+0x90>)
 800243a:	4a1a      	ldr	r2, [pc, #104]	; (80024a4 <SetSysClock+0x90>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	6093      	str	r3, [r2, #8]
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <SetSysClock+0x90>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a17      	ldr	r2, [pc, #92]	; (80024a4 <SetSysClock+0x90>)
 8002446:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800244a:	6093      	str	r3, [r2, #8]
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <SetSysClock+0x90>)
 800244e:	4a17      	ldr	r2, [pc, #92]	; (80024ac <SetSysClock+0x98>)
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <SetSysClock+0x90>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <SetSysClock+0x90>)
 8002458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	bf00      	nop
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <SetSysClock+0x90>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f9      	beq.n	8002460 <SetSysClock+0x4c>
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <SetSysClock+0x9c>)
 800246e:	f240 6202 	movw	r2, #1538	; 0x602
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <SetSysClock+0x90>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <SetSysClock+0x90>)
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	6093      	str	r3, [r2, #8]
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <SetSysClock+0x90>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <SetSysClock+0x90>)
 8002486:	f043 0302 	orr.w	r3, r3, #2
 800248a:	6093      	str	r3, [r2, #8]
 800248c:	bf00      	nop
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <SetSysClock+0x90>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b08      	cmp	r3, #8
 8002498:	d1f9      	bne.n	800248e <SetSysClock+0x7a>
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40007000 	.word	0x40007000
 80024ac:	08015410 	.word	0x08015410
 80024b0:	40023c00 	.word	0x40023c00

080024b4 <NVIC_Init>:
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	2300      	movs	r3, #0
 80024c2:	73bb      	strb	r3, [r7, #14]
 80024c4:	230f      	movs	r3, #15
 80024c6:	737b      	strb	r3, [r7, #13]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	78db      	ldrb	r3, [r3, #3]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d039      	beq.n	8002544 <NVIC_Init+0x90>
 80024d0:	4b27      	ldr	r3, [pc, #156]	; (8002570 <NVIC_Init+0xbc>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	73fb      	strb	r3, [r7, #15]
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	f1c3 0304 	rsb	r3, r3, #4
 80024e6:	73bb      	strb	r3, [r7, #14]
 80024e8:	7b7a      	ldrb	r2, [r7, #13]
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	fa42 f303 	asr.w	r3, r2, r3
 80024f0:	737b      	strb	r3, [r7, #13]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	785b      	ldrb	r3, [r3, #1]
 80024f6:	461a      	mov	r2, r3
 80024f8:	7bbb      	ldrb	r3, [r7, #14]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	789a      	ldrb	r2, [r3, #2]
 8002504:	7b7b      	ldrb	r3, [r7, #13]
 8002506:	4013      	ands	r3, r2
 8002508:	b2da      	uxtb	r2, r3
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	4313      	orrs	r3, r2
 800250e:	73fb      	strb	r3, [r7, #15]
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	73fb      	strb	r3, [r7, #15]
 8002516:	4a17      	ldr	r2, [pc, #92]	; (8002574 <NVIC_Init+0xc0>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4413      	add	r3, r2
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	4911      	ldr	r1, [pc, #68]	; (8002574 <NVIC_Init+0xc0>)
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	7812      	ldrb	r2, [r2, #0]
 8002532:	0952      	lsrs	r2, r2, #5
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	4610      	mov	r0, r2
 8002538:	2201      	movs	r2, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 8002542:	e00f      	b.n	8002564 <NVIC_Init+0xb0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	4909      	ldr	r1, [pc, #36]	; (8002574 <NVIC_Init+0xc0>)
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	7812      	ldrb	r2, [r2, #0]
 8002552:	0952      	lsrs	r2, r2, #5
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	4610      	mov	r0, r2
 8002558:	2201      	movs	r2, #1
 800255a:	409a      	lsls	r2, r3
 800255c:	f100 0320 	add.w	r3, r0, #32
 8002560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00
 8002574:	e000e100 	.word	0xe000e100

08002578 <GPIO_Init>:
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	e076      	b.n	8002682 <GPIO_Init+0x10a>
 8002594:	2201      	movs	r2, #1
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d165      	bne.n	800267c <GPIO_Init+0x104>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	2103      	movs	r1, #3
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	401a      	ands	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	791b      	ldrb	r3, [r3, #4]
 80025ce:	4619      	mov	r1, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	791b      	ldrb	r3, [r3, #4]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d003      	beq.n	80025ee <GPIO_Init+0x76>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	791b      	ldrb	r3, [r3, #4]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d12e      	bne.n	800264c <GPIO_Init+0xd4>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2103      	movs	r1, #3
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	401a      	ands	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	795b      	ldrb	r3, [r3, #5]
 800260c:	4619      	mov	r1, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	b29b      	uxth	r3, r3
 8002624:	4619      	mov	r1, r3
 8002626:	2301      	movs	r3, #1
 8002628:	408b      	lsls	r3, r1
 800262a:	43db      	mvns	r3, r3
 800262c:	401a      	ands	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	7992      	ldrb	r2, [r2, #6]
 800263a:	4611      	mov	r1, r2
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	b292      	uxth	r2, r2
 8002640:	fa01 f202 	lsl.w	r2, r1, r2
 8002644:	b292      	uxth	r2, r2
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	b29b      	uxth	r3, r3
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2103      	movs	r1, #3
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	401a      	ands	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	60da      	str	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	79db      	ldrb	r3, [r3, #7]
 800266c:	4619      	mov	r1, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	60da      	str	r2, [r3, #12]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	3301      	adds	r3, #1
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b0f      	cmp	r3, #15
 8002686:	d985      	bls.n	8002594 <GPIO_Init+0x1c>
 8002688:	bf00      	nop
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <GPIO_WriteBit>:
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
 80026a0:	4613      	mov	r3, r2
 80026a2:	707b      	strb	r3, [r7, #1]
 80026a4:	787b      	ldrb	r3, [r7, #1]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <GPIO_WriteBit+0x1e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	887a      	ldrh	r2, [r7, #2]
 80026ae:	831a      	strh	r2, [r3, #24]
 80026b0:	e002      	b.n	80026b8 <GPIO_WriteBit+0x24>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	835a      	strh	r2, [r3, #26]
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <GPIO_PinAFConfig>:
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
 80026d0:	4613      	mov	r3, r2
 80026d2:	707b      	strb	r3, [r7, #1]
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	2300      	movs	r3, #0
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	787a      	ldrb	r2, [r7, #1]
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	887b      	ldrh	r3, [r7, #2]
 80026ee:	08db      	lsrs	r3, r3, #3
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3208      	adds	r2, #8
 80026f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026fc:	887b      	ldrh	r3, [r7, #2]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	210f      	movs	r1, #15
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	8879      	ldrh	r1, [r7, #2]
 800270e:	08c9      	lsrs	r1, r1, #3
 8002710:	b289      	uxth	r1, r1
 8002712:	4608      	mov	r0, r1
 8002714:	ea02 0103 	and.w	r1, r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f100 0208 	add.w	r2, r0, #8
 800271e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002722:	887b      	ldrh	r3, [r7, #2]
 8002724:	08db      	lsrs	r3, r3, #3
 8002726:	b29b      	uxth	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3208      	adds	r2, #8
 800272e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	887b      	ldrh	r3, [r7, #2]
 800273a:	08db      	lsrs	r3, r3, #3
 800273c:	b29b      	uxth	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3208      	adds	r2, #8
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <RCC_GetClocksFreq>:
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	2300      	movs	r3, #0
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	2302      	movs	r3, #2
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	2302      	movs	r3, #2
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	4b47      	ldr	r3, [pc, #284]	; (8002898 <RCC_GetClocksFreq+0x140>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2b04      	cmp	r3, #4
 8002786:	d007      	beq.n	8002798 <RCC_GetClocksFreq+0x40>
 8002788:	2b08      	cmp	r3, #8
 800278a:	d009      	beq.n	80027a0 <RCC_GetClocksFreq+0x48>
 800278c:	2b00      	cmp	r3, #0
 800278e:	d13d      	bne.n	800280c <RCC_GetClocksFreq+0xb4>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a42      	ldr	r2, [pc, #264]	; (800289c <RCC_GetClocksFreq+0x144>)
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	e03d      	b.n	8002814 <RCC_GetClocksFreq+0xbc>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a41      	ldr	r2, [pc, #260]	; (80028a0 <RCC_GetClocksFreq+0x148>)
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	e039      	b.n	8002814 <RCC_GetClocksFreq+0xbc>
 80027a0:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <RCC_GetClocksFreq+0x140>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	0d9b      	lsrs	r3, r3, #22
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	4b3a      	ldr	r3, [pc, #232]	; (8002898 <RCC_GetClocksFreq+0x140>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00c      	beq.n	80027d6 <RCC_GetClocksFreq+0x7e>
 80027bc:	4a38      	ldr	r2, [pc, #224]	; (80028a0 <RCC_GetClocksFreq+0x148>)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	4a34      	ldr	r2, [pc, #208]	; (8002898 <RCC_GetClocksFreq+0x140>)
 80027c6:	6852      	ldr	r2, [r2, #4]
 80027c8:	0992      	lsrs	r2, r2, #6
 80027ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ce:	fb02 f303 	mul.w	r3, r2, r3
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	e00b      	b.n	80027ee <RCC_GetClocksFreq+0x96>
 80027d6:	4a31      	ldr	r2, [pc, #196]	; (800289c <RCC_GetClocksFreq+0x144>)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	4a2e      	ldr	r2, [pc, #184]	; (8002898 <RCC_GetClocksFreq+0x140>)
 80027e0:	6852      	ldr	r2, [r2, #4]
 80027e2:	0992      	lsrs	r2, r2, #6
 80027e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027e8:	fb02 f303 	mul.w	r3, r2, r3
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <RCC_GetClocksFreq+0x140>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	0c1b      	lsrs	r3, r3, #16
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	3301      	adds	r3, #1
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	fbb2 f2f3 	udiv	r2, r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e003      	b.n	8002814 <RCC_GetClocksFreq+0xbc>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a23      	ldr	r2, [pc, #140]	; (800289c <RCC_GetClocksFreq+0x144>)
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	bf00      	nop
 8002814:	4b20      	ldr	r3, [pc, #128]	; (8002898 <RCC_GetClocksFreq+0x140>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	61bb      	str	r3, [r7, #24]
 8002824:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <RCC_GetClocksFreq+0x14c>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4413      	add	r3, r2
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	40da      	lsrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <RCC_GetClocksFreq+0x140>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	0a9b      	lsrs	r3, r3, #10
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <RCC_GetClocksFreq+0x14c>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	4413      	add	r3, r2
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	40da      	lsrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <RCC_GetClocksFreq+0x140>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	0b5b      	lsrs	r3, r3, #13
 8002872:	61bb      	str	r3, [r7, #24]
 8002874:	4a0b      	ldr	r2, [pc, #44]	; (80028a4 <RCC_GetClocksFreq+0x14c>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4413      	add	r3, r2
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	40da      	lsrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	60da      	str	r2, [r3, #12]
 800288c:	bf00      	nop
 800288e:	3724      	adds	r7, #36	; 0x24
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	40023800 	.word	0x40023800
 800289c:	00f42400 	.word	0x00f42400
 80028a0:	017d7840 	.word	0x017d7840
 80028a4:	20000014 	.word	0x20000014

080028a8 <RCC_AHB1PeriphClockCmd>:
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	70fb      	strb	r3, [r7, #3]
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d006      	beq.n	80028c8 <RCC_AHB1PeriphClockCmd+0x20>
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80028bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028be:	4909      	ldr	r1, [pc, #36]	; (80028e4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	630b      	str	r3, [r1, #48]	; 0x30
 80028c6:	e006      	b.n	80028d6 <RCC_AHB1PeriphClockCmd+0x2e>
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80028ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	4904      	ldr	r1, [pc, #16]	; (80028e4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	630b      	str	r3, [r1, #48]	; 0x30
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800

080028e8 <RCC_APB2PeriphClockCmd>:
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	70fb      	strb	r3, [r7, #3]
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d006      	beq.n	8002908 <RCC_APB2PeriphClockCmd+0x20>
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <RCC_APB2PeriphClockCmd+0x3c>)
 80028fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028fe:	4909      	ldr	r1, [pc, #36]	; (8002924 <RCC_APB2PeriphClockCmd+0x3c>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4313      	orrs	r3, r2
 8002904:	644b      	str	r3, [r1, #68]	; 0x44
 8002906:	e006      	b.n	8002916 <RCC_APB2PeriphClockCmd+0x2e>
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <RCC_APB2PeriphClockCmd+0x3c>)
 800290a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	43db      	mvns	r3, r3
 8002910:	4904      	ldr	r1, [pc, #16]	; (8002924 <RCC_APB2PeriphClockCmd+0x3c>)
 8002912:	4013      	ands	r3, r2
 8002914:	644b      	str	r3, [r1, #68]	; 0x44
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800

08002928 <USART_Init>:
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
 8002936:	2300      	movs	r3, #0
 8002938:	623b      	str	r3, [r7, #32]
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8a1b      	ldrh	r3, [r3, #16]
 8002946:	b29b      	uxth	r3, r3
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	88db      	ldrh	r3, [r3, #6]
 8002956:	461a      	mov	r2, r3
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	4313      	orrs	r3, r2
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	b29a      	uxth	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	821a      	strh	r2, [r3, #16]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	899b      	ldrh	r3, [r3, #12]
 800296a:	b29b      	uxth	r3, r3
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002974:	f023 030c 	bic.w	r3, r3, #12
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	889a      	ldrh	r2, [r3, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	891b      	ldrh	r3, [r3, #8]
 8002982:	4313      	orrs	r3, r2
 8002984:	b29a      	uxth	r2, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	895b      	ldrh	r3, [r3, #10]
 800298a:	4313      	orrs	r3, r2
 800298c:	b29b      	uxth	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	4313      	orrs	r3, r2
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	b29a      	uxth	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	819a      	strh	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	8a9b      	ldrh	r3, [r3, #20]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	899b      	ldrh	r3, [r3, #12]
 80029b2:	461a      	mov	r2, r3
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	4313      	orrs	r3, r2
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	b29a      	uxth	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	829a      	strh	r2, [r3, #20]
 80029c2:	f107 0308 	add.w	r3, r7, #8
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fec6 	bl	8002758 <RCC_GetClocksFreq>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a30      	ldr	r2, [pc, #192]	; (8002a90 <USART_Init+0x168>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d003      	beq.n	80029dc <USART_Init+0xb4>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a2f      	ldr	r2, [pc, #188]	; (8002a94 <USART_Init+0x16c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d102      	bne.n	80029e2 <USART_Init+0xba>
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	e001      	b.n	80029e6 <USART_Init+0xbe>
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	623b      	str	r3, [r7, #32]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	899b      	ldrh	r3, [r3, #12]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	b21b      	sxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	da0c      	bge.n	8002a0c <USART_Init+0xe4>
 80029f2:	6a3a      	ldr	r2, [r7, #32]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009a      	lsls	r2, r3, #2
 80029fc:	441a      	add	r2, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	e00b      	b.n	8002a24 <USART_Init+0xfc>
 8002a0c:	6a3a      	ldr	r2, [r7, #32]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	009a      	lsls	r2, r3, #2
 8002a16:	441a      	add	r2, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4a1c      	ldr	r2, [pc, #112]	; (8002a98 <USART_Init+0x170>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	2264      	movs	r2, #100	; 0x64
 8002a38:	fb02 f303 	mul.w	r3, r2, r3
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	899b      	ldrh	r3, [r3, #12]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	b21b      	sxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	da0c      	bge.n	8002a68 <USART_Init+0x140>
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	3332      	adds	r3, #50	; 0x32
 8002a54:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <USART_Init+0x170>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a62:	4313      	orrs	r3, r2
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
 8002a66:	e00b      	b.n	8002a80 <USART_Init+0x158>
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	3332      	adds	r3, #50	; 0x32
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <USART_Init+0x170>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	811a      	strh	r2, [r3, #8]
 8002a88:	bf00      	nop
 8002a8a:	3728      	adds	r7, #40	; 0x28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40011000 	.word	0x40011000
 8002a94:	40011400 	.word	0x40011400
 8002a98:	51eb851f 	.word	0x51eb851f

08002a9c <USART_Cmd>:
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	70fb      	strb	r3, [r7, #3]
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <USART_Cmd+0x24>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	899b      	ldrh	r3, [r3, #12]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	819a      	strh	r2, [r3, #12]
 8002abe:	e007      	b.n	8002ad0 <USART_Cmd+0x34>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	899b      	ldrh	r3, [r3, #12]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	819a      	strh	r2, [r3, #12]
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <USART_ReceiveData>:
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	889b      	ldrh	r3, [r3, #4]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <USART_ITConfig>:
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	807b      	strh	r3, [r7, #2]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	707b      	strb	r3, [r7, #1]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	2300      	movs	r3, #0
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	887b      	ldrh	r3, [r7, #2]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	887b      	ldrh	r3, [r7, #2]
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d103      	bne.n	8002b4a <USART_ITConfig+0x4e>
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	330c      	adds	r3, #12
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	e009      	b.n	8002b5e <USART_ITConfig+0x62>
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d103      	bne.n	8002b58 <USART_ITConfig+0x5c>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	3310      	adds	r3, #16
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	e002      	b.n	8002b5e <USART_ITConfig+0x62>
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3314      	adds	r3, #20
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	787b      	ldrb	r3, [r7, #1]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d006      	beq.n	8002b72 <USART_ITConfig+0x76>
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	6819      	ldr	r1, [r3, #0]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e006      	b.n	8002b80 <USART_ITConfig+0x84>
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	43da      	mvns	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	bf00      	nop
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <USART_GetITStatus>:
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	74fb      	strb	r3, [r7, #19]
 8002ba8:	887b      	ldrh	r3, [r7, #2]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <USART_GetITStatus+0x4e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	899b      	ldrh	r3, [r3, #12]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	e011      	b.n	8002bfe <USART_GetITStatus+0x72>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d107      	bne.n	8002bf0 <USART_GetITStatus+0x64>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	8a1b      	ldrh	r3, [r3, #16]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	4013      	ands	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	e006      	b.n	8002bfe <USART_GetITStatus+0x72>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8a9b      	ldrh	r3, [r3, #20]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <USART_GetITStatus+0xa4>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <USART_GetITStatus+0xa4>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	74fb      	strb	r3, [r7, #19]
 8002c2e:	e001      	b.n	8002c34 <USART_GetITStatus+0xa8>
 8002c30:	2300      	movs	r3, #0
 8002c32:	74fb      	strb	r3, [r7, #19]
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	4618      	mov	r0, r3
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <USART_ClearITPendingBit>:
 8002c42:	b480      	push	{r7}
 8002c44:	b085      	sub	sp, #20
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	807b      	strh	r3, [r7, #2]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	81fb      	strh	r3, [r7, #14]
 8002c52:	2300      	movs	r3, #0
 8002c54:	81bb      	strh	r3, [r7, #12]
 8002c56:	887b      	ldrh	r3, [r7, #2]
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	81fb      	strh	r3, [r7, #14]
 8002c5c:	89fb      	ldrh	r3, [r7, #14]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	81bb      	strh	r3, [r7, #12]
 8002c66:	89bb      	ldrh	r3, [r7, #12]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <NVIC_SetPriority>:
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	6039      	str	r1, [r7, #0]
 8002c86:	71fb      	strb	r3, [r7, #7]
 8002c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	da0b      	bge.n	8002ca8 <NVIC_SetPriority+0x2c>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	490c      	ldr	r1, [pc, #48]	; (8002cc8 <NVIC_SetPriority+0x4c>)
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	3b04      	subs	r3, #4
 8002c9e:	0112      	lsls	r2, r2, #4
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	761a      	strb	r2, [r3, #24]
 8002ca6:	e009      	b.n	8002cbc <NVIC_SetPriority+0x40>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	4907      	ldr	r1, [pc, #28]	; (8002ccc <NVIC_SetPriority+0x50>)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	0112      	lsls	r2, r2, #4
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00
 8002ccc:	e000e100 	.word	0xe000e100

08002cd0 <SysTick_Config>:
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce0:	d301      	bcc.n	8002ce6 <SysTick_Config+0x16>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00f      	b.n	8002d06 <SysTick_Config+0x36>
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <SysTick_Config+0x40>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	6053      	str	r3, [r2, #4]
 8002cee:	210f      	movs	r1, #15
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	f7ff ffc2 	bl	8002c7c <NVIC_SetPriority>
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <SysTick_Config+0x40>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <SysTick_Config+0x40>)
 8002d00:	2207      	movs	r2, #7
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	2300      	movs	r3, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	e000e010 	.word	0xe000e010

08002d14 <TimerInit>:
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	463b      	mov	r3, r7
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fd1b 	bl	8002758 <RCC_GetClocksFreq>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <TimerInit+0x3c>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	099b      	lsrs	r3, r3, #6
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ffcf 	bl	8002cd0 <SysTick_Config>
 8002d32:	2101      	movs	r1, #1
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	f7ff ffa0 	bl	8002c7c <NVIC_SetPriority>
 8002d3c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002d40:	2100      	movs	r1, #0
 8002d42:	4804      	ldr	r0, [pc, #16]	; (8002d54 <TimerInit+0x40>)
 8002d44:	f001 f9e8 	bl	8004118 <memsetl>
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	10624dd3 	.word	0x10624dd3
 8002d54:	20000204 	.word	0x20000204

08002d58 <TimerStop>:
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	2b0f      	cmp	r3, #15
 8002d66:	d80a      	bhi.n	8002d7e <TimerStop+0x26>
 8002d68:	79fa      	ldrb	r2, [r7, #7]
 8002d6a:	4922      	ldr	r1, [pc, #136]	; (8002df4 <TimerStop+0x9c>)
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	3310      	adds	r3, #16
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <TimerStop+0x2a>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e031      	b.n	8002de6 <TimerStop+0x8e>
 8002d82:	79fa      	ldrb	r2, [r7, #7]
 8002d84:	491b      	ldr	r1, [pc, #108]	; (8002df4 <TimerStop+0x9c>)
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	79fa      	ldrb	r2, [r7, #7]
 8002d96:	4917      	ldr	r1, [pc, #92]	; (8002df4 <TimerStop+0x9c>)
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	3310      	adds	r3, #16
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	79fa      	ldrb	r2, [r7, #7]
 8002daa:	4912      	ldr	r1, [pc, #72]	; (8002df4 <TimerStop+0x9c>)
 8002dac:	4613      	mov	r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4413      	add	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	440b      	add	r3, r1
 8002db6:	330c      	adds	r3, #12
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	79fa      	ldrb	r2, [r7, #7]
 8002dbe:	490d      	ldr	r1, [pc, #52]	; (8002df4 <TimerStop+0x9c>)
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	440b      	add	r3, r1
 8002dca:	3308      	adds	r3, #8
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	79fa      	ldrb	r2, [r7, #7]
 8002dd2:	4908      	ldr	r1, [pc, #32]	; (8002df4 <TimerStop+0x9c>)
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	3304      	adds	r3, #4
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	2301      	movs	r3, #1
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20000204 	.word	0x20000204

08002df8 <GetMilSecTick>:
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <GetMilSecTick+0x14>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	20000384 	.word	0x20000384

08002e10 <processTimerScheduler>:
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
 8002e1a:	e068      	b.n	8002eee <processTimerScheduler+0xde>
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	4937      	ldr	r1, [pc, #220]	; (8002efc <processTimerScheduler+0xec>)
 8002e20:	4613      	mov	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	440b      	add	r3, r1
 8002e2a:	3310      	adds	r3, #16
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d05a      	beq.n	8002ee8 <processTimerScheduler+0xd8>
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 f863 	bl	8002f00 <TimeExpired>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d053      	beq.n	8002ee8 <processTimerScheduler+0xd8>
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	492e      	ldr	r1, [pc, #184]	; (8002efc <processTimerScheduler+0xec>)
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	440b      	add	r3, r1
 8002e4e:	3310      	adds	r3, #16
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	4929      	ldr	r1, [pc, #164]	; (8002efc <processTimerScheduler+0xec>)
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	440b      	add	r3, r1
 8002e62:	3314      	adds	r3, #20
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	607b      	str	r3, [r7, #4]
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	4924      	ldr	r1, [pc, #144]	; (8002efc <processTimerScheduler+0xec>)
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4413      	add	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	440b      	add	r3, r1
 8002e76:	330c      	adds	r3, #12
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2bff      	cmp	r3, #255	; 0xff
 8002e7e:	d020      	beq.n	8002ec2 <processTimerScheduler+0xb2>
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	491e      	ldr	r1, [pc, #120]	; (8002efc <processTimerScheduler+0xec>)
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	330c      	adds	r3, #12
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d014      	beq.n	8002ec2 <processTimerScheduler+0xb2>
 8002e98:	7bfa      	ldrb	r2, [r7, #15]
 8002e9a:	4918      	ldr	r1, [pc, #96]	; (8002efc <processTimerScheduler+0xec>)
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	440b      	add	r3, r1
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b2d8      	uxtb	r0, r3
 8002eb0:	4912      	ldr	r1, [pc, #72]	; (8002efc <processTimerScheduler+0xec>)
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	440b      	add	r3, r1
 8002ebc:	330c      	adds	r3, #12
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	701a      	strb	r2, [r3, #0]
 8002ec2:	7bfa      	ldrb	r2, [r7, #15]
 8002ec4:	490d      	ldr	r1, [pc, #52]	; (8002efc <processTimerScheduler+0xec>)
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	440b      	add	r3, r1
 8002ed0:	330c      	adds	r3, #12
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d103      	bne.n	8002ee2 <processTimerScheduler+0xd2>
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff3b 	bl	8002d58 <TimerStop>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	3301      	adds	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	2b0f      	cmp	r3, #15
 8002ef2:	d993      	bls.n	8002e1c <processTimerScheduler+0xc>
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000204 	.word	0x20000204

08002f00 <TimeExpired>:
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	b672      	cpsid	i
 8002f10:	f7ff ff72 	bl	8002df8 <GetMilSecTick>
 8002f14:	60b8      	str	r0, [r7, #8]
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	2b0f      	cmp	r3, #15
 8002f1a:	d80a      	bhi.n	8002f32 <TimeExpired+0x32>
 8002f1c:	79fa      	ldrb	r2, [r7, #7]
 8002f1e:	492a      	ldr	r1, [pc, #168]	; (8002fc8 <TimeExpired+0xc8>)
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	440b      	add	r3, r1
 8002f2a:	3310      	adds	r3, #16
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <TimeExpired+0x38>
 8002f32:	b662      	cpsie	i
 8002f34:	2300      	movs	r3, #0
 8002f36:	e042      	b.n	8002fbe <TimeExpired+0xbe>
 8002f38:	79fa      	ldrb	r2, [r7, #7]
 8002f3a:	4923      	ldr	r1, [pc, #140]	; (8002fc8 <TimeExpired+0xc8>)
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4413      	add	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	440b      	add	r3, r1
 8002f46:	3304      	adds	r3, #4
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d30c      	bcc.n	8002f6a <TimeExpired+0x6a>
 8002f50:	79fa      	ldrb	r2, [r7, #7]
 8002f52:	491d      	ldr	r1, [pc, #116]	; (8002fc8 <TimeExpired+0xc8>)
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3304      	adds	r3, #4
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e00e      	b.n	8002f88 <TimeExpired+0x88>
 8002f6a:	79fa      	ldrb	r2, [r7, #7]
 8002f6c:	4916      	ldr	r1, [pc, #88]	; (8002fc8 <TimeExpired+0xc8>)
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	3304      	adds	r3, #4
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	79fa      	ldrb	r2, [r7, #7]
 8002f8a:	490f      	ldr	r1, [pc, #60]	; (8002fc8 <TimeExpired+0xc8>)
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	440b      	add	r3, r1
 8002f96:	3308      	adds	r3, #8
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d202      	bcs.n	8002fa6 <TimeExpired+0xa6>
 8002fa0:	b662      	cpsie	i
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e00b      	b.n	8002fbe <TimeExpired+0xbe>
 8002fa6:	79fa      	ldrb	r2, [r7, #7]
 8002fa8:	4907      	ldr	r1, [pc, #28]	; (8002fc8 <TimeExpired+0xc8>)
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	b662      	cpsie	i
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000204 	.word	0x20000204

08002fcc <SysTick_Handler>:
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <SysTick_Handler+0x18>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	4a03      	ldr	r2, [pc, #12]	; (8002fe4 <SysTick_Handler+0x18>)
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	bf00      	nop
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	20000384 	.word	0x20000384

08002fe8 <delayMicroseconds>:
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <ucg_gpio_init>:
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	2101      	movs	r1, #1
 8003004:	2007      	movs	r0, #7
 8003006:	f7ff fc4f 	bl	80028a8 <RCC_AHB1PeriphClockCmd>
 800300a:	2301      	movs	r3, #1
 800300c:	713b      	strb	r3, [r7, #4]
 800300e:	2303      	movs	r3, #3
 8003010:	717b      	strb	r3, [r7, #5]
 8003012:	2300      	movs	r3, #0
 8003014:	71bb      	strb	r3, [r7, #6]
 8003016:	2300      	movs	r3, #0
 8003018:	71fb      	strb	r3, [r7, #7]
 800301a:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	463b      	mov	r3, r7
 8003022:	4619      	mov	r1, r3
 8003024:	480a      	ldr	r0, [pc, #40]	; (8003050 <ucg_gpio_init+0x54>)
 8003026:	f7ff faa7 	bl	8002578 <GPIO_Init>
 800302a:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	463b      	mov	r3, r7
 8003032:	4619      	mov	r1, r3
 8003034:	4807      	ldr	r0, [pc, #28]	; (8003054 <ucg_gpio_init+0x58>)
 8003036:	f7ff fa9f 	bl	8002578 <GPIO_Init>
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	603b      	str	r3, [r7, #0]
 800303e:	463b      	mov	r3, r7
 8003040:	4619      	mov	r1, r3
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <ucg_gpio_init+0x5c>)
 8003044:	f7ff fa98 	bl	8002578 <GPIO_Init>
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40020000 	.word	0x40020000
 8003054:	40020400 	.word	0x40020400
 8003058:	40020800 	.word	0x40020800

0800305c <ucg_com_arduino_send_generic_SW_SPI>:
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	70fb      	strb	r3, [r7, #3]
 8003068:	2308      	movs	r3, #8
 800306a:	73fb      	strb	r3, [r7, #15]
 800306c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003070:	2b00      	cmp	r3, #0
 8003072:	da05      	bge.n	8003080 <ucg_com_arduino_send_generic_SW_SPI+0x24>
 8003074:	2201      	movs	r2, #1
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	4814      	ldr	r0, [pc, #80]	; (80030cc <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 800307a:	f7ff fb0b 	bl	8002694 <GPIO_WriteBit>
 800307e:	e004      	b.n	800308a <ucg_com_arduino_send_generic_SW_SPI+0x2e>
 8003080:	2200      	movs	r2, #0
 8003082:	2180      	movs	r1, #128	; 0x80
 8003084:	4811      	ldr	r0, [pc, #68]	; (80030cc <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8003086:	f7ff fb05 	bl	8002694 <GPIO_WriteBit>
 800308a:	2001      	movs	r0, #1
 800308c:	f7ff ffac 	bl	8002fe8 <delayMicroseconds>
 8003090:	2201      	movs	r2, #1
 8003092:	2120      	movs	r1, #32
 8003094:	480d      	ldr	r0, [pc, #52]	; (80030cc <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8003096:	f7ff fafd 	bl	8002694 <GPIO_WriteBit>
 800309a:	2001      	movs	r0, #1
 800309c:	f7ff ffa4 	bl	8002fe8 <delayMicroseconds>
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	2200      	movs	r2, #0
 80030a8:	2120      	movs	r1, #32
 80030aa:	4808      	ldr	r0, [pc, #32]	; (80030cc <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 80030ac:	f7ff faf2 	bl	8002694 <GPIO_WriteBit>
 80030b0:	2001      	movs	r0, #1
 80030b2:	f7ff ff99 	bl	8002fe8 <delayMicroseconds>
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	70fb      	strb	r3, [r7, #3]
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1d4      	bne.n	800306c <ucg_com_arduino_send_generic_SW_SPI+0x10>
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40020000 	.word	0x40020000

080030d0 <ucg_com_arduino_generic_SW_SPI>:
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	607b      	str	r3, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	817b      	strh	r3, [r7, #10]
 80030de:	4613      	mov	r3, r2
 80030e0:	813b      	strh	r3, [r7, #8]
 80030e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030e6:	3b0a      	subs	r3, #10
 80030e8:	2b0b      	cmp	r3, #11
 80030ea:	f200 80dc 	bhi.w	80032a6 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80030ee:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <ucg_com_arduino_generic_SW_SPI+0x24>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	08003125 	.word	0x08003125
 80030f8:	080032a7 	.word	0x080032a7
 80030fc:	08003177 	.word	0x08003177
 8003100:	08003181 	.word	0x08003181
 8003104:	08003191 	.word	0x08003191
 8003108:	080031a1 	.word	0x080031a1
 800310c:	080031b3 	.word	0x080031b3
 8003110:	080031d3 	.word	0x080031d3
 8003114:	080031fb 	.word	0x080031fb
 8003118:	08003231 	.word	0x08003231
 800311c:	0800324f 	.word	0x0800324f
 8003120:	0800329f 	.word	0x0800329f
 8003124:	f7ff ff6a 	bl	8002ffc <ucg_gpio_init>
 8003128:	2201      	movs	r2, #1
 800312a:	2180      	movs	r1, #128	; 0x80
 800312c:	4860      	ldr	r0, [pc, #384]	; (80032b0 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 800312e:	f7ff fab1 	bl	8002694 <GPIO_WriteBit>
 8003132:	2201      	movs	r2, #1
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	485f      	ldr	r0, [pc, #380]	; (80032b4 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8003138:	f7ff faac 	bl	8002694 <GPIO_WriteBit>
 800313c:	2201      	movs	r2, #1
 800313e:	2180      	movs	r1, #128	; 0x80
 8003140:	485d      	ldr	r0, [pc, #372]	; (80032b8 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8003142:	f7ff faa7 	bl	8002694 <GPIO_WriteBit>
 8003146:	2201      	movs	r2, #1
 8003148:	f44f 7100 	mov.w	r1, #512	; 0x200
 800314c:	4858      	ldr	r0, [pc, #352]	; (80032b0 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 800314e:	f7ff faa1 	bl	8002694 <GPIO_WriteBit>
 8003152:	2200      	movs	r2, #0
 8003154:	2120      	movs	r1, #32
 8003156:	4856      	ldr	r0, [pc, #344]	; (80032b0 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003158:	f7ff fa9c 	bl	8002694 <GPIO_WriteBit>
 800315c:	2201      	movs	r2, #1
 800315e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003162:	4854      	ldr	r0, [pc, #336]	; (80032b4 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8003164:	f7ff fa96 	bl	8002694 <GPIO_WriteBit>
 8003168:	2201      	movs	r2, #1
 800316a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800316e:	4850      	ldr	r0, [pc, #320]	; (80032b0 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003170:	f7ff fa90 	bl	8002694 <GPIO_WriteBit>
 8003174:	e097      	b.n	80032a6 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003176:	893b      	ldrh	r3, [r7, #8]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff35 	bl	8002fe8 <delayMicroseconds>
 800317e:	e092      	b.n	80032a6 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003180:	893b      	ldrh	r3, [r7, #8]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	484b      	ldr	r0, [pc, #300]	; (80032b8 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 800318a:	f7ff fa83 	bl	8002694 <GPIO_WriteBit>
 800318e:	e08a      	b.n	80032a6 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003190:	893b      	ldrh	r3, [r7, #8]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	2140      	movs	r1, #64	; 0x40
 8003198:	4846      	ldr	r0, [pc, #280]	; (80032b4 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 800319a:	f7ff fa7b 	bl	8002694 <GPIO_WriteBit>
 800319e:	e082      	b.n	80032a6 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80031a0:	893b      	ldrh	r3, [r7, #8]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031aa:	4841      	ldr	r0, [pc, #260]	; (80032b0 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80031ac:	f7ff fa72 	bl	8002694 <GPIO_WriteBit>
 80031b0:	e079      	b.n	80032a6 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80031b2:	893b      	ldrh	r3, [r7, #8]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	4619      	mov	r1, r3
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f7ff ff4f 	bl	800305c <ucg_com_arduino_send_generic_SW_SPI>
 80031be:	e072      	b.n	80032a6 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	4619      	mov	r1, r3
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f7ff ff48 	bl	800305c <ucg_com_arduino_send_generic_SW_SPI>
 80031cc:	893b      	ldrh	r3, [r7, #8]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	813b      	strh	r3, [r7, #8]
 80031d2:	893b      	ldrh	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f3      	bne.n	80031c0 <ucg_com_arduino_generic_SW_SPI+0xf0>
 80031d8:	e065      	b.n	80032a6 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	4619      	mov	r1, r3
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7ff ff3b 	bl	800305c <ucg_com_arduino_send_generic_SW_SPI>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3301      	adds	r3, #1
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7ff ff34 	bl	800305c <ucg_com_arduino_send_generic_SW_SPI>
 80031f4:	893b      	ldrh	r3, [r7, #8]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	813b      	strh	r3, [r7, #8]
 80031fa:	893b      	ldrh	r3, [r7, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1ec      	bne.n	80031da <ucg_com_arduino_generic_SW_SPI+0x10a>
 8003200:	e051      	b.n	80032a6 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	4619      	mov	r1, r3
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff ff27 	bl	800305c <ucg_com_arduino_send_generic_SW_SPI>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3301      	adds	r3, #1
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	4619      	mov	r1, r3
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f7ff ff20 	bl	800305c <ucg_com_arduino_send_generic_SW_SPI>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3302      	adds	r3, #2
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	4619      	mov	r1, r3
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f7ff ff19 	bl	800305c <ucg_com_arduino_send_generic_SW_SPI>
 800322a:	893b      	ldrh	r3, [r7, #8]
 800322c:	3b01      	subs	r3, #1
 800322e:	813b      	strh	r3, [r7, #8]
 8003230:	893b      	ldrh	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1e5      	bne.n	8003202 <ucg_com_arduino_generic_SW_SPI+0x132>
 8003236:	e036      	b.n	80032a6 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f7ff ff0a 	bl	800305c <ucg_com_arduino_send_generic_SW_SPI>
 8003248:	893b      	ldrh	r3, [r7, #8]
 800324a:	3b01      	subs	r3, #1
 800324c:	813b      	strh	r3, [r7, #8]
 800324e:	893b      	ldrh	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f1      	bne.n	8003238 <ucg_com_arduino_generic_SW_SPI+0x168>
 8003254:	e027      	b.n	80032a6 <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d010      	beq.n	8003280 <ucg_com_arduino_generic_SW_SPI+0x1b0>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d106      	bne.n	8003274 <ucg_com_arduino_generic_SW_SPI+0x1a4>
 8003266:	2200      	movs	r2, #0
 8003268:	f44f 7100 	mov.w	r1, #512	; 0x200
 800326c:	4810      	ldr	r0, [pc, #64]	; (80032b0 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 800326e:	f7ff fa11 	bl	8002694 <GPIO_WriteBit>
 8003272:	e005      	b.n	8003280 <ucg_com_arduino_generic_SW_SPI+0x1b0>
 8003274:	2201      	movs	r2, #1
 8003276:	f44f 7100 	mov.w	r1, #512	; 0x200
 800327a:	480d      	ldr	r0, [pc, #52]	; (80032b0 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 800327c:	f7ff fa0a 	bl	8002694 <GPIO_WriteBit>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3301      	adds	r3, #1
 8003284:	607b      	str	r3, [r7, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	4619      	mov	r1, r3
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff fee5 	bl	800305c <ucg_com_arduino_send_generic_SW_SPI>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3301      	adds	r3, #1
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	893b      	ldrh	r3, [r7, #8]
 800329a:	3b01      	subs	r3, #1
 800329c:	813b      	strh	r3, [r7, #8]
 800329e:	893b      	ldrh	r3, [r7, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1d8      	bne.n	8003256 <ucg_com_arduino_generic_SW_SPI+0x186>
 80032a4:	bf00      	nop
 80032a6:	2301      	movs	r3, #1
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40020000 	.word	0x40020000
 80032b4:	40020400 	.word	0x40020400
 80032b8:	40020800 	.word	0x40020800

080032bc <Ucglib4WireSWSPI_begin>:
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	70fb      	strb	r3, [r7, #3]
 80032c8:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <Ucglib4WireSWSPI_begin+0x2c>)
 80032ca:	4a08      	ldr	r2, [pc, #32]	; (80032ec <Ucglib4WireSWSPI_begin+0x30>)
 80032cc:	4908      	ldr	r1, [pc, #32]	; (80032f0 <Ucglib4WireSWSPI_begin+0x34>)
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fc60 	bl	8003b94 <ucg_Init>
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	4619      	mov	r1, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fc07 	bl	8003aec <ucg_SetFontMode>
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	080030d1 	.word	0x080030d1
 80032ec:	08003929 	.word	0x08003929
 80032f0:	08003a6d 	.word	0x08003a6d

080032f4 <ucg_DrawBox>:
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	4608      	mov	r0, r1
 80032fe:	4611      	mov	r1, r2
 8003300:	461a      	mov	r2, r3
 8003302:	4603      	mov	r3, r0
 8003304:	817b      	strh	r3, [r7, #10]
 8003306:	460b      	mov	r3, r1
 8003308:	813b      	strh	r3, [r7, #8]
 800330a:	4613      	mov	r3, r2
 800330c:	80fb      	strh	r3, [r7, #6]
 800330e:	e014      	b.n	800333a <ucg_DrawBox+0x46>
 8003310:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003314:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003318:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 fcab 	bl	8003c78 <ucg_DrawHLine>
 8003322:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29b      	uxth	r3, r3
 800332c:	833b      	strh	r3, [r7, #24]
 800332e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003332:	b29b      	uxth	r3, r3
 8003334:	3301      	adds	r3, #1
 8003336:	b29b      	uxth	r3, r3
 8003338:	813b      	strh	r3, [r7, #8]
 800333a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	dce6      	bgt.n	8003310 <ucg_DrawBox+0x1c>
 8003342:	bf00      	nop
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <ucg_ClearScreen>:
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af02      	add	r7, sp, #8
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	2300      	movs	r3, #0
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	2300      	movs	r3, #0
 8003358:	2200      	movs	r2, #0
 800335a:	2100      	movs	r1, #0
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fcaa 	bl	8003cb6 <ucg_SetColor>
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fb3b 	bl	80039de <ucg_SetMaxClipRange>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	2200      	movs	r2, #0
 800337a:	2100      	movs	r1, #0
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff ffb9 	bl	80032f4 <ucg_DrawBox>
 8003382:	23ff      	movs	r3, #255	; 0xff
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	23ff      	movs	r3, #255	; 0xff
 8003388:	22ff      	movs	r2, #255	; 0xff
 800338a:	2100      	movs	r1, #0
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fc92 	bl	8003cb6 <ucg_SetColor>
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <ucg_ccs_init>:
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	4608      	mov	r0, r1
 80033a4:	4611      	mov	r1, r2
 80033a6:	461a      	mov	r2, r3
 80033a8:	4603      	mov	r3, r0
 80033aa:	70fb      	strb	r3, [r7, #3]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70bb      	strb	r3, [r7, #2]
 80033b0:	4613      	mov	r3, r2
 80033b2:	803b      	strh	r3, [r7, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	705a      	strb	r2, [r3, #1]
 80033ba:	78bb      	ldrb	r3, [r7, #2]
 80033bc:	b29a      	uxth	r2, r3
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	b21a      	sxth	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	809a      	strh	r2, [r3, #4]
 80033cc:	883b      	ldrh	r3, [r7, #0]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	b21a      	sxth	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	811a      	strh	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	805a      	strh	r2, [r3, #2]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033e4:	461a      	mov	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80033f0:	b21a      	sxth	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	80da      	strh	r2, [r3, #6]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da0c      	bge.n	800341a <ucg_ccs_init+0x80>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003406:	b29b      	uxth	r3, r3
 8003408:	425b      	negs	r3, r3
 800340a:	b29b      	uxth	r3, r3
 800340c:	b21a      	sxth	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	809a      	strh	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003418:	805a      	strh	r2, [r3, #2]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003426:	fb93 f1f2 	sdiv	r1, r3, r2
 800342a:	fb02 f201 	mul.w	r2, r2, r1
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	b21a      	sxth	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	815a      	strh	r2, [r3, #10]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800343c:	0fda      	lsrs	r2, r3, #31
 800343e:	4413      	add	r3, r2
 8003440:	105b      	asrs	r3, r3, #1
 8003442:	b21a      	sxth	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	819a      	strh	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <ucg_ccs_step>:
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	781a      	ldrb	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	4413      	add	r3, r2
 8003470:	b2da      	uxtb	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	701a      	strb	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800347c:	b29a      	uxth	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003484:	b29b      	uxth	r3, r3
 8003486:	4413      	add	r3, r2
 8003488:	b29b      	uxth	r3, r3
 800348a:	b21a      	sxth	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	819a      	strh	r2, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800349c:	429a      	cmp	r2, r3
 800349e:	db16      	blt.n	80034ce <ucg_ccs_step+0x74>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	781a      	ldrb	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	b21a      	sxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	819a      	strh	r2, [r3, #12]
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <ucg_ccs_seek>:
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	460b      	mov	r3, r1
 80034e4:	807b      	strh	r3, [r7, #2]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	fb12 f303 	smulbb	r3, r2, r3
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	701a      	strb	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800350a:	b29a      	uxth	r2, r3
 800350c:	887b      	ldrh	r3, [r7, #2]
 800350e:	fb12 f303 	smulbb	r3, r2, r3
 8003512:	b29a      	uxth	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800351a:	0fd9      	lsrs	r1, r3, #31
 800351c:	440b      	add	r3, r1
 800351e:	105b      	asrs	r3, r3, #1
 8003520:	b21b      	sxth	r3, r3
 8003522:	b29b      	uxth	r3, r3
 8003524:	4413      	add	r3, r2
 8003526:	b29b      	uxth	r3, r3
 8003528:	81fb      	strh	r3, [r7, #14]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003530:	2b00      	cmp	r3, #0
 8003532:	db0e      	blt.n	8003552 <ucg_ccs_seek+0x78>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8003542:	fb93 f3f1 	sdiv	r3, r3, r1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	4413      	add	r3, r2
 800354a:	b2da      	uxtb	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	e00d      	b.n	800356e <ucg_ccs_seek+0x94>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	781a      	ldrb	r2, [r3, #0]
 8003556:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8003560:	fb93 f3f1 	sdiv	r3, r3, r1
 8003564:	b2db      	uxtb	r3, r3
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	b2da      	uxtb	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003578:	fb93 f1f2 	sdiv	r1, r3, r2
 800357c:	fb02 f201 	mul.w	r2, r2, r1
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	b21a      	sxth	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	819a      	strh	r2, [r3, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	781a      	ldrb	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	785b      	ldrb	r3, [r3, #1]
 8003590:	4413      	add	r3, r2
 8003592:	b2da      	uxtb	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <ucg_dev_default_cb>:
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	460b      	mov	r3, r1
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	817b      	strh	r3, [r7, #10]
 80035b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d00a      	beq.n	80035d0 <ucg_dev_default_cb+0x2c>
 80035ba:	2b17      	cmp	r3, #23
 80035bc:	d10f      	bne.n	80035de <ucg_dev_default_cb+0x3a>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	4798      	blx	r3
 80035cc:	4603      	mov	r3, r0
 80035ce:	e007      	b.n	80035e0 <ucg_dev_default_cb+0x3c>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	3370      	adds	r3, #112	; 0x70
 80035d6:	6810      	ldr	r0, [r2, #0]
 80035d8:	6851      	ldr	r1, [r2, #4]
 80035da:	c303      	stmia	r3!, {r0, r1}
 80035dc:	bf00      	nop
 80035de:	2301      	movs	r3, #1
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <ucg_ext_none>:
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	460b      	mov	r3, r1
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	817b      	strh	r3, [r7, #10]
 80035f6:	2301      	movs	r3, #1
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <ucg_handle_st7735_l90fx>:
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fe39 	bl	8004284 <ucg_clip_l90fx>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d053      	beq.n	80036c0 <ucg_handle_st7735_l90fx+0xbc>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800361e:	2b01      	cmp	r3, #1
 8003620:	d008      	beq.n	8003634 <ucg_handle_st7735_l90fx+0x30>
 8003622:	2b02      	cmp	r3, #2
 8003624:	d00b      	beq.n	800363e <ucg_handle_st7735_l90fx+0x3a>
 8003626:	2b00      	cmp	r3, #0
 8003628:	d11b      	bne.n	8003662 <ucg_handle_st7735_l90fx+0x5e>
 800362a:	4928      	ldr	r1, [pc, #160]	; (80036cc <ucg_handle_st7735_l90fx+0xc8>)
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f001 f957 	bl	80048e0 <ucg_com_SendCmdSeq>
 8003632:	e028      	b.n	8003686 <ucg_handle_st7735_l90fx+0x82>
 8003634:	4926      	ldr	r1, [pc, #152]	; (80036d0 <ucg_handle_st7735_l90fx+0xcc>)
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f001 f952 	bl	80048e0 <ucg_com_SendCmdSeq>
 800363c:	e023      	b.n	8003686 <ucg_handle_st7735_l90fx+0x82>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003642:	81fb      	strh	r3, [r7, #14]
 8003644:	89fb      	ldrh	r3, [r7, #14]
 8003646:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800364a:	b29b      	uxth	r3, r3
 800364c:	b21a      	sxth	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	849a      	strh	r2, [r3, #36]	; 0x24
 8003652:	4920      	ldr	r1, [pc, #128]	; (80036d4 <ucg_handle_st7735_l90fx+0xd0>)
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f001 f943 	bl	80048e0 <ucg_com_SendCmdSeq>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	89fa      	ldrh	r2, [r7, #14]
 800365e:	849a      	strh	r2, [r3, #36]	; 0x24
 8003660:	e011      	b.n	8003686 <ucg_handle_st7735_l90fx+0x82>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003666:	81fb      	strh	r3, [r7, #14]
 8003668:	89fb      	ldrh	r3, [r7, #14]
 800366a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800366e:	b29b      	uxth	r3, r3
 8003670:	b21a      	sxth	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	84da      	strh	r2, [r3, #38]	; 0x26
 8003676:	4918      	ldr	r1, [pc, #96]	; (80036d8 <ucg_handle_st7735_l90fx+0xd4>)
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f001 f931 	bl	80048e0 <ucg_com_SendCmdSeq>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	89fa      	ldrh	r2, [r7, #14]
 8003682:	84da      	strh	r2, [r3, #38]	; 0x26
 8003684:	bf00      	nop
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800368c:	723b      	strb	r3, [r7, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003694:	727b      	strb	r3, [r7, #9]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800369c:	72bb      	strb	r3, [r7, #10]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69dc      	ldr	r4, [r3, #28]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	f107 0308 	add.w	r3, r7, #8
 80036ae:	2113      	movs	r1, #19
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	47a0      	blx	r4
 80036b4:	2101      	movs	r1, #1
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f001 f85e 	bl	8004778 <ucg_com_SetCSLineStatus>
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <ucg_handle_st7735_l90fx+0xbe>
 80036c0:	2300      	movs	r3, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd90      	pop	{r4, r7, pc}
 80036ca:	bf00      	nop
 80036cc:	08004e34 	.word	0x08004e34
 80036d0:	08004e54 	.word	0x08004e54
 80036d4:	08004e78 	.word	0x08004e78
 80036d8:	08004e9c 	.word	0x08004e9c

080036dc <ucg_handle_st7735_l90se>:
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	2300      	movs	r3, #0
 80036e6:	75fb      	strb	r3, [r7, #23]
 80036e8:	e01a      	b.n	8003720 <ucg_handle_st7735_l90se+0x44>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f103 0146 	add.w	r1, r3, #70	; 0x46
 80036f0:	7dfa      	ldrb	r2, [r7, #23]
 80036f2:	4613      	mov	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	18c8      	adds	r0, r1, r3
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4413      	add	r3, r2
 8003702:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8003706:	7dfb      	ldrb	r3, [r7, #23]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	4413      	add	r3, r2
 800370c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003716:	f7ff fe40 	bl	800339a <ucg_ccs_init>
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	3301      	adds	r3, #1
 800371e:	75fb      	strb	r3, [r7, #23]
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d9e1      	bls.n	80036ea <ucg_handle_st7735_l90se+0xe>
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 ff2c 	bl	8004584 <ucg_clip_l90se>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d071      	beq.n	8003816 <ucg_handle_st7735_l90se+0x13a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003738:	2b01      	cmp	r3, #1
 800373a:	d008      	beq.n	800374e <ucg_handle_st7735_l90se+0x72>
 800373c:	2b02      	cmp	r3, #2
 800373e:	d00b      	beq.n	8003758 <ucg_handle_st7735_l90se+0x7c>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d11b      	bne.n	800377c <ucg_handle_st7735_l90se+0xa0>
 8003744:	4936      	ldr	r1, [pc, #216]	; (8003820 <ucg_handle_st7735_l90se+0x144>)
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f001 f8ca 	bl	80048e0 <ucg_com_SendCmdSeq>
 800374c:	e028      	b.n	80037a0 <ucg_handle_st7735_l90se+0xc4>
 800374e:	4935      	ldr	r1, [pc, #212]	; (8003824 <ucg_handle_st7735_l90se+0x148>)
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f001 f8c5 	bl	80048e0 <ucg_com_SendCmdSeq>
 8003756:	e023      	b.n	80037a0 <ucg_handle_st7735_l90se+0xc4>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800375c:	827b      	strh	r3, [r7, #18]
 800375e:	8a7b      	ldrh	r3, [r7, #18]
 8003760:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003764:	b29b      	uxth	r3, r3
 8003766:	b21a      	sxth	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	849a      	strh	r2, [r3, #36]	; 0x24
 800376c:	492e      	ldr	r1, [pc, #184]	; (8003828 <ucg_handle_st7735_l90se+0x14c>)
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f001 f8b6 	bl	80048e0 <ucg_com_SendCmdSeq>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8a7a      	ldrh	r2, [r7, #18]
 8003778:	849a      	strh	r2, [r3, #36]	; 0x24
 800377a:	e011      	b.n	80037a0 <ucg_handle_st7735_l90se+0xc4>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003780:	827b      	strh	r3, [r7, #18]
 8003782:	8a7b      	ldrh	r3, [r7, #18]
 8003784:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003788:	b29b      	uxth	r3, r3
 800378a:	b21a      	sxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	84da      	strh	r2, [r3, #38]	; 0x26
 8003790:	4926      	ldr	r1, [pc, #152]	; (800382c <ucg_handle_st7735_l90se+0x150>)
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f001 f8a4 	bl	80048e0 <ucg_com_SendCmdSeq>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8a7a      	ldrh	r2, [r7, #18]
 800379c:	84da      	strh	r2, [r3, #38]	; 0x26
 800379e:	bf00      	nop
 80037a0:	2300      	movs	r3, #0
 80037a2:	82bb      	strh	r3, [r7, #20]
 80037a4:	e02a      	b.n	80037fc <ucg_handle_st7735_l90se+0x120>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80037ac:	733b      	strb	r3, [r7, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80037b4:	737b      	strb	r3, [r7, #13]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80037bc:	73bb      	strb	r3, [r7, #14]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69dc      	ldr	r4, [r3, #28]
 80037c2:	f107 030c 	add.w	r3, r7, #12
 80037c6:	2201      	movs	r2, #1
 80037c8:	2113      	movs	r1, #19
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	47a0      	blx	r4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3346      	adds	r3, #70	; 0x46
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff fe41 	bl	800345a <ucg_ccs_step>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3346      	adds	r3, #70	; 0x46
 80037dc:	330e      	adds	r3, #14
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fe3b 	bl	800345a <ucg_ccs_step>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3346      	adds	r3, #70	; 0x46
 80037e8:	331c      	adds	r3, #28
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fe35 	bl	800345a <ucg_ccs_step>
 80037f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3301      	adds	r3, #1
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	82bb      	strh	r3, [r7, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003802:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003806:	429a      	cmp	r2, r3
 8003808:	dbcd      	blt.n	80037a6 <ucg_handle_st7735_l90se+0xca>
 800380a:	2101      	movs	r1, #1
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 ffb3 	bl	8004778 <ucg_com_SetCSLineStatus>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <ucg_handle_st7735_l90se+0x13c>
 8003816:	2300      	movs	r3, #0
 8003818:	4618      	mov	r0, r3
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	bd90      	pop	{r4, r7, pc}
 8003820:	08004e34 	.word	0x08004e34
 8003824:	08004e54 	.word	0x08004e54
 8003828:	08004e78 	.word	0x08004e78
 800382c:	08004e9c 	.word	0x08004e9c

08003830 <ucg_dev_ic_st7735_18>:
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	460b      	mov	r3, r1
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	817b      	strh	r3, [r7, #10]
 800383e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003842:	3b0a      	subs	r3, #10
 8003844:	2b0b      	cmp	r3, #11
 8003846:	d85f      	bhi.n	8003908 <ucg_dev_ic_st7735_18+0xd8>
 8003848:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <ucg_dev_ic_st7735_18+0x20>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	08003881 	.word	0x08003881
 8003854:	0800389b 	.word	0x0800389b
 8003858:	08003909 	.word	0x08003909
 800385c:	08003909 	.word	0x08003909
 8003860:	08003909 	.word	0x08003909
 8003864:	080038a7 	.word	0x080038a7
 8003868:	08003909 	.word	0x08003909
 800386c:	08003909 	.word	0x08003909
 8003870:	08003909 	.word	0x08003909
 8003874:	08003909 	.word	0x08003909
 8003878:	080038b7 	.word	0x080038b7
 800387c:	080038ff 	.word	0x080038ff
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2202      	movs	r2, #2
 8003884:	841a      	strh	r2, [r3, #32]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	845a      	strh	r2, [r3, #34]	; 0x22
 800388c:	2242      	movs	r2, #66	; 0x42
 800388e:	2164      	movs	r1, #100	; 0x64
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fec0 	bl	8004616 <ucg_com_PowerUp>
 8003896:	4603      	mov	r3, r0
 8003898:	e03e      	b.n	8003918 <ucg_dev_ic_st7735_18+0xe8>
 800389a:	4921      	ldr	r1, [pc, #132]	; (8003920 <ucg_dev_ic_st7735_18+0xf0>)
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f001 f81f 	bl	80048e0 <ucg_com_SendCmdSeq>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e038      	b.n	8003918 <ucg_dev_ic_st7735_18+0xe8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2280      	movs	r2, #128	; 0x80
 80038aa:	801a      	strh	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	805a      	strh	r2, [r3, #2]
 80038b2:	2301      	movs	r3, #1
 80038b4:	e030      	b.n	8003918 <ucg_dev_ic_st7735_18+0xe8>
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 fccb 	bl	8004252 <ucg_clip_is_pixel_visible>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d01b      	beq.n	80038fa <ucg_dev_ic_st7735_18+0xca>
 80038c2:	4918      	ldr	r1, [pc, #96]	; (8003924 <ucg_dev_ic_st7735_18+0xf4>)
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f001 f80b 	bl	80048e0 <ucg_com_SendCmdSeq>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038d0:	753b      	strb	r3, [r7, #20]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80038d8:	757b      	strb	r3, [r7, #21]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80038e0:	75bb      	strb	r3, [r7, #22]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	69dc      	ldr	r4, [r3, #28]
 80038e6:	f107 0314 	add.w	r3, r7, #20
 80038ea:	2201      	movs	r2, #1
 80038ec:	2113      	movs	r1, #19
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	47a0      	blx	r4
 80038f2:	2101      	movs	r1, #1
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 ff3f 	bl	8004778 <ucg_com_SetCSLineStatus>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e00c      	b.n	8003918 <ucg_dev_ic_st7735_18+0xe8>
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff fe80 	bl	8003604 <ucg_handle_st7735_l90fx>
 8003904:	2301      	movs	r3, #1
 8003906:	e007      	b.n	8003918 <ucg_dev_ic_st7735_18+0xe8>
 8003908:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	4619      	mov	r1, r3
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f7ff fe47 	bl	80035a4 <ucg_dev_default_cb>
 8003916:	4603      	mov	r3, r0
 8003918:	4618      	mov	r0, r3
 800391a:	371c      	adds	r7, #28
 800391c:	46bd      	mov	sp, r7
 800391e:	bd90      	pop	{r4, r7, pc}
 8003920:	08004ec0 	.word	0x08004ec0
 8003924:	08004e14 	.word	0x08004e14

08003928 <ucg_ext_st7735_18>:
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	460b      	mov	r3, r1
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	817b      	strh	r3, [r7, #10]
 8003936:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800393a:	2b17      	cmp	r3, #23
 800393c:	d103      	bne.n	8003946 <ucg_ext_st7735_18+0x1e>
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f7ff fecc 	bl	80036dc <ucg_handle_st7735_l90se>
 8003944:	bf00      	nop
 8003946:	2301      	movs	r3, #1
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <ucg_PowerDown>:
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <ucg_PowerDown+0x2c>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2200      	movs	r2, #0
 800396c:	210b      	movs	r1, #11
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	7813      	ldrb	r3, [r2, #0]
 8003976:	f36f 0300 	bfc	r3, #0, #1
 800397a:	7013      	strb	r3, [r2, #0]
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <ucg_PowerUp>:
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff ffdf 	bl	8003950 <ucg_PowerDown>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2200      	movs	r2, #0
 8003998:	210a      	movs	r1, #10
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	4798      	blx	r3
 800399e:	4603      	mov	r3, r0
 80039a0:	81fb      	strh	r3, [r7, #14]
 80039a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d004      	beq.n	80039b4 <ucg_PowerUp+0x30>
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	7813      	ldrb	r3, [r2, #0]
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	7013      	strb	r3, [r2, #0]
 80039b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <ucg_SetClipBox>:
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	210c      	movs	r1, #12
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <ucg_SetMaxClipRange>:
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	f107 030c 	add.w	r3, r7, #12
 80039ec:	3202      	adds	r2, #2
 80039ee:	6810      	ldr	r0, [r2, #0]
 80039f0:	6018      	str	r0, [r3, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	813b      	strh	r3, [r7, #8]
 80039f6:	2300      	movs	r3, #0
 80039f8:	817b      	strh	r3, [r7, #10]
 80039fa:	f107 0308 	add.w	r3, r7, #8
 80039fe:	4619      	mov	r1, r3
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ffdd 	bl	80039c0 <ucg_SetClipBox>
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <ucg_GetDimension>:
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	3202      	adds	r2, #2
 8003a1e:	210f      	movs	r1, #15
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ffda 	bl	80039de <ucg_SetMaxClipRange>
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <ucg_DrawPixelWithArg>:
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2114      	movs	r1, #20
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	4798      	blx	r3
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <ucg_DrawL90FXWithArg>:
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	3224      	adds	r2, #36	; 0x24
 8003a5e:	2115      	movs	r1, #21
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4798      	blx	r3
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <ucg_dev_st7735_18x128x128>:
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	460b      	mov	r3, r1
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	817b      	strh	r3, [r7, #10]
 8003a7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a7e:	2b0b      	cmp	r3, #11
 8003a80:	d015      	beq.n	8003aae <ucg_dev_st7735_18x128x128+0x42>
 8003a82:	2b0f      	cmp	r3, #15
 8003a84:	d01c      	beq.n	8003ac0 <ucg_dev_st7735_18x128x128+0x54>
 8003a86:	2b0a      	cmp	r3, #10
 8003a88:	d122      	bne.n	8003ad0 <ucg_dev_st7735_18x128x128+0x64>
 8003a8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4619      	mov	r1, r3
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f7ff fecc 	bl	8003830 <ucg_dev_ic_st7735_18>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <ucg_dev_st7735_18x128x128+0x36>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e01e      	b.n	8003ae0 <ucg_dev_st7735_18x128x128+0x74>
 8003aa2:	4911      	ldr	r1, [pc, #68]	; (8003ae8 <ucg_dev_st7735_18x128x128+0x7c>)
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 ff1b 	bl	80048e0 <ucg_com_SendCmdSeq>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e018      	b.n	8003ae0 <ucg_dev_st7735_18x128x128+0x74>
 8003aae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff feba 	bl	8003830 <ucg_dev_ic_st7735_18>
 8003abc:	4603      	mov	r3, r0
 8003abe:	e00f      	b.n	8003ae0 <ucg_dev_st7735_18x128x128+0x74>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2280      	movs	r2, #128	; 0x80
 8003ac4:	801a      	strh	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2280      	movs	r2, #128	; 0x80
 8003aca:	805a      	strh	r2, [r3, #2]
 8003acc:	2301      	movs	r3, #1
 8003ace:	e007      	b.n	8003ae0 <ucg_dev_st7735_18x128x128+0x74>
 8003ad0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f7ff fea9 	bl	8003830 <ucg_dev_ic_st7735_18>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	08004ec8 	.word	0x08004ec8

08003aec <ucg_SetFontMode>:
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	70fb      	strb	r3, [r7, #3]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <ucg_font_calc_vref_font>:
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	2300      	movs	r3, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <ucg_SetFontPosBaseline>:
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <ucg_SetFontPosBaseline+0x1c>)
 8003b30:	67da      	str	r2, [r3, #124]	; 0x7c
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	08003b0d 	.word	0x08003b0d

08003b44 <ucg_init_struct>:
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	7813      	ldrb	r3, [r2, #0]
 8003b50:	f36f 0300 	bfc	r3, #0, #1
 8003b54:	7013      	strb	r3, [r2, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	611a      	str	r2, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	865a      	strh	r2, [r3, #50]	; 0x32
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	679a      	str	r2, [r3, #120]	; 0x78
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <ucg_Init>:
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7ff ffce 	bl	8003b44 <ucg_init_struct>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <ucg_Init+0x22>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4a0e      	ldr	r2, [pc, #56]	; (8003bec <ucg_Init+0x58>)
 8003bb2:	60da      	str	r2, [r3, #12]
 8003bb4:	e002      	b.n	8003bbc <ucg_Init+0x28>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	60da      	str	r2, [r3, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	609a      	str	r2, [r3, #8]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	61da      	str	r2, [r3, #28]
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f7ff ffab 	bl	8003b24 <ucg_SetFontPosBaseline>
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f7ff fed8 	bl	8003984 <ucg_PowerUp>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	82fb      	strh	r3, [r7, #22]
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f7ff ff18 	bl	8003a0e <ucg_GetDimension>
 8003bde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	080035e9 	.word	0x080035e9

08003bf0 <ucg_Draw90Line>:
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	817b      	strh	r3, [r7, #10]
 8003c02:	460b      	mov	r3, r1
 8003c04:	813b      	strh	r3, [r7, #8]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]
 8003c0a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003c0e:	68f9      	ldr	r1, [r7, #12]
 8003c10:	4613      	mov	r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4413      	add	r3, r2
 8003c16:	440b      	add	r3, r1
 8003c18:	333a      	adds	r3, #58	; 0x3a
 8003c1a:	781a      	ldrb	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003c22:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003c26:	68f9      	ldr	r1, [r7, #12]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	440b      	add	r3, r1
 8003c30:	333b      	adds	r3, #59	; 0x3b
 8003c32:	781a      	ldrb	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003c3a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003c3e:	68f9      	ldr	r1, [r7, #12]
 8003c40:	4613      	mov	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4413      	add	r3, r2
 8003c46:	440b      	add	r3, r1
 8003c48:	333c      	adds	r3, #60	; 0x3c
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	897a      	ldrh	r2, [r7, #10]
 8003c56:	849a      	strh	r2, [r3, #36]	; 0x24
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	893a      	ldrh	r2, [r7, #8]
 8003c5c:	84da      	strh	r2, [r3, #38]	; 0x26
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	88fa      	ldrh	r2, [r7, #6]
 8003c62:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8b3a      	ldrh	r2, [r7, #24]
 8003c68:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff feef 	bl	8003a4e <ucg_DrawL90FXWithArg>
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <ucg_DrawHLine>:
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	4608      	mov	r0, r1
 8003c82:	4611      	mov	r1, r2
 8003c84:	461a      	mov	r2, r3
 8003c86:	4603      	mov	r3, r0
 8003c88:	817b      	strh	r3, [r7, #10]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	813b      	strh	r3, [r7, #8]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80fb      	strh	r3, [r7, #6]
 8003c92:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003c96:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003c9a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7ff ffa1 	bl	8003bf0 <ucg_Draw90Line>
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <ucg_SetColor>:
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	4608      	mov	r0, r1
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	70fb      	strb	r3, [r7, #3]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	70bb      	strb	r3, [r7, #2]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	707b      	strb	r3, [r7, #1]
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	4413      	add	r3, r2
 8003cda:	440b      	add	r3, r1
 8003cdc:	333a      	adds	r3, #58	; 0x3a
 8003cde:	78ba      	ldrb	r2, [r7, #2]
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4413      	add	r3, r2
 8003cec:	440b      	add	r3, r1
 8003cee:	333b      	adds	r3, #59	; 0x3b
 8003cf0:	787a      	ldrb	r2, [r7, #1]
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4413      	add	r3, r2
 8003cfe:	440b      	add	r3, r1
 8003d00:	333c      	adds	r3, #60	; 0x3c
 8003d02:	7c3a      	ldrb	r2, [r7, #16]
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <ucg_DrawPixel>:
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	807b      	strh	r3, [r7, #2]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	803b      	strh	r3, [r7, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	887a      	ldrh	r2, [r7, #2]
 8003d4a:	849a      	strh	r2, [r3, #36]	; 0x24
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	883a      	ldrh	r2, [r7, #0]
 8003d50:	84da      	strh	r2, [r3, #38]	; 0x26
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff fe6d 	bl	8003a32 <ucg_DrawPixelWithArg>
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <ucg_UndoRotate>:
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d006      	beq.n	8003d7e <ucg_UndoRotate+0x1e>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	609a      	str	r2, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	611a      	str	r2, [r3, #16]
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fe45 	bl	8003a0e <ucg_GetDimension>
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff fe2a 	bl	80039de <ucg_SetMaxClipRange>
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <ucg_rotate_180_xy>:
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8adb      	ldrh	r3, [r3, #22]
 8003da0:	81fb      	strh	r3, [r7, #14]
 8003da2:	89fa      	ldrh	r2, [r7, #14]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	81fb      	strh	r3, [r7, #14]
 8003db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	81fb      	strh	r3, [r7, #14]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	89fa      	ldrh	r2, [r7, #14]
 8003dc2:	805a      	strh	r2, [r3, #2]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8a9b      	ldrh	r3, [r3, #20]
 8003dc8:	81bb      	strh	r3, [r7, #12]
 8003dca:	89ba      	ldrh	r2, [r7, #12]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	81bb      	strh	r3, [r7, #12]
 8003dda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	81bb      	strh	r3, [r7, #12]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	89ba      	ldrh	r2, [r7, #12]
 8003dea:	801a      	strh	r2, [r3, #0]
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <ucg_dev_rotate180>:
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	460b      	mov	r3, r1
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	817b      	strh	r3, [r7, #10]
 8003e06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e0a:	3b0c      	subs	r3, #12
 8003e0c:	2b0b      	cmp	r3, #11
 8003e0e:	d866      	bhi.n	8003ede <ucg_dev_rotate180+0xe6>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <ucg_dev_rotate180+0x20>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e67 	.word	0x08003e67
 8003e1c:	08003edf 	.word	0x08003edf
 8003e20:	08003edf 	.word	0x08003edf
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003edf 	.word	0x08003edf
 8003e2c:	08003edf 	.word	0x08003edf
 8003e30:	08003edf 	.word	0x08003edf
 8003e34:	08003edf 	.word	0x08003edf
 8003e38:	08003eaf 	.word	0x08003eaf
 8003e3c:	08003eaf 	.word	0x08003eaf
 8003e40:	08003edf 	.word	0x08003edf
 8003e44:	08003eaf 	.word	0x08003eaf
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	3214      	adds	r2, #20
 8003e50:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	4798      	blx	r3
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3314      	adds	r3, #20
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	6010      	str	r0, [r2, #0]
 8003e62:	2301      	movs	r3, #1
 8003e64:	e043      	b.n	8003eee <ucg_dev_rotate180+0xf6>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	4413      	add	r3, r2
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	b21a      	sxth	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	805a      	strh	r2, [r3, #2]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	b21a      	sxth	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	801a      	strh	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f7ff ff73 	bl	8003d92 <ucg_rotate_180_xy>
 8003eac:	e017      	b.n	8003ede <ucg_dev_rotate180+0xe6>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	b21a      	sxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	b21a      	sxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3324      	adds	r3, #36	; 0x24
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff ff5b 	bl	8003d92 <ucg_rotate_180_xy>
 8003edc:	bf00      	nop
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	4798      	blx	r3
 8003eec:	4603      	mov	r3, r0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop

08003ef8 <ucg_SetRotate180>:
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ff2d 	bl	8003d60 <ucg_UndoRotate>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	611a      	str	r2, [r3, #16]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <ucg_SetRotate180+0x30>)
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff fd7a 	bl	8003a0e <ucg_GetDimension>
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fd5f 	bl	80039de <ucg_SetMaxClipRange>
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	08003df9 	.word	0x08003df9

08003f2c <bufInit>:
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	4611      	mov	r1, r2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	71fb      	strb	r3, [r7, #7]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80bb      	strh	r3, [r7, #4]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	88ba      	ldrh	r2, [r7, #4]
 8003f46:	801a      	strh	r2, [r3, #0]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	79fa      	ldrb	r2, [r7, #7]
 8003f4c:	711a      	strb	r2, [r3, #4]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	60da      	str	r2, [r3, #12]
 8003f54:	68b8      	ldr	r0, [r7, #8]
 8003f56:	f000 f836 	bl	8003fc6 <bufFlush>
 8003f5a:	bf00      	nop
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <bufNumItems>:
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	885b      	ldrh	r3, [r3, #2]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <bufIsFull>:
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	885a      	ldrh	r2, [r3, #2]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	bf2c      	ite	cs
 8003f8e:	2301      	movcs	r3, #1
 8003f90:	2300      	movcc	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	4618      	mov	r0, r3
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <bufIsEmpty>:
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	88da      	ldrh	r2, [r3, #6]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	891b      	ldrh	r3, [r3, #8]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2301      	moveq	r3, #1
 8003fb6:	2300      	movne	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	4618      	mov	r0, r3
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <bufFlush>:
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	80da      	strh	r2, [r3, #6]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	811a      	strh	r2, [r3, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	805a      	strh	r2, [r3, #2]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68d8      	ldr	r0, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2100      	movs	r1, #0
 8003fec:	f000 f894 	bl	8004118 <memsetl>
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <bufEnDat>:
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
 8004002:	b672      	cpsid	i
 8004004:	2300      	movs	r3, #0
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	e021      	b.n	800404e <bufEnDat+0x56>
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	441a      	add	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	88c9      	ldrh	r1, [r1, #6]
 8004018:	440b      	add	r3, r1
 800401a:	7812      	ldrb	r2, [r2, #0]
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	88db      	ldrh	r3, [r3, #6]
 8004022:	3301      	adds	r3, #1
 8004024:	b29b      	uxth	r3, r3
 8004026:	b21a      	sxth	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	3b01      	subs	r3, #1
 800402e:	b29b      	uxth	r3, r3
 8004030:	b21b      	sxth	r3, r3
 8004032:	4013      	ands	r3, r2
 8004034:	b21b      	sxth	r3, r3
 8004036:	b29a      	uxth	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	80da      	strh	r2, [r3, #6]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	885b      	ldrh	r3, [r3, #2]
 8004040:	3301      	adds	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	805a      	strh	r2, [r3, #2]
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	3301      	adds	r3, #1
 800404c:	73fb      	strb	r3, [r7, #15]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	791b      	ldrb	r3, [r3, #4]
 8004052:	7bfa      	ldrb	r2, [r7, #15]
 8004054:	429a      	cmp	r2, r3
 8004056:	d3d8      	bcc.n	800400a <bufEnDat+0x12>
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff ff8e 	bl	8003f7a <bufIsFull>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d011      	beq.n	8004088 <bufEnDat+0x90>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	891a      	ldrh	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	791b      	ldrb	r3, [r3, #4]
 800406c:	b29b      	uxth	r3, r3
 800406e:	4413      	add	r3, r2
 8004070:	b29b      	uxth	r3, r3
 8004072:	b21a      	sxth	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	3b01      	subs	r3, #1
 800407a:	b29b      	uxth	r3, r3
 800407c:	b21b      	sxth	r3, r3
 800407e:	4013      	ands	r3, r2
 8004080:	b21b      	sxth	r3, r3
 8004082:	b29a      	uxth	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	811a      	strh	r2, [r3, #8]
 8004088:	b662      	cpsie	i
 800408a:	2300      	movs	r3, #0
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <bufDeDat>:
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
 800409e:	b672      	cpsid	i
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff ff7d 	bl	8003fa0 <bufIsEmpty>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <bufDeDat+0x24>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	805a      	strh	r2, [r3, #2]
 80040b2:	b662      	cpsie	i
 80040b4:	2302      	movs	r3, #2
 80040b6:	e02b      	b.n	8004110 <bufDeDat+0x7c>
 80040b8:	2300      	movs	r3, #0
 80040ba:	73fb      	strb	r3, [r7, #15]
 80040bc:	e021      	b.n	8004102 <bufDeDat+0x6e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	8912      	ldrh	r2, [r2, #8]
 80040c6:	441a      	add	r2, r3
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	6839      	ldr	r1, [r7, #0]
 80040cc:	440b      	add	r3, r1
 80040ce:	7812      	ldrb	r2, [r2, #0]
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	891b      	ldrh	r3, [r3, #8]
 80040d6:	3301      	adds	r3, #1
 80040d8:	b29b      	uxth	r3, r3
 80040da:	b21a      	sxth	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	b21b      	sxth	r3, r3
 80040e6:	4013      	ands	r3, r2
 80040e8:	b21b      	sxth	r3, r3
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	811a      	strh	r2, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	885b      	ldrh	r3, [r3, #2]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	805a      	strh	r2, [r3, #2]
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	3301      	adds	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	791b      	ldrb	r3, [r3, #4]
 8004106:	7bfa      	ldrb	r2, [r7, #15]
 8004108:	429a      	cmp	r2, r3
 800410a:	d3d8      	bcc.n	80040be <bufDeDat+0x2a>
 800410c:	b662      	cpsie	i
 800410e:	2300      	movs	r3, #0
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <memsetl>:
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	70fb      	strb	r3, [r7, #3]
 8004124:	4613      	mov	r3, r2
 8004126:	803b      	strh	r3, [r7, #0]
 8004128:	e004      	b.n	8004134 <memsetl+0x1c>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	883b      	ldrh	r3, [r7, #0]
 8004136:	1e5a      	subs	r2, r3, #1
 8004138:	803a      	strh	r2, [r7, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f5      	bne.n	800412a <memsetl+0x12>
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <ucg_clip_is_x_visible>:
 800414a:	b480      	push	{r7}
 800414c:	b085      	sub	sp, #20
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004156:	81fb      	strh	r3, [r7, #14]
 8004158:	89fa      	ldrh	r2, [r7, #14]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8004160:	b29b      	uxth	r3, r3
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	b29b      	uxth	r3, r3
 8004166:	81fb      	strh	r3, [r7, #14]
 8004168:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800416c:	2b00      	cmp	r3, #0
 800416e:	da01      	bge.n	8004174 <ucg_clip_is_x_visible+0x2a>
 8004170:	2300      	movs	r3, #0
 8004172:	e009      	b.n	8004188 <ucg_clip_is_x_visible+0x3e>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800417a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800417e:	429a      	cmp	r2, r3
 8004180:	db01      	blt.n	8004186 <ucg_clip_is_x_visible+0x3c>
 8004182:	2300      	movs	r3, #0
 8004184:	e000      	b.n	8004188 <ucg_clip_is_x_visible+0x3e>
 8004186:	2301      	movs	r3, #1
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <ucg_clip_is_y_visible>:
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041a0:	81fb      	strh	r3, [r7, #14]
 80041a2:	89fa      	ldrh	r2, [r7, #14]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	81fb      	strh	r3, [r7, #14]
 80041b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da01      	bge.n	80041be <ucg_clip_is_y_visible+0x2a>
 80041ba:	2300      	movs	r3, #0
 80041bc:	e009      	b.n	80041d2 <ucg_clip_is_y_visible+0x3e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80041c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	db01      	blt.n	80041d0 <ucg_clip_is_y_visible+0x3c>
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <ucg_clip_is_y_visible+0x3e>
 80041d0:	2301      	movs	r3, #1
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <ucg_clip_intersection>:
 80041de:	b480      	push	{r7}
 80041e0:	b087      	sub	sp, #28
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	4611      	mov	r1, r2
 80041ea:	461a      	mov	r2, r3
 80041ec:	460b      	mov	r3, r1
 80041ee:	80fb      	strh	r3, [r7, #6]
 80041f0:	4613      	mov	r3, r2
 80041f2:	80bb      	strh	r3, [r7, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	82fb      	strh	r3, [r7, #22]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	82bb      	strh	r3, [r7, #20]
 8004200:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004204:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004208:	429a      	cmp	r2, r3
 800420a:	db01      	blt.n	8004210 <ucg_clip_intersection+0x32>
 800420c:	2300      	movs	r3, #0
 800420e:	e01a      	b.n	8004246 <ucg_clip_intersection+0x68>
 8004210:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004218:	429a      	cmp	r2, r3
 800421a:	dc01      	bgt.n	8004220 <ucg_clip_intersection+0x42>
 800421c:	2300      	movs	r3, #0
 800421e:	e012      	b.n	8004246 <ucg_clip_intersection+0x68>
 8004220:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004224:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004228:	429a      	cmp	r2, r3
 800422a:	da02      	bge.n	8004232 <ucg_clip_intersection+0x54>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	88fa      	ldrh	r2, [r7, #6]
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004236:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	dd02      	ble.n	8004244 <ucg_clip_intersection+0x66>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	88ba      	ldrh	r2, [r7, #4]
 8004242:	801a      	strh	r2, [r3, #0]
 8004244:	2301      	movs	r3, #1
 8004246:	4618      	mov	r0, r3
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <ucg_clip_is_pixel_visible>:
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff ff75 	bl	800414a <ucg_clip_is_x_visible>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <ucg_clip_is_pixel_visible+0x18>
 8004266:	2300      	movs	r3, #0
 8004268:	e008      	b.n	800427c <ucg_clip_is_pixel_visible+0x2a>
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff ff92 	bl	8004194 <ucg_clip_is_y_visible>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <ucg_clip_is_pixel_visible+0x28>
 8004276:	2300      	movs	r3, #0
 8004278:	e000      	b.n	800427c <ucg_clip_is_pixel_visible+0x2a>
 800427a:	2301      	movs	r3, #1
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <ucg_clip_l90fx>:
 8004284:	b590      	push	{r4, r7, lr}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	861a      	strh	r2, [r3, #48]	; 0x30
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004298:	2b03      	cmp	r3, #3
 800429a:	f200 816d 	bhi.w	8004578 <ucg_clip_l90fx+0x2f4>
 800429e:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <ucg_clip_l90fx+0x20>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	080042b5 	.word	0x080042b5
 80042a8:	0800435b 	.word	0x0800435b
 80042ac:	08004401 	.word	0x08004401
 80042b0:	080044bd 	.word	0x080044bd
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff ff6d 	bl	8004194 <ucg_clip_is_y_visible>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <ucg_clip_l90fx+0x40>
 80042c0:	2300      	movs	r3, #0
 80042c2:	e15a      	b.n	800457a <ucg_clip_l90fx+0x2f6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80042ca:	81fb      	strh	r3, [r7, #14]
 80042cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042d0:	81bb      	strh	r3, [r7, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80042d8:	b29a      	uxth	r2, r3
 80042da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	b21b      	sxth	r3, r3
 80042e6:	81bb      	strh	r3, [r7, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	4413      	add	r3, r2
 8004300:	b29b      	uxth	r3, r3
 8004302:	b21b      	sxth	r3, r3
 8004304:	f107 010c 	add.w	r1, r7, #12
 8004308:	f107 000e 	add.w	r0, r7, #14
 800430c:	4622      	mov	r2, r4
 800430e:	f7ff ff66 	bl	80041de <ucg_clip_intersection>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <ucg_clip_l90fx+0x98>
 8004318:	2300      	movs	r3, #0
 800431a:	e12e      	b.n	800457a <ucg_clip_l90fx+0x2f6>
 800431c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004328:	b29b      	uxth	r3, r3
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	b29b      	uxth	r3, r3
 800432e:	b21a      	sxth	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	861a      	strh	r2, [r3, #48]	; 0x30
 8004334:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	849a      	strh	r2, [r3, #36]	; 0x24
 800433c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004340:	b29a      	uxth	r2, r3
 8004342:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004346:	b29b      	uxth	r3, r3
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	b29b      	uxth	r3, r3
 800434c:	b21b      	sxth	r3, r3
 800434e:	81bb      	strh	r3, [r7, #12]
 8004350:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004358:	e10e      	b.n	8004578 <ucg_clip_l90fx+0x2f4>
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff fef5 	bl	800414a <ucg_clip_is_x_visible>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <ucg_clip_l90fx+0xe6>
 8004366:	2300      	movs	r3, #0
 8004368:	e107      	b.n	800457a <ucg_clip_l90fx+0x2f6>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004370:	81fb      	strh	r3, [r7, #14]
 8004372:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004376:	81bb      	strh	r3, [r7, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800437e:	b29a      	uxth	r2, r3
 8004380:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004384:	b29b      	uxth	r3, r3
 8004386:	4413      	add	r3, r2
 8004388:	b29b      	uxth	r3, r3
 800438a:	b21b      	sxth	r3, r3
 800438c:	81bb      	strh	r3, [r7, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800439a:	b29a      	uxth	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	4413      	add	r3, r2
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	b21b      	sxth	r3, r3
 80043aa:	f107 010c 	add.w	r1, r7, #12
 80043ae:	f107 000e 	add.w	r0, r7, #14
 80043b2:	4622      	mov	r2, r4
 80043b4:	f7ff ff13 	bl	80041de <ucg_clip_intersection>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <ucg_clip_l90fx+0x13e>
 80043be:	2300      	movs	r3, #0
 80043c0:	e0db      	b.n	800457a <ucg_clip_l90fx+0x2f6>
 80043c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	b21a      	sxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	861a      	strh	r2, [r3, #48]	; 0x30
 80043da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	84da      	strh	r2, [r3, #38]	; 0x26
 80043e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	b21b      	sxth	r3, r3
 80043f4:	81bb      	strh	r3, [r7, #12]
 80043f6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	859a      	strh	r2, [r3, #44]	; 0x2c
 80043fe:	e0bb      	b.n	8004578 <ucg_clip_l90fx+0x2f4>
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff fec7 	bl	8004194 <ucg_clip_is_y_visible>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <ucg_clip_l90fx+0x18c>
 800440c:	2300      	movs	r3, #0
 800440e:	e0b4      	b.n	800457a <ucg_clip_l90fx+0x2f6>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004416:	81bb      	strh	r3, [r7, #12]
 8004418:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800441c:	b29b      	uxth	r3, r3
 800441e:	3301      	adds	r3, #1
 8004420:	b29b      	uxth	r3, r3
 8004422:	b21b      	sxth	r3, r3
 8004424:	81bb      	strh	r3, [r7, #12]
 8004426:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800442a:	81fb      	strh	r3, [r7, #14]
 800442c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004430:	b29a      	uxth	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004438:	b29b      	uxth	r3, r3
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	b29b      	uxth	r3, r3
 800443e:	b21b      	sxth	r3, r3
 8004440:	81fb      	strh	r3, [r7, #14]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800444e:	b29a      	uxth	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8004456:	b29b      	uxth	r3, r3
 8004458:	4413      	add	r3, r2
 800445a:	b29b      	uxth	r3, r3
 800445c:	b21b      	sxth	r3, r3
 800445e:	f107 010c 	add.w	r1, r7, #12
 8004462:	f107 000e 	add.w	r0, r7, #14
 8004466:	4622      	mov	r2, r4
 8004468:	f7ff feb9 	bl	80041de <ucg_clip_intersection>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <ucg_clip_l90fx+0x1f2>
 8004472:	2300      	movs	r3, #0
 8004474:	e081      	b.n	800457a <ucg_clip_l90fx+0x2f6>
 8004476:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800447a:	b29a      	uxth	r2, r3
 800447c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004480:	b29b      	uxth	r3, r3
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	b29b      	uxth	r3, r3
 8004486:	b21a      	sxth	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	859a      	strh	r2, [r3, #44]	; 0x2c
 800448c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29b      	uxth	r3, r3
 8004496:	b21b      	sxth	r3, r3
 8004498:	81bb      	strh	r3, [r7, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	b21a      	sxth	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	861a      	strh	r2, [r3, #48]	; 0x30
 80044b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	849a      	strh	r2, [r3, #36]	; 0x24
 80044ba:	e05d      	b.n	8004578 <ucg_clip_l90fx+0x2f4>
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff fe44 	bl	800414a <ucg_clip_is_x_visible>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <ucg_clip_l90fx+0x248>
 80044c8:	2300      	movs	r3, #0
 80044ca:	e056      	b.n	800457a <ucg_clip_l90fx+0x2f6>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80044d2:	81bb      	strh	r3, [r7, #12]
 80044d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3301      	adds	r3, #1
 80044dc:	b29b      	uxth	r3, r3
 80044de:	b21b      	sxth	r3, r3
 80044e0:	81bb      	strh	r3, [r7, #12]
 80044e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044e6:	81fb      	strh	r3, [r7, #14]
 80044e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	b21b      	sxth	r3, r3
 80044fc:	81fb      	strh	r3, [r7, #14]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800450a:	b29a      	uxth	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8004512:	b29b      	uxth	r3, r3
 8004514:	4413      	add	r3, r2
 8004516:	b29b      	uxth	r3, r3
 8004518:	b21b      	sxth	r3, r3
 800451a:	f107 010c 	add.w	r1, r7, #12
 800451e:	f107 000e 	add.w	r0, r7, #14
 8004522:	4622      	mov	r2, r4
 8004524:	f7ff fe5b 	bl	80041de <ucg_clip_intersection>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <ucg_clip_l90fx+0x2ae>
 800452e:	2300      	movs	r3, #0
 8004530:	e023      	b.n	800457a <ucg_clip_l90fx+0x2f6>
 8004532:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004536:	b29a      	uxth	r2, r3
 8004538:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800453c:	b29b      	uxth	r3, r3
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	b29b      	uxth	r3, r3
 8004542:	b21a      	sxth	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004548:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29b      	uxth	r3, r3
 8004552:	b21b      	sxth	r3, r3
 8004554:	81bb      	strh	r3, [r7, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800455c:	b29a      	uxth	r2, r3
 800455e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004562:	b29b      	uxth	r3, r3
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	b29b      	uxth	r3, r3
 8004568:	b21a      	sxth	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	861a      	strh	r2, [r3, #48]	; 0x30
 800456e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	84da      	strh	r2, [r3, #38]	; 0x26
 8004576:	bf00      	nop
 8004578:	2301      	movs	r3, #1
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	bd90      	pop	{r4, r7, pc}
 8004582:	bf00      	nop

08004584 <ucg_clip_l90se>:
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff fe79 	bl	8004284 <ucg_clip_l90fx>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <ucg_clip_l90se+0x18>
 8004598:	2300      	movs	r3, #0
 800459a:	e019      	b.n	80045d0 <ucg_clip_l90se+0x4c>
 800459c:	2300      	movs	r3, #0
 800459e:	73fb      	strb	r3, [r7, #15]
 80045a0:	e012      	b.n	80045c8 <ucg_clip_l90se+0x44>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f103 0146 	add.w	r1, r3, #70	; 0x46
 80045a8:	7bfa      	ldrb	r2, [r7, #15]
 80045aa:	4613      	mov	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	18ca      	adds	r2, r1, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80045ba:	4619      	mov	r1, r3
 80045bc:	4610      	mov	r0, r2
 80045be:	f7fe ff8c 	bl	80034da <ucg_ccs_seek>
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	3301      	adds	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d9e9      	bls.n	80045a2 <ucg_clip_l90se+0x1e>
 80045ce:	2301      	movs	r3, #1
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <ucg_com_PowerDown>:
 80045d8:	b590      	push	{r4, r7, lr}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d006      	beq.n	80045fc <ucg_com_PowerDown+0x24>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69dc      	ldr	r4, [r3, #28]
 80045f2:	2300      	movs	r3, #0
 80045f4:	2200      	movs	r2, #0
 80045f6:	210b      	movs	r1, #11
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	47a0      	blx	r4
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004602:	f023 0308 	bic.w	r3, r3, #8
 8004606:	b2da      	uxtb	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	bd90      	pop	{r4, r7, pc}

08004616 <ucg_com_PowerUp>:
 8004616:	b590      	push	{r4, r7, lr}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	460b      	mov	r3, r1
 8004620:	807b      	strh	r3, [r7, #2]
 8004622:	4613      	mov	r3, r2
 8004624:	803b      	strh	r3, [r7, #0]
 8004626:	887b      	ldrh	r3, [r7, #2]
 8004628:	813b      	strh	r3, [r7, #8]
 800462a:	883b      	ldrh	r3, [r7, #0]
 800462c:	817b      	strh	r3, [r7, #10]
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff ffd2 	bl	80045d8 <ucg_com_PowerDown>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69dc      	ldr	r4, [r3, #28]
 8004640:	f107 0308 	add.w	r3, r7, #8
 8004644:	2200      	movs	r2, #0
 8004646:	210a      	movs	r1, #10
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	47a0      	blx	r4
 800464c:	4603      	mov	r3, r0
 800464e:	81fb      	strh	r3, [r7, #14]
 8004650:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <ucg_com_PowerUp+0x54>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800465e:	f043 0308 	orr.w	r3, r3, #8
 8004662:	b2da      	uxtb	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 800466a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bd90      	pop	{r4, r7, pc}

08004676 <ucg_com_SetLineStatus>:
 8004676:	b590      	push	{r4, r7, lr}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	4608      	mov	r0, r1
 8004680:	4611      	mov	r1, r2
 8004682:	461a      	mov	r2, r3
 8004684:	4603      	mov	r3, r0
 8004686:	70fb      	strb	r3, [r7, #3]
 8004688:	460b      	mov	r3, r1
 800468a:	70bb      	strb	r3, [r7, #2]
 800468c:	4613      	mov	r3, r2
 800468e:	707b      	strb	r3, [r7, #1]
 8004690:	78fb      	ldrb	r3, [r7, #3]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d131      	bne.n	80046fa <ucg_com_SetLineStatus+0x84>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 800469c:	78bb      	ldrb	r3, [r7, #2]
 800469e:	4013      	ands	r3, r2
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d008      	beq.n	80046b8 <ucg_com_SetLineStatus+0x42>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 80046ac:	78bb      	ldrb	r3, [r7, #2]
 80046ae:	4013      	ands	r3, r2
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	78ba      	ldrb	r2, [r7, #2]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d14b      	bne.n	8004750 <ucg_com_SetLineStatus+0xda>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69dc      	ldr	r4, [r3, #28]
 80046bc:	787b      	ldrb	r3, [r7, #1]
 80046be:	b219      	sxth	r1, r3
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	2300      	movs	r3, #0
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	47a0      	blx	r4
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80046d0:	b25a      	sxtb	r2, r3
 80046d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80046d6:	43db      	mvns	r3, r3
 80046d8:	b25b      	sxtb	r3, r3
 80046da:	4013      	ands	r3, r2
 80046dc:	b25b      	sxtb	r3, r3
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 80046ec:	78bb      	ldrb	r3, [r7, #2]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 80046f8:	e02a      	b.n	8004750 <ucg_com_SetLineStatus+0xda>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8004700:	78bb      	ldrb	r3, [r7, #2]
 8004702:	4013      	ands	r3, r2
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <ucg_com_SetLineStatus+0xa4>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8004710:	78bb      	ldrb	r3, [r7, #2]
 8004712:	4013      	ands	r3, r2
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d11a      	bne.n	8004750 <ucg_com_SetLineStatus+0xda>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69dc      	ldr	r4, [r3, #28]
 800471e:	787b      	ldrb	r3, [r7, #1]
 8004720:	b219      	sxth	r1, r3
 8004722:	78fb      	ldrb	r3, [r7, #3]
 8004724:	b29a      	uxth	r2, r3
 8004726:	2300      	movs	r3, #0
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	47a0      	blx	r4
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8004732:	78bb      	ldrb	r3, [r7, #2]
 8004734:	4313      	orrs	r3, r2
 8004736:	b2da      	uxtb	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8004744:	78bb      	ldrb	r3, [r7, #2]
 8004746:	4313      	orrs	r3, r2
 8004748:	b2da      	uxtb	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	bd90      	pop	{r4, r7, pc}

08004758 <ucg_com_SetResetLineStatus>:
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	70fb      	strb	r3, [r7, #3]
 8004764:	78f9      	ldrb	r1, [r7, #3]
 8004766:	230d      	movs	r3, #13
 8004768:	2204      	movs	r2, #4
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff ff83 	bl	8004676 <ucg_com_SetLineStatus>
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <ucg_com_SetCSLineStatus>:
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	70fb      	strb	r3, [r7, #3]
 8004784:	78f9      	ldrb	r1, [r7, #3]
 8004786:	230e      	movs	r3, #14
 8004788:	2202      	movs	r2, #2
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff ff73 	bl	8004676 <ucg_com_SetLineStatus>
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <ucg_com_SetCDLineStatus>:
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	70fb      	strb	r3, [r7, #3]
 80047a4:	78f9      	ldrb	r1, [r7, #3]
 80047a6:	230f      	movs	r3, #15
 80047a8:	2201      	movs	r2, #1
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff ff63 	bl	8004676 <ucg_com_SetLineStatus>
 80047b0:	bf00      	nop
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <ucg_com_DelayMicroseconds>:
 80047b8:	b590      	push	{r4, r7, lr}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69dc      	ldr	r4, [r3, #28]
 80047c8:	887a      	ldrh	r2, [r7, #2]
 80047ca:	2300      	movs	r3, #0
 80047cc:	210c      	movs	r1, #12
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	47a0      	blx	r4
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd90      	pop	{r4, r7, pc}

080047da <ucg_com_DelayMilliseconds>:
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	460b      	mov	r3, r1
 80047e4:	807b      	strh	r3, [r7, #2]
 80047e6:	e007      	b.n	80047f8 <ucg_com_DelayMilliseconds+0x1e>
 80047e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ffe3 	bl	80047b8 <ucg_com_DelayMicroseconds>
 80047f2:	887b      	ldrh	r3, [r7, #2]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	807b      	strh	r3, [r7, #2]
 80047f8:	887b      	ldrh	r3, [r7, #2]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f4      	bne.n	80047e8 <ucg_com_DelayMilliseconds+0xe>
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <ucg_com_SendByte>:
 8004806:	b590      	push	{r4, r7, lr}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	460b      	mov	r3, r1
 8004810:	70fb      	strb	r3, [r7, #3]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69dc      	ldr	r4, [r3, #28]
 8004816:	78fb      	ldrb	r3, [r7, #3]
 8004818:	b29a      	uxth	r2, r3
 800481a:	2300      	movs	r3, #0
 800481c:	2110      	movs	r1, #16
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	47a0      	blx	r4
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	bd90      	pop	{r4, r7, pc}

0800482a <ucg_com_SendStringP>:
 800482a:	b590      	push	{r4, r7, lr}
 800482c:	b087      	sub	sp, #28
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	460b      	mov	r3, r1
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	817b      	strh	r3, [r7, #10]
 8004838:	e010      	b.n	800485c <ucg_com_SendStringP+0x32>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	75fb      	strb	r3, [r7, #23]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	69dc      	ldr	r4, [r3, #28]
 8004844:	7dfb      	ldrb	r3, [r7, #23]
 8004846:	b29a      	uxth	r2, r3
 8004848:	2300      	movs	r3, #0
 800484a:	2110      	movs	r1, #16
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	47a0      	blx	r4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3301      	adds	r3, #1
 8004854:	607b      	str	r3, [r7, #4]
 8004856:	897b      	ldrh	r3, [r7, #10]
 8004858:	3b01      	subs	r3, #1
 800485a:	817b      	strh	r3, [r7, #10]
 800485c:	897b      	ldrh	r3, [r7, #10]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1eb      	bne.n	800483a <ucg_com_SendStringP+0x10>
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	bd90      	pop	{r4, r7, pc}

0800486a <ucg_com_SendCmdArg>:
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	4611      	mov	r1, r2
 8004876:	461a      	mov	r2, r3
 8004878:	460b      	mov	r3, r1
 800487a:	71fb      	strb	r3, [r7, #7]
 800487c:	4613      	mov	r3, r2
 800487e:	71bb      	strb	r3, [r7, #6]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	b2db      	uxtb	r3, r3
 8004890:	4619      	mov	r1, r3
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7ff ff80 	bl	8004798 <ucg_com_SetCDLineStatus>
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	b29b      	uxth	r3, r3
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	4619      	mov	r1, r3
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7ff ffc2 	bl	800482a <ucg_com_SendStringP>
 80048a6:	79bb      	ldrb	r3, [r7, #6]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d014      	beq.n	80048d6 <ucg_com_SendCmdArg+0x6c>
 80048ac:	79fb      	ldrb	r3, [r7, #7]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4413      	add	r3, r2
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	4619      	mov	r1, r3
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7ff ff68 	bl	8004798 <ucg_com_SetCDLineStatus>
 80048c8:	79bb      	ldrb	r3, [r7, #6]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	4619      	mov	r1, r3
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff ffaa 	bl	800482a <ucg_com_SendStringP>
 80048d6:	bf00      	nop
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <ucg_com_SendCmdSeq>:
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	73fb      	strb	r3, [r7, #15]
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	73bb      	strb	r3, [r7, #14]
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	737b      	strb	r3, [r7, #13]
 80048fe:	7bbb      	ldrb	r3, [r7, #14]
 8004900:	2b0f      	cmp	r3, #15
 8004902:	f200 8124 	bhi.w	8004b4e <ucg_com_SendCmdSeq+0x26e>
 8004906:	a201      	add	r2, pc, #4	; (adr r2, 800490c <ucg_com_SendCmdSeq+0x2c>)
 8004908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490c:	08004b4f 	.word	0x08004b4f
 8004910:	0800494d 	.word	0x0800494d
 8004914:	0800494d 	.word	0x0800494d
 8004918:	0800494d 	.word	0x0800494d
 800491c:	08004b4f 	.word	0x08004b4f
 8004920:	08004b4f 	.word	0x08004b4f
 8004924:	0800496d 	.word	0x0800496d
 8004928:	0800499f 	.word	0x0800499f
 800492c:	080049e3 	.word	0x080049e3
 8004930:	08004a0f 	.word	0x08004a0f
 8004934:	08004a3b 	.word	0x08004a3b
 8004938:	08004a9b 	.word	0x08004a9b
 800493c:	08004b4f 	.word	0x08004b4f
 8004940:	08004b4f 	.word	0x08004b4f
 8004944:	08004b4f 	.word	0x08004b4f
 8004948:	08004afb 	.word	0x08004afb
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	1c59      	adds	r1, r3, #1
 8004950:	7b7b      	ldrb	r3, [r7, #13]
 8004952:	7bba      	ldrb	r2, [r7, #14]
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff ff88 	bl	800486a <ucg_com_SendCmdArg>
 800495a:	7bbb      	ldrb	r3, [r7, #14]
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	7b7b      	ldrb	r3, [r7, #13]
 8004960:	4413      	add	r3, r2
 8004962:	461a      	mov	r2, r3
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	4413      	add	r3, r2
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	e0ef      	b.n	8004b4c <ucg_com_SendCmdSeq+0x26c>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	b2db      	uxtb	r3, r3
 8004978:	4619      	mov	r1, r3
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff ff0c 	bl	8004798 <ucg_com_SetCDLineStatus>
 8004980:	7b7b      	ldrb	r3, [r7, #13]
 8004982:	b299      	uxth	r1, r3
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	3301      	adds	r3, #1
 8004988:	461a      	mov	r2, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff ff4d 	bl	800482a <ucg_com_SendStringP>
 8004990:	7b7b      	ldrb	r3, [r7, #13]
 8004992:	3301      	adds	r3, #1
 8004994:	461a      	mov	r2, r3
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	4413      	add	r3, r2
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	e0d6      	b.n	8004b4c <ucg_com_SendCmdSeq+0x26c>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	4619      	mov	r1, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff feed 	bl	8004798 <ucg_com_SetCDLineStatus>
 80049be:	7b7b      	ldrb	r3, [r7, #13]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <ucg_com_SendCmdSeq+0xf4>
 80049c4:	7b7b      	ldrb	r3, [r7, #13]
 80049c6:	b299      	uxth	r1, r3
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	3301      	adds	r3, #1
 80049cc:	461a      	mov	r2, r3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff ff2b 	bl	800482a <ucg_com_SendStringP>
 80049d4:	7b7b      	ldrb	r3, [r7, #13]
 80049d6:	3301      	adds	r3, #1
 80049d8:	461a      	mov	r2, r3
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	4413      	add	r3, r2
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	e0b4      	b.n	8004b4c <ucg_com_SendCmdSeq+0x26c>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	3301      	adds	r3, #1
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	73fb      	strb	r3, [r7, #15]
 80049ee:	7b7b      	ldrb	r3, [r7, #13]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	4413      	add	r3, r2
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	4619      	mov	r1, r3
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff feea 	bl	80047da <ucg_com_DelayMilliseconds>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	e09e      	b.n	8004b4c <ucg_com_SendCmdSeq+0x26c>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	3301      	adds	r3, #1
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	73fb      	strb	r3, [r7, #15]
 8004a1a:	7b7b      	ldrb	r3, [r7, #13]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	4413      	add	r3, r2
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff fec3 	bl	80047b8 <ucg_com_DelayMicroseconds>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	3301      	adds	r3, #1
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	e088      	b.n	8004b4c <ucg_com_SendCmdSeq+0x26c>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	73fb      	strb	r3, [r7, #15]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	733b      	strb	r3, [r7, #12]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	3301      	adds	r3, #1
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	4619      	mov	r1, r3
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff fe96 	bl	8004798 <ucg_com_SetCDLineStatus>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004a72:	461a      	mov	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004a7a:	441a      	add	r2, r3
 8004a7c:	7b7b      	ldrb	r3, [r7, #13]
 8004a7e:	fa42 f303 	asr.w	r3, r2, r3
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	4013      	ands	r3, r2
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	7b3b      	ldrb	r3, [r7, #12]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff feb7 	bl	8004806 <ucg_com_SendByte>
 8004a98:	e058      	b.n	8004b4c <ucg_com_SendCmdSeq+0x26c>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	73fb      	strb	r3, [r7, #15]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	733b      	strb	r3, [r7, #12]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fe66 	bl	8004798 <ucg_com_SetCDLineStatus>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8004ada:	441a      	add	r2, r3
 8004adc:	7b7b      	ldrb	r3, [r7, #13]
 8004ade:	fa42 f303 	asr.w	r3, r2, r3
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	7b3b      	ldrb	r3, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	4619      	mov	r1, r3
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fe87 	bl	8004806 <ucg_com_SendByte>
 8004af8:	e028      	b.n	8004b4c <ucg_com_SendCmdSeq+0x26c>
 8004afa:	7b7b      	ldrb	r3, [r7, #13]
 8004afc:	089b      	lsrs	r3, r3, #2
 8004afe:	73bb      	strb	r3, [r7, #14]
 8004b00:	7b7b      	ldrb	r3, [r7, #13]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	737b      	strb	r3, [r7, #13]
 8004b08:	7bbb      	ldrb	r3, [r7, #14]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d00c      	beq.n	8004b28 <ucg_com_SendCmdSeq+0x248>
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d013      	beq.n	8004b3a <ucg_com_SendCmdSeq+0x25a>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d116      	bne.n	8004b44 <ucg_com_SendCmdSeq+0x264>
 8004b16:	7b7b      	ldrb	r3, [r7, #13]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	4619      	mov	r1, r3
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff fe19 	bl	8004758 <ucg_com_SetResetLineStatus>
 8004b26:	e00d      	b.n	8004b44 <ucg_com_SendCmdSeq+0x264>
 8004b28:	7b7b      	ldrb	r3, [r7, #13]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	4619      	mov	r1, r3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff fe20 	bl	8004778 <ucg_com_SetCSLineStatus>
 8004b38:	e004      	b.n	8004b44 <ucg_com_SendCmdSeq+0x264>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	7b7a      	ldrb	r2, [r7, #13]
 8004b3e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8004b42:	bf00      	nop
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	3301      	adds	r3, #1
 8004b48:	603b      	str	r3, [r7, #0]
 8004b4a:	bf00      	nop
 8004b4c:	e6cd      	b.n	80048ea <ucg_com_SendCmdSeq+0xa>
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop

08004b58 <__libc_init_array>:
 8004b58:	b570      	push	{r4, r5, r6, lr}
 8004b5a:	4d0d      	ldr	r5, [pc, #52]	; (8004b90 <__libc_init_array+0x38>)
 8004b5c:	4c0d      	ldr	r4, [pc, #52]	; (8004b94 <__libc_init_array+0x3c>)
 8004b5e:	1b64      	subs	r4, r4, r5
 8004b60:	10a4      	asrs	r4, r4, #2
 8004b62:	2600      	movs	r6, #0
 8004b64:	42a6      	cmp	r6, r4
 8004b66:	d109      	bne.n	8004b7c <__libc_init_array+0x24>
 8004b68:	4d0b      	ldr	r5, [pc, #44]	; (8004b98 <__libc_init_array+0x40>)
 8004b6a:	4c0c      	ldr	r4, [pc, #48]	; (8004b9c <__libc_init_array+0x44>)
 8004b6c:	f000 f82e 	bl	8004bcc <_init>
 8004b70:	1b64      	subs	r4, r4, r5
 8004b72:	10a4      	asrs	r4, r4, #2
 8004b74:	2600      	movs	r6, #0
 8004b76:	42a6      	cmp	r6, r4
 8004b78:	d105      	bne.n	8004b86 <__libc_init_array+0x2e>
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}
 8004b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b80:	4798      	blx	r3
 8004b82:	3601      	adds	r6, #1
 8004b84:	e7ee      	b.n	8004b64 <__libc_init_array+0xc>
 8004b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b8a:	4798      	blx	r3
 8004b8c:	3601      	adds	r6, #1
 8004b8e:	e7f2      	b.n	8004b76 <__libc_init_array+0x1e>
 8004b90:	08004ef4 	.word	0x08004ef4
 8004b94:	08004ef4 	.word	0x08004ef4
 8004b98:	08004ef4 	.word	0x08004ef4
 8004b9c:	08004ef8 	.word	0x08004ef8

08004ba0 <memcpy>:
 8004ba0:	440a      	add	r2, r1
 8004ba2:	4291      	cmp	r1, r2
 8004ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ba8:	d100      	bne.n	8004bac <memcpy+0xc>
 8004baa:	4770      	bx	lr
 8004bac:	b510      	push	{r4, lr}
 8004bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bb6:	4291      	cmp	r1, r2
 8004bb8:	d1f9      	bne.n	8004bae <memcpy+0xe>
 8004bba:	bd10      	pop	{r4, pc}

08004bbc <memset>:
 8004bbc:	4402      	add	r2, r0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d100      	bne.n	8004bc6 <memset+0xa>
 8004bc4:	4770      	bx	lr
 8004bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bca:	e7f9      	b.n	8004bc0 <memset+0x4>

08004bcc <_init>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	bf00      	nop
 8004bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd2:	bc08      	pop	{r3}
 8004bd4:	469e      	mov	lr, r3
 8004bd6:	4770      	bx	lr

08004bd8 <_fini>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	bf00      	nop
 8004bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bde:	bc08      	pop	{r3}
 8004be0:	469e      	mov	lr, r3
 8004be2:	4770      	bx	lr
